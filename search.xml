<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/03/12/0/"/>
      <url>/2024/03/12/0/</url>
      
        <content type="html"><![CDATA[<p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2024/03/04/15fc6e8c/"/>
      <url>/2024/03/04/15fc6e8c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="线程的六种状态和切换"><a href="#线程的六种状态和切换" class="headerlink" title="线程的六种状态和切换"></a>线程的六种状态和切换</h4><ul><li><p><code>Thread.state</code>的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建 可运行 阻塞 等待 时间等待 终止 （6种）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程被创建但尚未启动的状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程正在 Java 虚拟机中执行的状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程因为等待监视器锁进入阻塞状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程正在等待另一个线程执行特定操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程正在等待另一个线程执行特定操作，但等待一段时间后会自动恢复。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程已经执行完毕的状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>线程之间的切换</p><p><img src="https://img-blog.csdnimg.cn/direct/122ee046373848dfb14ff7e01b3c231d.png" alt=""></p><ul><li>创建线程对象是<code>新建状态</code></li><li>调用了<code>start()</code>方法转变为<code>可执行状态</code></li><li>线程获取到了<code>CPU</code>的执行权,执行结束是终止状态</li><li>在可执行状态的过程中,如果没有获取<code>CPU</code>的执行权,可能会切换成其他状态<ul><li>如果没有获取锁(<code>synchronized</code>或<code>lock</code>)进入阻塞状态,获取锁后再切换为可执行状态</li><li>如果线程调用了<code>wait()</code>进入等待状态,其他线程调用<code>notify()</code>唤醒后可切换为可执行状态</li><li>如果线程调用了<code>sleep(50)</code>方法,进入<code>计时等待状态</code>,到时间后切换为可执行状态</li></ul></li></ul></li></ul><h4 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h4><ul><li><p>进程</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当一个程序被运行,从磁盘加载这个程序的代码至内存,这时就开启了一个进程</p></div></li><li><p>线程</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>一个线程就是一个指令流,将指令流中的一条条指令以一定的顺序交给<code>CPU</code>执行</p></div></li><li><p>区别</p><ul><li>进程是正在运行程序的实例,进程中包含了线程,每个线程执行不同的任务</li><li>不同的进程使用不同的内存空间,在当前进程下的所有线程可以共享内存空间</li><li>线程更轻量,线程上下文切换成本一般上要比进程上下文切换低(<code>上下文切换指的是从一个线程切换到另一个线程</code>)</li></ul></li></ul><h4 id="并行与并发的区别"><a href="#并行与并发的区别" class="headerlink" title="并行与并发的区别"></a>并行与并发的区别</h4><ul><li>单核<code>CPU</code>下<ul><li>单核<code>CPU</code>下线程实际还是串行执行的</li><li>操作系统中有一个组件叫做任务调度器,将<code>CPU</code>的时间片分给不同的程序使用,只是由于<code>CPU</code>在线程间的切换非常快,人类感官是同时运行的</li><li>总结为一句话就是:<code>微观串行,宏观并行</code></li><li>一般会将这种线程轮流使用<code>CPU</code>的做法称为并发</li></ul></li><li>多核<code>CPU</code>下是并行的</li><li>并发:是同一时间应多多件事情的能力</li><li>并行: 是同一时间动手做多件事情的能力</li></ul><h4 id="线程创建的方式有哪些"><a href="#线程创建的方式有哪些" class="headerlink" title="线程创建的方式有哪些"></a>线程创建的方式有哪些</h4><ul><li><p>继承<code>Thread</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread Name: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyRunnable run...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Callable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;use Callable Thread............&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">// 创建</span></span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line">        <span class="comment">// 创建 Thread 对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 获取执行结果</span></span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>线程池创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPool</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread pool used..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        threadPool.submit(<span class="keyword">new</span> <span class="title class_">MyThreadPool</span>());</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Runnable和Callable有什么区别"><a href="#Runnable和Callable有什么区别" class="headerlink" title="Runnable和Callable有什么区别"></a>Runnable和Callable有什么区别</h4><ul><li><code>Runnable</code>接口<code>run</code>方法没有返回值</li><li><code>Callable</code>接口<code>call</code>方法有返回值,是个泛型,和<code>Future,FutureTask</code>配合可以用来获取异步执行的结果</li><li><code>Callable</code>接口的<code>call()</code>方法允许抛出异常;而<code>Runnable</code>接口的<code>run()</code>方法的异常只能在内部消化,不能继续上抛</li></ul><h4 id="在Java中wait和sleep方法的不同"><a href="#在Java中wait和sleep方法的不同" class="headerlink" title="在Java中wait和sleep方法的不同"></a>在Java中wait和sleep方法的不同</h4><ul><li><p>共同点</p><ul><li><code>wait(),wait(long)和sleep(long)</code>的效果都是让当前线程暂时放弃<code>CPU</code>的使用权,进入阻塞状态</li></ul></li><li><p>不同点</p><ul><li><p>方法归属不同</p><ul><li><code>sleep(long)</code>是<code>Thread</code>的静态方法</li><li>而<code>wait(long)</code>和<code>wait()</code>都是<code>Object</code>成员方法,每个对象都有</li></ul></li><li><p>唤醒时机不同</p><ul><li>执行<code>sleep(long)</code>和<code>wait(long)</code>的线程都会在等待响应毫秒后醒来</li><li><code>wait(long)</code>和<code>wait()</code>还可以被<code>notify</code>唤醒,<code>wait()</code>如果不换醒就一直等下去</li><li>他们都可以被打断唤醒</li></ul></li><li><p>锁特点不同</p><ul><li><p><code>wait</code>方法的调用必须先获取<code>wait</code>对象的锁,而<code>sleep</code>则无此限制</p></li><li><p><code>wait</code>方法执行后会释放对象锁,允许其他线程获得该对象锁(<code>我放弃 CPU,但你们还可以用</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        waiting();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">waiting</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;waiting..................&quot;</span>);</span><br><span class="line">                    LOCK.wait(<span class="number">5000L</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;running...... end ............&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;interrupted................&quot;</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;other..............&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d9a68d0c3e7c407fbe651defed528e8d.png" alt="wait方法执行后就会释放锁,允许其他线程获取对象锁"></p></li><li><p>而<code>sleep</code>如果在<code>synchronized</code>代码块中执行,并不会释放对象锁(<code>我放弃 CPU,你们也用不了</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sleeping();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleeping</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;sleeping..................&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;running...... end ............&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;interrupted................&quot;</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;other..............&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c8e3ddbed5a5484c8f004e972f3395df.png" alt="不会释放对象锁"></p></li></ul></li></ul></li></ul><h4 id="新建三个线程-如何保证他们按顺序执行"><a href="#新建三个线程-如何保证他们按顺序执行" class="headerlink" title="新建三个线程,如何保证他们按顺序执行"></a>新建三个线程,如何保证他们按顺序执行</h4><ul><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1 task &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2 task &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            ;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T3 task &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="notify和notifyAll有什么区别"><a href="#notify和notifyAll有什么区别" class="headerlink" title="notify和notifyAll有什么区别"></a>notify和notifyAll有什么区别</h4><ul><li><code>notifyAll</code>: 唤醒所有<code>wait</code>的线程</li><li><code>notify</code>只随机唤醒一个<code>wait</code>线程</li></ul><h4 id="线程的run和start有什么区别"><a href="#线程的run和start有什么区别" class="headerlink" title="线程的run和start有什么区别"></a>线程的run和start有什么区别</h4><ul><li><code>start()</code>：用来启动线程,通过线程调用<code>run</code>方法执行<code>run</code>方法中所定义的逻辑代码,<code>start</code>方法只能被调用一次</li><li><code>run()</code>: 封装了要被线程执行的代码,可以被调用多次</li></ul><h4 id="如何停止一个正在运行的线程"><a href="#如何停止一个正在运行的线程" class="headerlink" title="如何停止一个正在运行的线程"></a>如何停止一个正在运行的线程</h4><ul><li><p>使用退出标志,使线程正常退出,也就是当<code>run</code>方法完成后线程终止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqldemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程的退出标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程执行的业务..........&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        myThread.flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>stop</code>方法强行终止(<code>不推荐,方法已经作废</code>)</p></li><li><p>使用<code>interrupt</code>方法中断线程</p><ul><li><p>打断阻塞的线程(<code>sleep,wait,join</code>)的线程,线程会抛出<code>InterrupException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1 is Running..............&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">        System.out.println(t1.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/692735732f3245ef9ec19f6b7ca81231.png" alt=""></p></li><li><p>打断正常的线程,可以根据打断状态来标记是否退出线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line">                <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前线程被中断了&quot;</span> + interrupted);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 值会发生改变</span></span><br><span class="line">        t2.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="synchronzied关键字的底层原理"><a href="#synchronzied关键字的底层原理" class="headerlink" title="synchronzied关键字的底层原理"></a>synchronzied关键字的底层原理</h4><ul><li><p><code>synchronzied</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>synchronzied(对象锁)</code>采用互斥的方式让同一时刻至多只有一个线程能持有<code>对象锁</code>,其他线程再想获取这个<code>对象锁</code>时就会阻塞</p><p>它的底层由<code>monitor</code>是<code>jvm</code>级别的对象(<code>C++</code>)实现,线程获得锁需要使用对象锁关联<code>monitor</code></p></div><p><img src="https://img-blog.csdnimg.cn/direct/b59cf356375b494582b7569d4617b5ca.png" alt=""></p><ul><li><code>Owner</code>: 存储当前获取锁的线程的,只能有一个线程可以获取</li><li><code>EntryList</code>: 关联没有抢到锁的线程,处于<code>Blocked</code>状态的线程</li><li><code>WaitSet</code>: 关联调用了<code>wait</code>方法的线程,处于<code>Waiting</code>状态的线程</li></ul></li><li><p><code>Monitor</code>实现的锁属于重量级锁,你了解过升级吗</p></li></ul><h4 id="ReentrantLock和synchronzied的区别"><a href="#ReentrantLock和synchronzied的区别" class="headerlink" title="ReentrantLock和synchronzied的区别"></a>ReentrantLock和synchronzied的区别</h4><ul><li><code>ReentrantLock</code>的阻塞是可以中断的,<code>synchronzied</code>的阻塞是不可中断的</li><li>公平锁,多个线程等待同一个锁时,必须要按照申请锁的时间顺序获得锁<ul><li><code>ReentrantLock</code>默认的够早起创建的是非公平锁,可以通过向构造器传入参数<code>true</code>来创建公平锁,非公平锁性能较高,公平锁性能不是很好</li><li>非公平锁的缺点是: 造成线程饥饿</li><li><code>synchronzied</code>是非公平锁</li></ul></li><li>一个<code>ReentrantLock</code>对象可以同时绑定多个条件对象,这样可以有针对性的唤醒线程</li><li><code>synchronzied</code>是<code>jvm</code>级别的锁,由<code>jvm</code>来完成锁的获取和释放,<code>Lock</code>是程序级别的锁,需要开发人员自己保证锁的获取和释放</li><li><code>ReentrantLock</code>支持<code>tryLock</code>，<code>synchronzied</code>则不支持</li></ul><h4 id="ThreadLocal原理"><a href="#ThreadLocal原理" class="headerlink" title="ThreadLocal原理"></a>ThreadLocal原理</h4><ul><li><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.management;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;VerCode&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 产生</span></span><br><span class="line">        <span class="type">VerCode</span> <span class="variable">verCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VerCode</span>(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        threadLocal.set(verCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取</span></span><br><span class="line">        <span class="type">VerCode</span> <span class="variable">verCode</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        System.out.println(verCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        f1();</span><br><span class="line">        f2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">ThreadLocalDemo</span> <span class="variable">threadLocalDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocalDemo</span>();</span><br><span class="line">            threadLocalDemo.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 的源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">// 每一个线程都有一个 ThreadLocalMap,实现了线程隔离(核心)</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">// 第一次 map 是空的</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// this.createMap(t, value) =&gt; threadLocal.createMap(t, value); threadLocal调用处对象</span></span><br><span class="line">        <span class="comment">// 第一次走这里</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前线程作为key,值就是set设置的值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">    <span class="comment">// 存储到了  treadLocalMap 中</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内存泄露问题</p><blockquote><p><code>ThreadLocalMap</code>中的<code>Key</code>是弱引用,值为强引用,<code>key</code>会被<code>GC</code>释放内存,关联<code>value</code>的内存并不会释放,建议主动<code>remove</code>释放<code>key,value</code></p></blockquote></li></ul><h4 id="什么是缓存行优化"><a href="#什么是缓存行优化" class="headerlink" title="什么是缓存行优化"></a>什么是缓存行优化</h4><ul><li><p>缓存行</p><blockquote><p>目前主流的<code>CPU Cache</code>的<code>Cache Line</code>大小都是<code>64Bytes</code>，注意是<code>字节</code>,而不是<code>位</code></p></blockquote></li><li><p>详细解释</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在计算机体系结构中，缓存行（cacheline）是指缓存中的最小存储单元。它的大小通常为64字节或128字节，因为这样的大小通常可以最大化存储器访问的效率。对于许多应用程序来说，缓存是系统中最重要的性能瓶颈之一，因此使用缓存优化技术是提高系统性能的关键。</p><p>缓存优化的一般目标是最大化缓存的命中率（cache hit rate）。为了实现这个目标，开发人员通常会采用以下策略：</p></div></li></ul><ol><li>空间局部性：利用缓存行的大小和缓存的工作原理，使得相邻的数据会被存储在相邻的缓存行中。这样可以减少缓存行的浪费，提高缓存的使用效率。</li><li>时间局部性：利用缓存中数据的使用频率，将常用的数据存储在缓存中，以提高缓存的命中率。这可以通过算法优化、数据结构设计和代码重构等方式来实现。</li><li>缓存预取：利用缓存预取技术，在数据被访问之前就将它们预先加载到缓存中，以提高缓存的使用效率。</li><li>数据对齐：将数据对齐到缓存行的边界上，可以减少缓存行的浪费，提高缓存的使用效率。</li><li>缓存层次结构：利用多级缓存来减少缓存的命中率，提高缓存的使用效率。</li></ol><h4 id="谈谈你对CAS的理解"><a href="#谈谈你对CAS的理解" class="headerlink" title="谈谈你对CAS的理解"></a>谈谈你对CAS的理解</h4><ul><li><p><code>CAS</code>的全称是<code>Compare And Swap(比较再交换)</code>,他提现的一种乐观锁的思想,在无锁情况下保证线程操作共享数据的原子性</p></li><li><p><code>CAS</code>使用到的地方很多：<code>AQS</code>框架,<code>AtomicXXX类</code></p></li><li>在操作共享变量的时候使用自旋锁,效率上更高一些</li><li><code>CAS</code>的底层是调用的<code>Unsafe</code>类中的方法,都是操作系统提供的,其他语言实现</li><li><p>乐观锁和悲观锁的区别</p><ul><li><code>CAS</code>是基于乐观锁的思想：最乐观的估计,不怕别的线程来修改共享变量，就算改了也没关系,我吃亏点再重试</li><li><code>synchronzied</code>是基于悲观锁的思想:最悲观的估计,得防着其他线程来修改共享变量,我上了锁你们都别想改,我改完了解开锁,你们才有机会</li></ul></li><li><p>什么是<code>ABA</code></p><blockquote><p>所谓的 ABA 问题是指在并发编程中，如果一个变量初次读取的时候是 A 值，它的值被改成了 B，然后又其他线程把 B 值改成了 A，而另一个早期线程在对比值时会误以为此值没有发生改变，但其实已经发生变化了，这就是 ABA 问题。</p></blockquote><ul><li><p>解决方案</p><blockquote><p>解决 ABA 问题的一种方法是使用带版本号的 CAS，也称为双重 CAS（Double CAS）或者版本号 CAS。具体来说，每次进行 CAS 操作时，不仅需要比较要修改的内存地址的值与期望的值是否相等，还需要比较这个内存地址的版本号是否与期望的版本号相等。如果相等，才进行修改操作。这样，在修改后的值后面追加上一个版本号，即使变量的值从 A 变成了 B 再变成了 A，版本号也会发生变化，从而避免了误判。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABADemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedRef = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始值：&quot;</span> + atomicStampedRef.getReference() + <span class="string">&quot;，版本号：&quot;</span> + atomicStampedRef.getStamp());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程 1 先执行一次 CAS 操作，期望值为 1，新值为 2，版本号为 0</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedRef.getStamp();</span><br><span class="line">            atomicStampedRef.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程 2 先 sleep 1 秒，让线程 1 先执行一次 CAS 操作，然后再执行一次 CAS 操作，期望值为 2，新值为 1，版本号为 1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedRef.getStamp();</span><br><span class="line">            atomicStampedRef.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;最终值：&quot;</span> + atomicStampedRef.getReference() + <span class="string">&quot;，版本号：&quot;</span> + atomicStampedRef.getStamp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="请谈谈你对Volatile的理解"><a href="#请谈谈你对Volatile的理解" class="headerlink" title="请谈谈你对Volatile的理解"></a>请谈谈你对Volatile的理解</h4><ul><li><p>保证线程间的可见性</p><blockquote><p>用<code>volatile</code>修饰共享变量(类的成员变量,类的静态成员变量),能够防止编译器等优化发生,让一个线程对共享变量的修改对另一个线程可见</p></blockquote></li><li><p>禁止进行指令重拍</p><blockquote><p>重排指令:<code>用 volatile</code>修饰共享变量会在读、写共享变量时加入不同的屏障,阻止其他读写操作越过屏障,从而达到阻止重排序的效果</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库中的锁</title>
      <link href="/2024/03/04/ff3f3b78/"/>
      <url>/2024/03/04/ff3f3b78/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库中的锁"><a href="#数据库中的锁" class="headerlink" title="数据库中的锁"></a>数据库中的锁</h3><ol><li><code>DDL</code>会自动提交事务</li><li>共享锁与共享锁是兼容的，排他锁与任何锁都不兼容</li><li>在非<code>Serializable</code>级别之下，<code>select</code>语句默认不加任何锁</li><li><code>update、delete、insert</code>语句默认加排他锁</li><li>默认情况下，mysql在执行一条独立的sql语句时，会自动地开启事务，以及提交事务</li><li>锁会在事务结束时，释放掉</li><li>可以给select语句强行加共享锁，只要在select语句之后添加上lock in share mode即可</li><li>可以给select语句强行加排他锁，只要在select语句之后添加上for update即可</li><li>在事务隔离级别为serializable的前提下，select语句默认就会添加共享锁</li><li>表锁：<code>lock table in share mode、lock table in exclusive mode</code> |<code>lock tables 表名 read/write unlock tables</code></li><li>行锁</li><li>表锁，能够把不加锁的<code>select</code>语句阻塞</li><li>间隙锁，锁定一个范围。间隙锁的目的是为了防止幻读的出现， 间隙锁出现在RR(可重复读)级别。</li><li>在事务隔离级别为<code>read committed</code>的前提下，是没有间隙锁的</li><li>在事务隔离级别为<code>repeatable read</code>的前提下 查询语句如果命中索引，则会锁住查询到的记录，同时会使用到间隙锁！ 查询语句如果没有命中，则会锁住整个表！</li><li>意向锁</li><li>悲观锁 乐观锁</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2024/03/04/93ac284c/"/>
      <url>/2024/03/04/93ac284c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus</title>
      <link href="/2024/03/01/5d2bcff8/"/>
      <url>/2024/03/01/5d2bcff8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h3><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><ul><li><p>依赖选择</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h6><ul><li><p>分页拦截器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<span class="comment">//如果配置多个插件,切记分页最后添加</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h6><ul><li><p>连接配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/redis_api?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus 配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-underline:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.redisapi.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/example/redisapi/mapper/*Mapper.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h5><ul><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)   </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体类字段配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value=&quot;id&quot;,type=IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(.. fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="meta">@TableField(.. fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>框架自带,用于说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FieldFill</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><ul><li><p>实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><ul><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    ResultVO&lt;String&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> JsonProcessingException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现类方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;LoginMapper, Login&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="主键自增配置"><a href="#主键自增配置" class="headerlink" title="主键自增配置"></a>主键自增配置</h5><ul><li><p>在实体类的<code>id</code>列标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value=&quot;id&quot;,type=IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>注意: 如果出现配置了数据库的自动增长,出现一段很长的数据时,需要通过<code>show create table xxx</code>,先备份原有的数据,这时,在表结构上可能会出现<code>自增的起始id值</code>,只要将这个值删除即可,就会按照数据库表中的最后一个值进行数据自增。</p></div></li></ul><h5 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h5><ul><li><p>数据库字段<code>id_deleted</code></p></li><li><p>实体类字段通过注解映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value=&quot;id&quot;,type=IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h5><ul><li><p>自定义<code>mapper</code>方法实现分页</p><ul><li><p><code>mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;UserVo&gt; <span class="title function_">selectPageVo</span><span class="params">(IPage&lt;?&gt; page, Integer state)</span>;</span><br><span class="line"><span class="comment">// or (class MyPage extends Ipage&lt;UserVo&gt;&#123; private Integer state; &#125;)</span></span><br><span class="line">MyPage <span class="title function_">selectPageVo</span><span class="params">(MyPage page)</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">List&lt;UserVo&gt; <span class="title function_">selectPageVo</span><span class="params">(IPage&lt;UserVo&gt; page, Integer state)</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据mapper 的返回,会自动拼接 limit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;xxx.xxx.xxx.UserVo&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResultVO <span class="title function_">listProducts</span><span class="params">(ProductVO productVO)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Products&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 1: 名称</span></span><br><span class="line">    queryWrapper.like(productVO.getName() != <span class="literal">null</span>, Products::getName, productVO.getName());</span><br><span class="line">    queryWrapper.orderByAsc(Products::getPrice);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这两部是实现分页的核心</span></span><br><span class="line">    Page&lt;Products&gt; productsPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(productVO.getPageNum(), productVO.getPageSize());</span><br><span class="line">    <span class="comment">// pageInfo 是分页后的结果,用于直接返回到前端</span></span><br><span class="line">    IPage&lt;Products&gt; pageInfo = productsMapper.selectPage(productsPage, queryWrapper);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pageInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultVO.success(<span class="string">&quot;商品列表获取成功&quot;</span>, pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultVO.fail(<span class="string">&quot;获取商品列表失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis 滑动窗口实现禁用登录</title>
      <link href="/2024/02/28/9d8ccc0e/"/>
      <url>/2024/02/28/9d8ccc0e/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis-滑动窗口实现禁用登录"><a href="#Redis-滑动窗口实现禁用登录" class="headerlink" title="Redis 滑动窗口实现禁用登录"></a>Redis 滑动窗口实现禁用登录</h3><ul><li><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redisapi.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.redisapi.domain.LoginAttempt;</span><br><span class="line"><span class="keyword">import</span> com.example.redisapi.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录服务实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录尝试键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_ATTEMPTS_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:attempts:&quot;</span>; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 窗口大小，单位毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">WINDOW_SIZE</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大登录失败次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ATTEMPTS</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冻结账户的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FREEZE_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;freeze:&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  冻结时间，单位毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">FREEZE_TIME</span> <span class="operator">=</span> <span class="number">30</span> * <span class="number">1000</span>; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">freezeKey</span> <span class="operator">=</span> FREEZE_PREFIX + username;</span><br><span class="line">        <span class="comment">// 获取账户冻结状态</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isFrozen</span> <span class="operator">=</span> redisTemplate.hasKey(freezeKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 账户未冻结</span></span><br><span class="line">        <span class="keyword">if</span> (!Boolean.TRUE.equals(isFrozen)) &#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            <span class="keyword">if</span> (!authenticate(username, password)) &#123;</span><br><span class="line">                <span class="comment">// 记录登录尝试</span></span><br><span class="line">                recordLoginAttempt(username);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查并冻结账户</span></span><br><span class="line">                <span class="keyword">return</span> checkAndFreezeAccount(username);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除之前已经失败的次数</span></span><br><span class="line">            redisTemplate.delete(LOGIN_ATTEMPTS_KEY + username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;登录成功!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;账户处于冻结中!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冻结账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">freezeAccount</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">freezeKey</span> <span class="operator">=</span> FREEZE_PREFIX + username;</span><br><span class="line">        redisTemplate.opsForValue().set(freezeKey, <span class="string">&quot;&quot;</span>, FREEZE_TIME, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录登录尝试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recordLoginAttempt</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        redisTemplate.opsForZSet().add(LOGIN_ATTEMPTS_KEY + username,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoginAttempt</span>(username, System.currentTimeMillis()), System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 认证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查并冻结账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 检查结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">checkAndFreezeAccount</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginAttemptsKey</span> <span class="operator">=</span> LOGIN_ATTEMPTS_KEY + username;</span><br><span class="line">        <span class="comment">// 统计当前窗口内的登录尝试次数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().zCard(loginAttemptsKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超过最大登录失败次数，冻结账户</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= MAX_ATTEMPTS) &#123;</span><br><span class="line">            freezeAccount(username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;账户已冻结!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除窗口外的登录尝试记录</span></span><br><span class="line">        redisTemplate.opsForZSet().removeRangeByScore(loginAttemptsKey, <span class="number">0</span>, System.currentTimeMillis() - WINDOW_SIZE);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;失败次数: &quot;</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud2.0</title>
      <link href="/2024/02/28/b900ddf8/"/>
      <url>/2024/02/28/b900ddf8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><h4 id="版本匹配"><a href="#版本匹配" class="headerlink" title="版本匹配"></a>版本匹配</h4><ul><li><p><code>SpringBoot</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>SpringCloud</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/fad9c12053314af9acc214e273cf067f.png" alt=""></p></li><li><p><code>SpringCloud alibaba</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- github: https://github.com/alibaba/spring-cloud-alibaba --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父工程依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.22<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis.springboot.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">mybatis.springboot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swagger3.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">swagger3.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fastjson2.version</span>&gt;</span>2.0.40<span class="tag">&lt;/<span class="name">fastjson2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence-api.version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">persistence-api.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.boot.test.version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">spring.boot.test.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>2022.0.4<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">micrometer-tracing.version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">micrometer-tracing.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">micrometer-observation.version</span>&gt;</span>1.12.0<span class="tag">&lt;/<span class="name">micrometer-observation.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">feign-micrometer.version</span>&gt;</span>12.5<span class="tag">&lt;/<span class="name">feign-micrometer.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zipkin-reporter-brave.version</span>&gt;</span>2.17.0<span class="tag">&lt;/<span class="name">zipkin-reporter-brave.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud 2023.0.0--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud alibaba 2022.0.0.0-RC2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringBoot集成mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mysql数据库驱动8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringBoot集成druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通用Mapper4之tk.mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--persistence--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;persistence-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fastjson2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swagger3 调用方式 http://你的主机IP地址:5555/swagger-ui/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-boot-starter-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.test.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--micrometer-tracing-bom导入链路追踪版本中心  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;micrometer-tracing.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--micrometer-tracing指标追踪  2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;micrometer-tracing.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bridge-brave<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;micrometer-tracing.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--micrometer-observation 4--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-observation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;micrometer-observation.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--feign-micrometer 5--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-micrometer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-micrometer.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zipkin-reporter-brave 6--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.reporter2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-reporter-brave<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zipkin-reporter-brave.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>gitignore</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled class file</span></span><br><span class="line"><span class="attr">*.class</span></span><br><span class="line"><span class="attr">*.classpath</span></span><br><span class="line"><span class="attr">*.factorypath</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line"><span class="attr">*.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line"><span class="attr">*.ctxt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line"><span class="attr">.mtj.tmp/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line"><span class="attr">*.jar</span></span><br><span class="line"><span class="attr">*.war</span></span><br><span class="line"><span class="attr">*.ear</span></span><br><span class="line"><span class="attr">*.zip</span></span><br><span class="line"><span class="attr">*.tar.gz</span></span><br><span class="line"><span class="attr">*.rar</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line"><span class="attr">hs_err_pid*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># IDE Files #</span></span><br><span class="line"><span class="attr">*.iml</span></span><br><span class="line"><span class="attr">.idea</span></span><br><span class="line"><span class="attr">.idea/</span></span><br><span class="line"><span class="attr">.project</span></span><br><span class="line"><span class="attr">.settings</span></span><br><span class="line"><span class="attr">target</span></span><br><span class="line"><span class="attr">.DS_Store</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># temp ignore</span></span><br><span class="line"><span class="attr">*.cache</span></span><br><span class="line"><span class="attr">*.diff</span></span><br><span class="line"><span class="attr">*.patch</span></span><br><span class="line"><span class="attr">*.tmp</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Maven ignore</span></span><br><span class="line"><span class="attr">.flattened-pom.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># AsciiDoc</span></span><br><span class="line"><span class="attr">spring-cloud-alibaba-docs/**/*.html</span></span><br></pre></td></tr></table></figure></li><li><p>注解生效激活</p><p><img src="https://img-blog.csdnimg.cn/direct/647dafa0bb924a95a714456f2e4e140c.png" alt=""></p></li><li><p><code>dependencyManagement</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Maven</code>通常使用<code>dependencyManagement</code>元素来提供了一种管理版本依赖版本号的方式</p><p>使用<code>pom.xml</code>中的<code>dependencyManagement</code>元素能让所有在子项目中引用一个依赖而不用显示的列出版本号,<code>Maven</code>会沿着父子层次向上走,直到找到一个拥有<code>dependencyManagement</code>元素的项目,然后它就会使用这个<code>dependencyManagement</code>元素中指定的版本号。</p></div><ul><li><p>优点</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>这样当想省级或切换到另一个版本时,只需要在顶层父容器里更新,而不需要一个一个子项目的修改,另外如果某个子项目需要另外的一个版本,只需要声明<code>version</code>即可</p></div><blockquote><p><code>dependencyManagement</code>里只是声明依赖,<code>并不实现引入</code>，因此子项目需要显示的声明需要用的依赖</p></blockquote></li></ul></li><li><p><code>mysql8</code>驱动连接配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClass:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2024?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="统一返回处理"><a href="#统一返回处理" class="headerlink" title="统一返回处理"></a>统一返回处理</h4><ul><li><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ReturnCodeEnum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**操作失败**/</span></span><br><span class="line">    RC999(<span class="string">&quot;999&quot;</span>,<span class="string">&quot;操作XXX失败&quot;</span>),</span><br><span class="line">    <span class="comment">/**操作成功**/</span></span><br><span class="line">    RC200(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    <span class="comment">/**服务降级**/</span></span><br><span class="line">    RC201(<span class="string">&quot;201&quot;</span>,<span class="string">&quot;服务开启降级保护,请稍后再试!&quot;</span>),</span><br><span class="line">    <span class="comment">/**热点参数限流**/</span></span><br><span class="line">    RC202(<span class="string">&quot;202&quot;</span>,<span class="string">&quot;热点参数限流,请稍后再试!&quot;</span>),</span><br><span class="line">    <span class="comment">/**系统规则不满足**/</span></span><br><span class="line">    RC203(<span class="string">&quot;203&quot;</span>,<span class="string">&quot;系统规则不满足要求,请稍后再试!&quot;</span>),</span><br><span class="line">    <span class="comment">/**授权规则不通过**/</span></span><br><span class="line">    RC204(<span class="string">&quot;204&quot;</span>,<span class="string">&quot;授权规则不通过,请稍后再试!&quot;</span>),</span><br><span class="line">    <span class="comment">/**access_denied**/</span></span><br><span class="line">    RC403(<span class="string">&quot;403&quot;</span>,<span class="string">&quot;无访问权限,请联系管理员授予权限&quot;</span>),</span><br><span class="line">    <span class="comment">/**access_denied**/</span></span><br><span class="line">    RC401(<span class="string">&quot;401&quot;</span>,<span class="string">&quot;匿名用户访问无权限资源时的异常&quot;</span>),</span><br><span class="line">    RC404(<span class="string">&quot;404&quot;</span>,<span class="string">&quot;404页面找不到的异常&quot;</span>),</span><br><span class="line">    <span class="comment">/**服务异常**/</span></span><br><span class="line">    RC500(<span class="string">&quot;500&quot;</span>,<span class="string">&quot;系统异常，请稍后重试&quot;</span>),</span><br><span class="line">    RC375(<span class="string">&quot;375&quot;</span>,<span class="string">&quot;数学运算异常，请稍后重试&quot;</span>),</span><br><span class="line"></span><br><span class="line">    INVALID_TOKEN(<span class="string">&quot;2001&quot;</span>,<span class="string">&quot;访问令牌不合法&quot;</span>),</span><br><span class="line">    ACCESS_DENIED(<span class="string">&quot;2003&quot;</span>,<span class="string">&quot;没有权限访问该资源&quot;</span>),</span><br><span class="line">    CLIENT_AUTHENTICATION_FAILED(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;客户端认证失败&quot;</span>),</span><br><span class="line">    USERNAME_OR_PASSWORD_ERROR(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>),</span><br><span class="line">    BUSINESS_ERROR(<span class="string">&quot;1004&quot;</span>,<span class="string">&quot;业务逻辑异常&quot;</span>),</span><br><span class="line">    UNSUPPORTED_GRANT_TYPE(<span class="string">&quot;1003&quot;</span>, <span class="string">&quot;不支持的认证模式&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**自定义状态码**/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="comment">/**自定义描述**/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ReturnCodeEnum(String code, String message)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历枚举V1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReturnCodeEnum <span class="title function_">getReturnCodeEnum</span><span class="params">(String code)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (ReturnCodeEnum element : ReturnCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(element.getCode().equalsIgnoreCase(code))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> element;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历枚举V2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReturnCodeEnum <span class="title function_">getReturnCodeEnumV2</span><span class="params">(String code)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(ReturnCodeEnum.values()).filter(x -&gt; x.getCode().equalsIgnoreCase(code)).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>统一返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">// 方法的执行时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timestamp ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultData</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setCode(ReturnCodeEnum.RC200.getCode());</span><br><span class="line">        resultData.setMessage(ReturnCodeEnum.RC200.getMessage());</span><br><span class="line">        resultData.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">fail</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setCode(code);</span><br><span class="line">        resultData.setMessage(message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><ul><li><p>全局异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认全局异常处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">exception</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----come in GlobalExceptionHandler&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;全局异常信息exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(ReturnCodeEnum.RC500.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Consul-注册中心"><a href="#Consul-注册中心" class="headerlink" title="Consul-注册中心"></a>Consul-注册中心</h4><ul><li><p>下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//developer.hashicorp.com/consul/install?product_intent=consul</span></span><br></pre></td></tr></table></figure></li><li><p>以开发模式启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">consul</span> <span class="string">agent -dev</span></span><br><span class="line"><span class="comment"># 启动后访问: http://localhost:8500 (默认情况下，代理客户端预计位于localhost:8500)</span></span><br></pre></td></tr></table></figure></li><li><p>添加服务发现依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网 https://docs.spring.io/spring-cloud-consul/reference/quickstart.html</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加<code>@EnableDiscoveryClient</code></p></li><li><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首次启动时出现的错误不是真正的错误,是 Consul 在服务发现其他服务中,过一会就好了</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/ab4d098c37f84e0c849e574417d8863f.png" alt="等待服务发现中,过一段时间就好了"></p></li></ul><h4 id="注册中心的对比"><a href="#注册中心的对比" class="headerlink" title="注册中心的对比"></a>注册中心的对比</h4><ul><li><p><code>CAP</code></p><ul><li><code>C(Consistency)</code>:强一致性 </li><li><code>A(Avaliablity)</code>: 可用性</li><li><code>P(Partition tolerance)</code>: 分区容错性</li></ul></li><li><p>最多只能同时较好的满足两个</p></li><li><p><code>CAP</code>理论的核心是: 一个分布式系统不可能同时很好的满足一致性,可用性和分区容错性这三个需求,因此,根据<code>CAP</code>原理将<code>NoSQL</code>数据库分成了满足<code>CA</code>原则,满足<code>CP</code>原则和满足<code>AP</code>原则三大类</p><ul><li><code>CA</code>: 单点集群,满足一致性,可用性的系统,通常在可扩展性上不太强大</li><li><code>CP</code>：满足一致性,分区容忍性的系统,通常性能不是特别高</li><li><code>AP</code>: 满足可用性,分区容错性的系统,通常可能对一致性要求低一些</li></ul></li><li><p>各种注册中心的对比</p><p><img src="https://img-blog.csdnimg.cn/direct/9b5cc9d9d099434eb7c6e1def9545613.png" alt=""></p></li></ul><h3 id="微服务环境搭建"><a href="#微服务环境搭建" class="headerlink" title="微服务环境搭建"></a>微服务环境搭建</h3><ul><li><p>中文参考文档</p><blockquote><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</a></p></blockquote></li><li><p>订单服务</p></li><li><p>用户服务</p><ul><li>添加依赖</li></ul></li><li><p>端点的访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>健康检查端点：<code>http://localhost:port/actuator/health</code></li><li>信息端点：<code>http://localhost:port/actuator/info</code></li><li>配置属性端点：<code>http://localhost:port/actuator/configprops</code></li><li>日志配置端点：<code>http://localhost:port/actuator/loggers</code></li></ul></li></ul><h3 id="SpringCloudAlibaba"><a href="#SpringCloudAlibaba" class="headerlink" title="SpringCloudAlibaba"></a>SpringCloudAlibaba</h3><ul><li><p>微服务全景图</p><blockquote><p><a href="https://sca.aliyun.com/zh-cn/">https://sca.aliyun.com/zh-cn/</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/972a30adb5ed43b4beb27e5c7e0c8678.png" alt=""></p></li><li><p>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h4><ul><li><p><code>Nacos</code>是一个更易于构建云原生应用的动态服务发现,配置管理和服务管理平台</p></li><li><p>对比</p><p><img src="https://img-blog.csdnimg.cn/direct/9c9f5ee228d04ba88fbbc35a1bfbe8d8.png" alt=""></p></li><li><p>下载</p><blockquote><p><a href="https://github.com/alibaba/nacos/releases/tag/2.2.3">https://github.com/alibaba/nacos/releases/tag/2.2.3</a></p></blockquote></li><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 (D:\SoftInstall\nacos-server-2.2.3\nacos\bin) bin 目录</span></span><br><span class="line"><span class="attr">startup.cmd</span> <span class="string">-m standalone</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/87f710e024004a5984d0224d729f9cf4.png" alt="http://localhost:8848/nacos"></p></li><li><p><code>Nacos Discover服务注册中心</code></p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 负载均衡需要添加 loadbanlance 依赖(消费者处添加) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code>关于<code>nacos</code>的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:  <span class="string"># 服务器配置</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8081  # 端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management</span>:  <span class="string"># 管理端点配置</span></span><br><span class="line">  <span class="attr">endpoints</span>:  <span class="string"># 端点配置</span></span><br><span class="line">    <span class="attr">web</span>:  <span class="string"># Web 端点</span></span><br><span class="line">      <span class="attr">exposure</span>:  <span class="string"># 开放配置</span></span><br><span class="line">        <span class="attr">include</span>: <span class="string">&#x27;*&#x27;  # 包含所有端点</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:  <span class="string"># Spring 配置</span></span><br><span class="line">  <span class="attr">application</span>:  <span class="string"># 应用配置</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">user-service  # 应用名称</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource</span>:  <span class="string"># 数据源配置</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://rm-cn-nwy3k7qod0004xno.rwlb.rds.aliyuncs.com:3306/cloud_user?useSSL=false  # 数据库连接地址</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root  # 数据库用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456wW  # 数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver  # 数据库驱动类名</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud</span>:  <span class="string"># 云配置</span></span><br><span class="line">    <span class="attr">nacos</span>:  <span class="string"># Nacos 配置</span></span><br><span class="line">      <span class="attr">discovery</span>:  <span class="string"># 服务发现配置</span></span><br><span class="line">        <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848  # Nacos 服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis</span>:  <span class="string"># MyBatis 配置</span></span><br><span class="line">  <span class="attr">type-aliases-package</span>: <span class="string">com.example.cloud.domain  # 实体别名包名</span></span><br><span class="line">  <span class="attr">configuration</span>:  <span class="string"># MyBatis 配置</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case</span>: <span class="string">true  # 将数据库下划线命名转换为驼峰命名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging</span>:  <span class="string"># 日志配置</span></span><br><span class="line">  <span class="attr">level</span>:  <span class="string"># 日志级别配置</span></span><br><span class="line">    <span class="attr">com.example</span>: <span class="string">debug  # com.example 包的日志级别为 debug</span></span><br><span class="line">  <span class="attr">pattern</span>:  <span class="string"># 日志格式配置</span></span><br><span class="line">    <span class="attr">dateformat</span>: <span class="string">MM-dd HH:mm:ss:SSS  # 日期格式化，以 MM-dd HH:mm:ss:SSS 格式记录日志</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/f7946c6748ae45489d529d2157c109aa.png" alt="服务注册进入注册中心查看"></p></li><li><p>主启动类添加注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.example.cloud.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>消费者服务(<code>order-service</code>)同样添加进<code>注册中心</code></p><ul><li><p>添加<code>RestTemplate</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>RestTemplate</code>访问服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2. TODO 查询订单的同时查询用户信息(user-service: 微服务的名称)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/05cd758e66cc483fbc63427d28015840.png" alt=""></p></li></ul></li><li><p>负载均衡的使用测试(<code>直接拷贝虚拟端口映射</code>)</p><p><img src="https://img-blog.csdnimg.cn/direct/859360ad1f07440aa27457e1752657ec.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/direct/f84058510f37495595e0c5f4d9f4f4cc.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add VM options 选择后进行添加</span></span><br><span class="line"><span class="attr">-Dserver.port</span>=<span class="string">8082</span></span><br></pre></td></tr></table></figure><ul><li><p>启动<code>8082</code>这个服务</p></li><li><p>检查注册中心</p><p><img src="https://img-blog.csdnimg.cn/direct/f715e87dc24440af92d06185d0d82e5b.png" alt=""></p></li><li><p>负载均衡测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载均衡测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/lb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lb</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问的端口是: &quot;</span> + port);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;访问的端口是: &quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://user-service/user/lb&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试负载均衡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/port&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lb</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> orderService.getPort();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b4304213f2a64313af3d15cde3f3ad0b.gif" alt="访问测试"></p></li></ul></li></ul><h4 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>order-service</code>的<code>yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://rm-cn-nwy3k7qod0004xno.rwlb.rds.aliyuncs.com:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">123456wW</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.cloud.domain</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br></pre></td></tr></table></figure></li><li><p>新建<code>bootstarp.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># 服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># 服务配置中心地址</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>localhost:8848/nacos</code>页面中创建配置</p><p><img src="https://img-blog.csdnimg.cn/direct/d167b7d5bb0c47f4a2eda4250adec406.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制器类添加 @RefreshScope 注解使当前类下面的配置支持 Nacos 的动态刷新功能</span></span><br><span class="line"><span class="meta">@RefreshScope</span> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;partten.dataInfo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pattern&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPattern</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;远程的配置内容读取: &quot;</span> + pattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/785d282f671d4df09df8e46af367130b.png" alt="热更新检测">实现</p></li></ul><h4 id="Sentinel实现熔断与限流"><a href="#Sentinel实现熔断与限流" class="headerlink" title="Sentinel实现熔断与限流"></a>Sentinel实现熔断与限流</h4><ul><li><p>官网对<code>Sentinel</code>的解释: 面向分布式,多语言异构化服务架构的<code>流量治理</code>组件</p></li><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>从流量路由,流量控制、流量整型,熔断降级,系统自适应过载保护,热点流量防护等多个维度来帮助开发者保障微服务的稳定性</p></div></li><li><p>下载</p><blockquote><p><a href="https://github.com/alibaba/Sentinel/releases/tag/1.8.7">https://github.com/alibaba/Sentinel/releases/tag/1.8.7</a></p></blockquote></li><li><p>启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器访问: http://localhost:8084/#/login (用户名和密码: sentinel)</span></span><br><span class="line">java -jar sentinel-dashboard-<span class="number">1.8</span><span class="number">.7</span>.jar --server.port=<span class="number">8084</span></span><br></pre></td></tr></table></figure></li><li><p>面试题</p><ul><li><p>服务雪崩</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>多个微服务之间调用的时候,假设微服务<code>A</code>调用微服务<code>B</code>和微服务<code>C</code>,微服务<code>B</code>和微服务<code>C</code>又调用其他的微服务,这就是所谓的<code>扇出</code>,如果扇出的链路上某个微服务的调用响应时间过长或者不可用,对微服务<code>A</code>的调用就会占用越来越多的系统资源,进而引起系统崩溃,所谓的<code>雪崩效应</code>,对于高流量的应用来说,单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和.比失败更糟糕的是,这些都是表示需要对故障和延迟进行隔离和管理,以便单个依赖关系的失败,不能取消整个应用程序或系统。所以,通常当你发现一个模块下的某个实例失败后,这时候这个模块依然还会接受流量,然后这个有问题的模块还调用了其他的模块,这样就会发生级联故障,或者叫雪崩,<code>复杂分布式体系结构中的应用程序有数十个依赖关系,每个依赖关系在某些时候将不可避免的失败</code></p></div></li><li><p>服务降级</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>服务降级,说白了就是一种<code>服务托底方案</code>,如果服务无法完成正常的调用流程,就使用默认的拖地方案来返回数据</p><p>例如: 在商品详情页一般都会展示商品的介绍信息,一旦商品详细页系统出现故障无法调用时,会直接获取缓存中的商品信息</p></div></li><li><p>服务熔断</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在分布式与微服务系统中,如果下游服务因为访问压力过大导致相应很慢或者一直调用失败时,上游服务为了保证系统的整体可用性,会暂时断开与下游服务的调用连接,这种方式就是<code>熔断</code></p></div><ul><li>服务熔断一般情况下会有三种状态: <code>闭合，开启和半熔断</code><ul><li>闭合状态: 服务一切正常,没有故障时,上有服务调用下游服务时,不会有任何限制</li><li>开启状态：上游服务不再调用下游服务的接口,会直接返回上游服务中预定的方法</li><li>半熔断状态: 处于开启状态时,上游服务会根据一定的规则,尝试恢复对下游服务的调用,此时,上游服务会以有限的流量来调用下游服务,同时,会监控调用的成功率,如果成功率达到预期,则进入关闭状态,如果未达到预取,会重新进入开启状态</li></ul></li></ul></li><li><p>服务限流</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>服务限流就是限制进入系统的流量,以防止进入系统的流量过大而压垮系统。其主要的作用就是保护服务节点或者集群后面的数据节点,防止瞬时流量过大使用服务和数据崩溃(如前端缓存大量实效),造成不可用,还可用于平滑请求,类似秒杀高并发等操作,严禁一窝蜂的过来拥挤,大家排队,一秒钟<code>N</code>个,有序进行。</p></div><ul><li>限流算法<ul><li>一种就是简单的请求总量计数</li><li>一种就是时间窗口限流(<code>一般为 1 s</code>)，如令牌桶算法和漏牌桶算法就是时间窗口的限流算法</li></ul></li></ul></li><li><p>服务隔离</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>优点类似于系统的垂直拆分,就按照一定的规则将系统划分成多个服务模块,并且每个服务模块之间是互相独立的,不会存在强依赖的关系。如果某个拆分后的服务发生故障后,能够将故障产生的影响限制在某个具体的服务内,不会向其他服务扩散,自然也就不会对整体服务产生致命的影响</p></div><ul><li>互联网行业常用的服务隔离的方式有<ul><li>线程池隔离</li><li>信号量隔离</li></ul></li></ul></li><li><p>服务超时</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>整个系统采用分布式和微服务架构后,系统被拆分成一个个小服务,就会存在服务与服务之间互相调用的现象,从而形成一个个调用链。形成调用链关系的两个服务中,主动调用其他服务接口的服务处于调用链的上游,提供接口其他服务调用的服务处于调用链的下游.服务超时就是在上游服务调用下游服务,设置一个最大响应时间,如果超过这个最大响应时间下游服务还未返回结果,则断开上游与下游服务之间的请求连接,释放资源。</p></div></li></ul></li></ul><ul><li><p>服务整合进<code>sentinel</code></p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务哨兵 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>application.yml(要加入sentinel的服务的,不是新建的文件)</code></p><p><img src="https://img-blog.csdnimg.cn/direct/2cc917451f874805b61e70956e333dc1.png" alt="在这里插入图片描述"></p></li><li><p>刷新<code>sentinel</code>服务页面</p><ul><li><p><code>Sentinel</code>采用懒加载的说明</p><ul><li><p>注意</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>想使用<code>Sentinel</code>对某个接口进行限流和降级等操作,一定要先访问下接口,使<code>Sentinel</code>检测出相应的接口</p></div></li><li><p>执行一次访问即可</p><p><img src="https://img-blog.csdnimg.cn/direct/4184a51af9de4e4899bdca11b7eef000.png" alt=""></p></li></ul></li></ul></li></ul></li><li><p>流控规则</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Sentinel</code>能够对流量进行控制,主要是<code>监控应用的 QPS</code>流量或者并发线程数等指标,如果达到指定的阈值时,就会被流量进行控制,以避免服务被瞬时的高并发流量击垮,保证服务的高可靠性。</p></div><ul><li><p>新增流控规则</p><ul><li>资源名: 资源的唯一名称,默认就是请求的接口路径,可以自行修改,但是要保证唯一</li><li>针对来源: 具体针对某个微服务进行限流,默认值为<code>default</code>，表示不区分来源,全部限流</li><li>阈值类型: <code>QPS</code>表示通过<code>QPS</code>进行限流,并发线程数表示通过并发线程数限流</li><li>单机阈值: 与阈值类型组合使用,如果阈值类型选择的是<code>QPS</code>,表示当调用接口的<code>QPS</code>达到阈值时,进行限流操作,如果阈值类型选择的是并发线程的数,则表示当调用接口的并发线程数达到阈值时,进行限流操作</li><li>是否集群: 选择则表示集群环境,不选中则表示非集群环境</li></ul></li><li><p>高级规则</p><ul><li><p>流控模式</p><ul><li><p>直接</p><ul><li><p>直接模式的说明: 默认的流控模式,当接口达到限流条件时,直接开启限流功能</p><p><img src="https://img-blog.csdnimg.cn/direct/0a916844b4954e9797e971cd6292e583.png" alt="快速刷新测试"></p></li><li><p>配置及说明</p><p><img src="https://img-blog.csdnimg.cn/direct/49853085c6e1456fb9776a6a31406852.png" alt=""></p></li></ul></li><li><p>关联</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当关联的资源达到阈值时,就限流自己(当与<code>A</code>关联的资源<code>B</code>达到阈值后,就限流<code>A</code>自己)</p><p><img src="https://img-blog.csdnimg.cn/direct/de8e6f578e334658b53c1b37325b253d.png" alt=""></p></div></li><li><p>链路</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>来自不同链路的请求对同一个目标访问时,实施针对性的不同限流措施(比如C请求来访问就限流,D请求来访问就是<code>OK</code>)</p></div></li></ul></li></ul></li></ul></li></ul><h4 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h4><ul><li><p>使用网关之前存在的问题</p><ul><li><p>用户请求不同的微服务时,必须记住每一个不同的微服务的<code>URL</code></p></li><li><p>认证复杂.每个微服务都需要独立的认证机制</p></li><li><p>存在跨域请求的问题,处理起来比较复杂</p></li></ul></li><li><p>能干什么</p><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li></ul></li><li><p>总结</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SpringCloudGateway</code>组件的核心是一系列的过滤器,通过这些过滤器可以将客户端发送的请求转发(<code>路由</code>)到对应的微服务</p><p><code>SpringCloudGateway</code>是加在整个服务前沿的防火墙和代理器,隐藏服务节点<code>IP</code>端口信息,从而加强安全保护,<code>SpringCloudGateway</code>本身也是一个微服务,需要注册进服务注册中心</p></div></li><li><p><code>SpringCloudGateway</code>核心内容</p><ul><li>(<code>Route</code>)路由: 路由是构建网关的基本模块,它由<code>ID</code>,目标<code>URI</code>一系列的断言和过滤器组成,如果断言为<code>true</code>,则匹配该路由</li><li>(<code>Predicate</code>)断言: 参考的是<code>Java8</code>的<code>java.util.function.Predicate</code>，开发人员可以匹配<code>HTTP</code>请求中的所有内容(例如请求头或请求参数).如果请求与断言相匹配则进行路由</li><li>(<code>Filter</code>)过滤器: 指的是<code>Spring</code>框架中<code>GatewayFilter</code>的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改</li></ul></li><li><p><code>Gateway</code>工作流程总结</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>客户端向<code>Spring Cloud Gateway</code>发出请求,然后在<code>Gateway Handler Mapping</code>中知道与请求中找到与请求相匹配的路由,将其发送到<code>Gateway Web Handler</code>.<code>Handler</code>在通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑,然后返回,过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前或折后执行业务逻辑</p><p>在<code>pre</code>类型的过滤器可以做参数校验,权限校验，流量控制,日志输出,协议转换等</p><p>在<code>post</code>类型的过滤器中可以做响应内容,响应头的修改,日志的输出,流量监控等有着非常重要的作用</p></div><ul><li>核心逻辑: <code>路由转发 + 断言判断 + 执行过滤器链</code></li></ul></li><li><p>入门配置</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- gateway 是一个独立的模块,与业务无关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指标监控 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">star-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># 服务注册中心地址</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StarGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><ul><li><p>先启动服务注册中心<code>Nacos</code></p></li><li><p>在启动网关</p><p><img src="https://img-blog.csdnimg.cn/direct/d9eb513437d14ef58783f9b5427651c2.png" alt=""></p></li></ul></li></ul></li><li><p>网关如何做路由映射</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">star-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#  nacos 地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-teacher</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-teacher</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/teacher/**</span> <span class="comment"># 这个是按照路径匹配 只要一 teacher 开头就符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-naire</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-naire</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/naire/**</span> <span class="comment"># 这个是按照路径匹配 只要一 user 开头就符合</span></span><br></pre></td></tr></table></figure><ul><li><p>如何对一个服务下的所有接口进行添加网关</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">star-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#  nacos 地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-teacher</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-teacher</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span> <span class="comment"># 这个是按照路径匹配 只要一 teacher 开头就符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-naire</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-naire</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span> <span class="comment"># 这个是按照路径匹配 只要一 user 开头就符合</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>网关的正确配置</p><ul><li>有远程调用时,远程调用使用网关的<code>服务名</code></li></ul></li><li><p>自定义全局过滤器</p><ul><li><p>案例实现(<code>接口耗时统计</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">START_TIME</span> <span class="operator">=</span> <span class="string">&quot;startTime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 先记录下访问接口的开始时间</span></span><br><span class="line">        exchange.getAttributes().put(START_TIME, System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 返回统计的各个结果给后台</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">beginTime</span> <span class="operator">=</span> exchange.getAttribute(START_TIME);</span><br><span class="line">            <span class="keyword">if</span> (beginTime != <span class="literal">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口主机: &quot;</span> + exchange.getRequest().getURI().getHost());</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口端口: &quot;</span> + exchange.getRequest().getURI().getPort());</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口的URL: &quot;</span> + exchange.getRequest().getURI().getPath());</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口的方法: &quot;</span> + exchange.getRequest().getMethod().name());</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口状态码: &quot;</span> + exchange.getResponse().getStatusCode());</span><br><span class="line">                log.info(<span class="string">&quot;访问的接口的参数: &quot;</span> + exchange.getRequest().getURI().getRawQuery());</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;访问的接口时长: &quot;</span> + (System.currentTimeMillis() - beginTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/96784341f3d4408491db0cef7abe5b0f.png" alt=""></p></li><li><p>自定义网关过滤器步骤</p><ul><li>新建类名xxx需要以<code>GatewayFilterFactory</code>结尾,并继承<code>AbstractGatewayFilterFactory</code>类</li><li>新建<code>xxxGatewayFilterFactory.Config</code>内部类</li><li>重写<code>apply</code>方法</li><li>重写<code>shortcutFieldOrder</code></li><li>空参构造方法,内部调用<code>super</code></li></ul></li><li><p>跨域配置</p><ul><li><p>全局配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;https://docs.spring.io&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br></pre></td></tr></table></figure></li><li><p>服务的局部配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cors_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/service/**</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="string">cors</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>最终使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网关最终的配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">star-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#  nacos 地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowed-origins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowed-methods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowed-headers:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">max-age:</span> <span class="number">3600</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-teacher</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-teacher</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span> <span class="comment"># 这个是按照路径匹配 只要一 teacher 开头就符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">star-naire</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://star-naire</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span> <span class="comment"># 这个是按照路径匹配 只要一 user 开头就符合</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><p>官网安装说明</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://www.rabbitmq.com/docs/download</span></span><br><span class="line"><span class="comment"># latest RabbitMQ 3.13</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="官网架构图"><a href="#官网架构图" class="headerlink" title="官网架构图"></a>官网架构图</h5><ul><li><code>Publisher</code>-生产者:发布消息到<code>RabbitMQ</code>中的<code>Exchange</code></li><li><code>Consumer</code>-消费者:监听<code>RabbitMQ</code>中的<code>Queue</code>中的消息</li><li><code>Exchange</code>-交换机: 和生产者建立连接并接受生产者的消息</li><li><code>Queue</code>-队列: <code>Exchange</code>会将消息分发到指定的<code>Queue</code>,<code>Queue</code>和消费者进行交互</li><li><code>Routes</code>-路由: 交换机以什么样的策略将消息发布到<code>Queue</code></li></ul><h5 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h5><ul><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>虚拟主机就是用来将一个<code>rabbitmq</code>内部划分成多个主机,给不同的用户来使用,而不会冲突</p><p><img src="https://img-blog.csdnimg.cn/direct/f3204ded65e040a487fd2b22849372e1.png" alt="虚拟主机"></p></div></li><li><p>创建新用户</p><p><img src="https://img-blog.csdnimg.cn/direct/7f320df801dd476790e0e85b38d06361.png" alt=""></p></li><li><p>创建虚拟主机</p><p><img src="https://img-blog.csdnimg.cn/direct/c596fe01c24149e99e30316022883618.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/02/26/bae4ff13/"/>
      <url>/2024/02/26/bae4ff13/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h4><ul><li><p><code>Redis</code>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>是一个高性能的<code>key-value</code>数据库提供了丰富的数据结构,例如<code>String、Hash、List、Set、SortedSet</code>等等.数据是存在内存中的,同时<code>Redis</code>支持事务、持久化、<code>LUA</code>脚本,发布/订阅,缓存淘汰,流技术等多种功能特性提供了主从模式,<code>Redis Sentinel</code>和<code>Redis Cluster</code>集群架构方案</p></div></li><li><p>特征</p><ul><li>键值(<code>key-value</code>)型,<code>value</code>支持多种不同数据结构,功能丰富</li><li>单线程,每个命令具备原子性</li><li>低延迟,速度快(<code>基于内存,IO多路复用,良好的编码</code>)</li><li>支持数据持久化</li><li>支持主从集群，分片集群</li><li>支持多语言客户端</li></ul></li><li><p>系统的读写速度测试</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis-benchmark</span> <span class="string">-t get</span></span><br><span class="line"><span class="attr">redis-benchmark</span> <span class="string">-t set</span></span><br></pre></td></tr></table></figure></li><li><p>指定配置文件启动覆盖原有的命令</p><p><img src="https://img-blog.csdnimg.cn/direct/49c6bc8553404e97a4a4c2a6abe14caa.png" alt=""></p></li></ul><h4 id="Redis-通用命令"><a href="#Redis-通用命令" class="headerlink" title="Redis-通用命令"></a>Redis-通用命令</h4><ul><li>通用命令是部分数据类型的,都可以使用的指令,常见的有<ul><li><code>keys</code> * : 查看符合模板的所有 <code>key</code>,不建议在生产环境设备上使用</li><li><code>del key</code> : 删除一个指定的<code>key</code></li><li><code>exists key</code>: 判断一个key 是否存在</li><li><code>expire key</code>: 给一个 <code>key</code>设置有效期,有效期到期时该 <code>key</code>会被自动删除</li><li><code>ttl key</code>: 查看一个 <code>key</code> 的剩余有效期</li><li><code>persist key</code>取消键的过期时间</li><li><code>type key</code>: 查看你的<code>key</code>是什么类型</li><li><code>move key dbindex</code>移动当前数据库中的<code>key</code>到指定的数据库中</li><li><code>select dbindex</code>: 切换数据库</li><li><code>dbsize</code>: 查看当前数据库<code>key</code>的数量</li><li><code>flushdb</code>: 清空当前库</li><li><code>flushall</code>: 删除所有数据库的数据</li></ul></li></ul><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String-类型"></a>String-类型</h4><ul><li><p><code>String</code> 类型,也就是字符串类型,是 Redis 中最简单的存储类型,其<code>Value</code> 是字符串,不过根据字符串的格式不同,又可以分为<code>3</code>类</p><ul><li><code>string</code>: 普通字符串</li><li><code>int</code>: 整数类型,可以做自增,自减操作</li><li><code>float</code>: 浮点类型,可以做自增,自减操作</li></ul></li><li><p><code>string</code>常见命令</p><ul><li><p><code>set</code>:添加或者修改已经存在的一个<code>string</code>类型的键值对</p></li><li><p><code>get</code>:根据key获取<code>String</code>类型的<code>value</code></p></li><li><p><code>mset</code>:批量添加多个<code>string</code>类型的键值对</p></li><li><p><code>mget</code>：根据多个<code>key</code>获取多个<code>string</code>类型的<code>value</code></p></li><li><p><code>incr</code>: 让一个整型的<code>key</code>自增<code>1</code></p></li><li><p><code>incrby</code>: 让一个整型的<code>key</code>自增并指定步长</p></li><li><p><code>incrbyfloat</code>：让一个浮点类型的数组自增并指定步长</p></li><li><p><code>setnx</code>: 添加一个<code>String</code>类型的键值对,前提是这个<code>key</code>不存在,否则不执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SETNX KEY VALUE(成功返回1,否则返回0)</span></span><br><span class="line"><span class="attr">setnx</span> <span class="string">aa bb</span></span><br></pre></td></tr></table></figure></li><li><p><code>setex</code>: 添加一个<code>String</code>类型的键值对,并且指定有效期</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SETEX KEY SECONDS VALUE</span></span><br><span class="line"><span class="attr">setex</span> <span class="string">username 100 coder-itl</span></span><br></pre></td></tr></table></figure></li><li><p>添加键的时候指定过期时间</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">set</span> <span class="string">key value ex seconds</span></span><br></pre></td></tr></table></figure></li><li><p>保留值的过期时间</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; set aa 10 ex 100</span></span><br><span class="line"><span class="attr">OK</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; ttl aa</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">97</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; set aa 20 keepttl</span></span><br><span class="line"><span class="attr">OK</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; ttl aa</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">85</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; ttl aa</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">84</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br></pre></td></tr></table></figure></li><li><p>字符串的追加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个key的值的字符长度</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; set aa 100</span></span><br><span class="line"><span class="attr">OK</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; strlen aa</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">3</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 对这个值进行追加(从原有的值上的末尾进行追加)</span></span><br><span class="line"><span class="attr">append</span> <span class="string">key value</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>key</code>的结构</p><ul><li><p><code>Redis</code>的<code>key</code>允许有多个单词形成层级结构,多个单词之间用<code>:</code>隔开,格式如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">项目名</span>:<span class="string">业务名:类型:id</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>应用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String 类型是 Redis 中最简单的数据类型，可以存储任意类型的数据，包括文本、整数、浮点数等。String 类型是二进制安全的，可以存储任意二进制数据。常见的应用场景包括缓存、计数器、分布式锁等。</span><br></pre></td></tr></table></figure></li></ul><h4 id="Hash-类型"><a href="#Hash-类型" class="headerlink" title="Hash-类型"></a>Hash-类型</h4><ul><li><p>Hash类型,也叫散列,其<code>value</code>是一个无序字典,类似于<code>Java</code>中的<code>HashMap</code>结构，<code>Hash</code>结构可以将对象中的每个字敦独立存储,可以针对单个字段做<code>CRUD</code></p></li><li><p><code>Hash</code>常见命令</p><ul><li><p><code>hset key field value</code>: 添加或者修改<code>hash</code> 类型<code>key</code>的<code>field</code>的值</p><p><img src="https://img-blog.csdnimg.cn/direct/4a2f7f42167a4c1dabde4d8f2cb61f11.png" alt=""></p></li><li><p><code>hget key field</code>: 获取一个 <code>hash</code> 类型<code>key</code>的<code>field</code>的值</p></li><li><p><code>hmset</code>: 批量添加多个hash类型key的field的值</p></li><li><p><code>hmget</code>: 批量获取多个hash类型key的field的值</p></li><li><p><code>hgetall</code>: 获取一个hash类型的key中的所有的field和vaLue</p></li><li><p><code>hkeys</code>: 获取一个 hash类型key中的所有的field和value</p></li><li><p><code>hvals</code>: 获取一个hash类型的<code>key</code>中的所有的value</p></li><li><p><code>hincrby</code>:让一个hash类型<code>key</code>的字段值自增并指定步长</p></li><li><p><code>hsetnx</code>:添加一个hash类型的key的<code>field</code>值,前提是这个<code>field</code>不存在,否则不执行</p></li><li><p><code>hexists key</code>在<code>key</code>里面的某个值的<code>key</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; keys *</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;user:001&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;userinfo&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; type user:001</span></span><br><span class="line"><span class="attr">hash</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hgetall user:001</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hexists user:001 name</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hexists user:001 score</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br></pre></td></tr></table></figure></li><li><p><code>hlen</code>获取某个<code>key</code>内的全部数量</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hlen user:001</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>hdel</code>删除<code>hash</code>里面的某个键</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hset user:001 name zs age 17 gender 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">3</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hdel user:001 gender</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; hgetall user:001</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>应用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hash 类型是一个键值对集合，类似于 Map 结构。每个 Hash 类型的键都对应一个键值对集合，可以存储多个字段和值。Hash 类型适合存储对象数据，如用户信息、商品信息等，以及存储具有结构化数据的场景。</span><br></pre></td></tr></table></figure></li><li><p>具体案例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增商品</span></span><br><span class="line"><span class="attr">hset</span> <span class="string">shopcar:uid1024 3344481 1</span></span><br><span class="line"><span class="comment"># 新增商品</span></span><br><span class="line"><span class="attr">hset</span> <span class="string">shopcar:uid1024 3344477 1</span></span><br><span class="line"><span class="comment"># 增加商品数量</span></span><br><span class="line"><span class="attr">honcrby</span> <span class="string">shopcar:uid1024 334477 1</span></span><br><span class="line"><span class="comment"># 商品总数</span></span><br><span class="line"><span class="attr">hlen</span> <span class="string">shopcar:uid1024</span></span><br><span class="line"><span class="comment"># 全部选择</span></span><br><span class="line"><span class="attr">hgetall</span> <span class="string">shopcar:uuid1024</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="List-类型"><a href="#List-类型" class="headerlink" title="List-类型"></a>List-类型</h4><ul><li><p><code>Redis</code>中的<code>List</code>类型与<code>java</code>中的<code>LinkedList</code>类似,可以看作是一个双向链表结构,既可以支持正向检索和也可以支持反向检索，一般用在<code>栈、队列、消息队列等</code></p><ul><li><p>如果键不存在,创建新的链表</p></li><li><p>如果键已存在,新增内容</p></li></ul></li><li><p>常见命令</p><ul><li><p><code>lpush key element</code>: 向列表左侧插入一个或多个元素</p><p><img src="https://img-blog.csdnimg.cn/direct/61775d981244463a9932457e0704fbd9.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lpush</span> <span class="string">page 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure></li><li><p><code>lpop key</code>：移除并返回列表左侧的第一个元素,没有则返回<code>nil</code></p><p><img src="https://img-blog.csdnimg.cn/direct/0a58516f0ef4453d80654f53933179be.png" alt=""></p></li><li><p><code>rpush key element</code>: 向列表右侧插入一个或多个元素</p></li><li><p><code>rpop key</code>: 移除并返回列表右侧的第一个元素</p></li><li><p><code>lrange key stat end</code>:返回一段角标范围内的所有元素</p><p><img src="https://img-blog.csdnimg.cn/direct/8d31d1bbbd774c5fafecc3276289ee78.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;7&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">6)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">7)</span> <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>blpop</code>和<code>brpop</code>：与<code>lpop</code>和<code>rpop</code>类似,只不过在没有元素时等待指定时间,而不是直接返回<code>nil</code></p></li><li><p><code>lindex</code>按照索引下标获取元素(从上到下)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">6)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lindex aa 1</span></span><br><span class="line"><span class="attr">&quot;5&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>llen key</code>获取列表中的元素个数</p></li><li><p><code>lrem key</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对列表添加重复的元素值</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lpush aa 1 1 2 1 1 3 4 5</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">14</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"> <span class="attr">1)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"> <span class="attr">2)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"> <span class="attr">3)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> <span class="attr">4)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">5)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">6)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"> <span class="attr">7)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">8)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">9)</span> <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="attr">10)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">11)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">12)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">13)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">14)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 从左往右删除 4个只等于 1 的元素,返回的值为实际删除的数量</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"> <span class="attr">1)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"> <span class="attr">2)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"> <span class="attr">3)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> <span class="attr">4)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">5)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">6)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"> <span class="attr">7)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">8)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">9)</span> <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="attr">10)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">11)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">12)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">13)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">14)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrem aa 4 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">4</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"> <span class="attr">1)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"> <span class="attr">2)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"> <span class="attr">3)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> <span class="attr">4)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"> <span class="attr">5)</span> <span class="string">&quot;6&quot;</span></span><br><span class="line"> <span class="attr">6)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"> <span class="attr">7)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"> <span class="attr">8)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> <span class="attr">9)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">10)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 表示删除全部给定的值, 0 个就是全部值</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"> <span class="attr">1)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">2)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">3)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">4)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">5)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"> <span class="attr">6)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> <span class="attr">7)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"> <span class="attr">8)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"> <span class="attr">9)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">10)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">11)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">12)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">13)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">14)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrem aa 0 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">11</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange aa 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>ltrim</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ltrim key  开始index 结束index, 截取指定范围的值后再赋值给 key</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lpush userinfo zhangsan lisi wangwu zhaoliu mazi ergou jack</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">7</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange userinfo 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;ergou&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">6)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">7)</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; ltrim userinfo 3 6 </span></span><br><span class="line"><span class="attr">OK</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange userinfo 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>rpoplpush</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpoplpush 源列表 目的列表</span></span><br></pre></td></tr></table></figure></li><li><p><code>lset</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改key中某个索引上的值 </span></span><br><span class="line"><span class="attr">lset</span> <span class="string">key index value</span></span><br></pre></td></tr></table></figure></li><li><p><code>linsert</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linsert key before/after 已有值 插入的新值</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange userinfo 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; linsert userinfo before lisi mysql</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">5</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lrange userinfo 0 -1</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;mysql&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>应用场景</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">List</span> <span class="string">类型是一个链表结构，可以存储多个字符串元素，且元素的顺序是有序的。List 类型支持从两端进行元素的添加、删除、获取等操作，因此适合用于实现队列、栈等数据结构，以及消息队列、任务队列等应用场景</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Set-类型"><a href="#Set-类型" class="headerlink" title="Set-类型"></a>Set-类型</h4><ul><li><p><code>redis</code>的<code>set</code>结构与<code>java</code>中的<code>HashSet</code>类似,可以看作是一个<code>value</code>为<code>null</code>的<code>HashMap</code>,因为也是一个<code>hash</code>表,因此具备与<code>HashSet</code>类似的特征</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul></li><li><p>String的常见命令</p><ul><li><p><code>sadd key member</code>: 向<code>set</code>中添加一个或多个元素</p></li><li><p><code>srem key member</code>: 移除 <code>set</code> 中的指定元素</p></li><li><p><code>scard key</code>: 返回 <code>set</code> 中元素的个数</p></li><li><p><code>sismember key member</code>: 判断一个元素是否存在于 <code>set</code> 中</p></li><li><p><code>smembers</code>: 获取<code>set</code> 中的所有元素</p></li><li><p><code>sinter key1 key2</code>: 求<code>key1</code>与<code>key2</code>的交集</p></li><li><p><code>sdiff key1 key2</code>: 求 <code>key1</code> 与 <code>key2</code>的差集</p></li><li><p><code>sunion key1 key2</code>: 求 <code>key1</code> 和 <code>key2</code>的并集</p></li><li><p><code>srandmember key 数字</code>从集合中随机展现设置的数字个数元素,元素不删除</p></li><li><p><code>spop key 数字</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从集合中随机弹出指定个元素,弹出后就会被删除</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers time</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">6)</span> <span class="string">&quot;56&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; spop time 2</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers time</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;56&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>smove key1 key2  key1</code>里已存在的某个值</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 key1 里已存在的某个值赋值给 key2</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers time</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;56&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers stu</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;zl&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smove time stu 56</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers stu</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">4)</span> <span class="string">&quot;zl&quot;</span></span><br><span class="line"><span class="attr">5)</span> <span class="string">&quot;56&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; smembers time</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>案例练习</p><ul><li><p>利用set集合存储</p><ul><li><p>张三的好友有: 李四、王五、赵六</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sadd</span> <span class="string">zs lisi wangwu zhaoliu</span></span><br></pre></td></tr></table></figure></li><li><p>李四的好友有：王五、麻子、二狗</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sadd</span> <span class="string">lisi wangwu mazi ergou</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现计算</p><ul><li><p>计算张三的好友有几个人(<code>sismember</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; SMEMBERS zs</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>计算张三和李四有哪些共同好友(<code>交集</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; sinter zs lisi</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查询那些人是张三的好友却不是李四的好友</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; sdiff zs lisi</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;zhaoliu&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查询李四是否是张三的好友</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询李四是否是张三的好友 =&gt; 张三中是否有李四</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; sismember zs lisi</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br></pre></td></tr></table></figure></li><li><p>判断张三是否是李四的好友</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断张三是否是李四的好友 =&gt; 李四中是否有张三</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; sismember  lisi zs</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br></pre></td></tr></table></figure></li><li><p>将李四从张三的好友列表中移除</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将李四从张三的好友列表中移除 =&gt; 在张三中移除李四 </span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; srem zs lisi</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>应用场景</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Set</span> <span class="string">类型是一个无序集合，不允许有重复的元素。Set 类型支持添加、删除、查找等操作，并且支持对多个集合进行交集、并集、差集等操作。常见的应用场景包括标签系统、好友关系、唯一值存储等。</span></span><br></pre></td></tr></table></figure></li><li><p>具体案例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增点赞</span></span><br><span class="line"><span class="attr">sadd</span> <span class="string">pub:msg 点赞用户id1 点赞用户id2</span></span><br><span class="line"><span class="comment"># 取消点赞</span></span><br><span class="line"><span class="attr">srem</span> <span class="string">pub:msg  点赞用户id</span></span><br><span class="line"><span class="comment"># 展现所有点赞过的用户</span></span><br><span class="line"><span class="attr">smembers</span> <span class="string">pub:msgid</span></span><br><span class="line"><span class="comment"># 点赞用户数统计,就是常见的点赞红色数字</span></span><br><span class="line"><span class="attr">scard</span> <span class="string">oub:msgid</span></span><br><span class="line"><span class="comment"># 判断某个朋友是否对楼主点赞过</span></span><br><span class="line"><span class="attr">sismember</span> <span class="string">pub:msgid 用户id</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户 id,立即参与按钮的点击事件</span></span><br><span class="line"><span class="attr">sadd</span> <span class="string">key 用户id</span></span><br><span class="line"><span class="comment"># 显示已经有多少人参与了</span></span><br><span class="line"><span class="attr">scard</span> <span class="string">key</span></span><br><span class="line"><span class="comment"># 抽奖(从set中任意选取 N 个人中奖)</span></span><br><span class="line"> <span class="attr">srandmember</span> <span class="string">key 2 # 随机抽奖 2 个人,元素可以重复(用户可以再次抽奖)</span></span><br><span class="line"> <span class="attr">spop</span> <span class="string">key 3 # 随机抽奖 3 个人,元素会删除(只有一次机会)</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐认识的人</span></span><br><span class="line"><span class="attr">sadd</span> <span class="string">s1 1 2 3 4 5</span></span><br><span class="line"><span class="attr">sadd</span> <span class="string">s2 3 4 5 6 7</span></span><br><span class="line"><span class="comment"># 给 s2 推荐 s1 的朋友(差集)</span></span><br><span class="line"><span class="attr">sdiff</span> <span class="string">s1 s2</span></span><br><span class="line"><span class="comment"># 给 s1 推荐 s2 的朋友</span></span><br><span class="line"><span class="attr">sdiff</span> <span class="string">s2 s1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="SortedSet-类型"><a href="#SortedSet-类型" class="headerlink" title="SortedSet-类型"></a>SortedSet-类型</h4><ul><li><p><code>redis</code>的<code>SortedSet</code> 是一个可排序的 <code>set</code>集合，与 <code>java</code>中的 <code>TreeSet</code>有些类似,但底层数据结构却差别很大.<code>SortedSet</code>中的每一个元素都带有一个 <code>score</code>属性,可以基于 <code>score</code>属性对元素排序,底层的实现是一个跳表加<code>hash</code>表</p></li><li><p><code>SortedSet</code>具备下列特征</p><ul><li><p>可排序</p></li><li><p>元素不重复</p></li><li><p>查询速度快</p><blockquote><p>因为 <code>SortedSet</code>的可排序特性,经常备用来实现排行榜这样的功能</p></blockquote></li></ul></li><li><p>常见命令</p><ul><li><p><code>zadd key score member</code>: 添加一个或多个元素到 <code>sorted set</code>,如果已经存在则更新其 <code>score</code>值</p></li><li><p><code>zrem key member</code>: 删除 <code>sorted set</code>中的一个指定元素</p></li><li><p><code>zscore key member</code>: 获取 <code>sorted set</code> 中的指定元素的 <code>score</code> 值</p></li><li><p><code>zrank key member</code>: 获取 <code>sorted set</code> 中指定元素的排名</p></li><li><p><code>zcard key</code>: 获取 <code>sorted set</code> 中的元素个数</p></li><li><p><code>zcount key min max</code>: 统计<code>score</code>值在给定范围内的所有元素的个数</p></li><li><p><code>zincrby key increment member</code>: 让 sorted set 中的指定元素自增,步长为指定的 increment 值</p></li><li><p><code>zrange key min max</code>: 按照 score 排序后,获取指定排名范围内的元素</p></li><li><p><code>zrangebyscore key min max</code>: 按照 score 排序后,获取指定 score 范围内的元素</p></li><li><p><code>zdiff、zinter、zunion</code>:求差集、交集、并集</p><blockquote><p>注意: 所有的排名默认都是升序的,如果要降序则在命令的<code>Z</code>后面添加<code>rev</code>即可</p></blockquote></li></ul></li><li><p>案例实现</p><ul><li>排行榜</li><li>滑动窗口实现限流</li></ul></li><li><p>案例练习</p><ul><li><p>将班级的学生存入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Jack: 85 </span></span><br><span class="line"><span class="attr">zadd</span> <span class="string">stus 85 Jack 82 Rose 95 Jerry 95 Amy 78 Amy 92 Lusy 76 Miles </span></span><br></pre></td></tr></table></figure></li><li><p>实现下列功能</p><ul><li><p>删除<code>Tom</code>同学</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zrem</span> <span class="string">stus Tom</span></span><br></pre></td></tr></table></figure></li><li><p>获取 <code>Amy</code> 同学的分数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zscore</span> <span class="string">stus Amy</span></span><br></pre></td></tr></table></figure></li><li><p>获取 <code>Rose</code> 同学的排名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zrank</span> <span class="string">stus Rose</span></span><br></pre></td></tr></table></figure></li><li><p>查询 <code>80</code> 分以下有几个学生</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zcount</span> <span class="string">stus 0 80</span></span><br></pre></td></tr></table></figure></li><li><p>给 <code>Amy</code> 同学加 <code>2</code> 分</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zincrby</span> <span class="string">stus 2 Amy</span></span><br></pre></td></tr></table></figure></li><li><p>查出成绩前 <code>3</code> 名的同学</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; zrange stus 0 2</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;Miles&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;Amy&quot;</span></span><br><span class="line"><span class="attr">3)</span> <span class="string">&quot;Rose&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查出成绩 <code>80</code> 分以下的所有同学</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; zrangebyscore stus 0 80</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;Miles&quot;</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;Amy&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>应用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sorted Set 类型是一个有序集合，每个成员都关联一个分数（Score），根据分数进行排序。Sorted Set 类型支持添加、删除、获取等操作，并且支持根据分数范围获取成员，以及获取排名等操作。常见的应用场景包括排行榜、范围查询、优先级队列等。</span><br></pre></td></tr></table></figure></li><li><p>具体案例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：定义商品销售排行榜(sorted set集合)，key为goods:sellsort，分数为商品销售数量。</span></span><br><span class="line"><span class="comment"># 商品编号1001的销量是9，商品编号1002的销量是15</span></span><br><span class="line"><span class="attr">zadd</span> <span class="string">goods:sellsort 9 1001 15 1002</span></span><br><span class="line"><span class="comment"># 有一个客户又买了2件商品1001，商品编号1001销量加2</span></span><br><span class="line"><span class="attr">zincrby</span> <span class="string">goods:sellsort 2 1001</span></span><br><span class="line"><span class="comment"># 求商品销量前10名</span></span><br><span class="line"><span class="attr">ZRANGE</span> <span class="string">goods:sellsort 0 9 withscores</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="bitmap-位图"><a href="#bitmap-位图" class="headerlink" title="bitmap-位图"></a>bitmap-位图</h4><ul><li><p>是由<code>0</code>和<code>1</code>状态表现得二进制位的<code>bit</code>数组</p></li><li><p>需求</p><ul><li>用户是否登录过<code>Y,N</code>比如京东每日签到1送京豆</li><li>电影、广告是否被点击播放过</li><li>顶顶打卡上下班,签到统计</li></ul></li><li><p>说明</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>用<code>String</code>类型作为底层数据结构实现的一种统计二值状态的数据类型,<code>位图本质是数组</code>，它是基于<code>String</code>数据类型的按位的操作,该数组由多个二进制位组成,每个二进制都对应一个偏移量(<code>我们称之为一个索引</code>)</p></div></li><li><p><code>setbit</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bitmap 的偏移量是从零开始算的</span></span><br><span class="line"><span class="attr">setbit</span> <span class="string">key offset value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 签到第一天</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; setbit signIn 1 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br><span class="line"><span class="comment"># 签到第二天</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; setbit signIn 2 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; setbit signIn 3 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; setbit signIn 4 1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">0</span></span><br><span class="line"><span class="comment"># 第五天未签到</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; setbit signIn 5 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>getbit</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询第五天是否签到</span></span><br><span class="line"><span class="attr">getbit</span> <span class="string">signIn 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>strlen</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计字节数占用多少 =&gt; 不是字符串长度而是占据几个字节,超过8位后按照 8 位一组 一 byte 再扩容</span></span><br><span class="line"><span class="attr">strlen</span> <span class="string">signIn</span></span><br></pre></td></tr></table></figure></li><li><p><code>bitcount</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全部键里面含有 1 的有几个</span></span><br><span class="line"><span class="attr">bitcount</span> <span class="string">signIn</span></span><br></pre></td></tr></table></figure></li><li><p><code>bitop</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对不同的二进制存储数据进行位运算(AND OR NOT XOR)</span></span><br><span class="line"><span class="attr">bitop</span> <span class="string">operation destkey key</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="HeyperLogLog-基数统计"><a href="#HeyperLogLog-基数统计" class="headerlink" title="HeyperLogLog-基数统计"></a>HeyperLogLog-基数统计</h4><ul><li><p>需求</p><ul><li>统计某个网站的<code>UV</code>，统计某个文章的<code>UV</code><ul><li><code>UV(Unique Visitor)</code>:独立访客,一般理解为客户端<code>IP</code></li></ul></li><li>用户搜索网站关键词的数量</li><li>统计用户每天搜索不同词条个数</li></ul></li><li><p>基数</p><ul><li><p>是一种数据集,去重后的真实个数</p></li><li><p>案例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">(全集)</span> = <span class="string">&#123;2,4,6,8,77,39,4,8,10&#125;</span></span><br><span class="line"><span class="comment"># 去掉重复后的内容 (去掉重复的 4 8 )</span></span><br><span class="line"><span class="attr">基数</span> = <span class="string">&#123;&#123;2,4,6,8,77,39,10&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>基数统计: 用于统计一个集合中不重复的元素个数,就是对集合去重后剩余元素的计算</p></li></ul></li><li><p>基本命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个月的访问</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfadd baidu1 1 3 5 7 9</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 第二个月的访问</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfadd baidu2 1 1 1 2 1 3 4 5 6 5 7 9</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 去重后的实际个数</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfcount baidu1</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">5</span></span><br><span class="line"><span class="comment"># 去重后的实际个数</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfcount baidu2</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">8</span></span><br><span class="line"><span class="comment"># 将两个去重合并</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfmerge allIp baidu1 baidu2</span></span><br><span class="line"><span class="attr">OK</span></span><br><span class="line"><span class="comment"># 最终的实际个数</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; pfcount allIp</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">8</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="GEO-地理空间"><a href="#GEO-地理空间" class="headerlink" title="GEO-地理空间"></a>GEO-地理空间</h4><ul><li><p>命令</p><ul><li><p><code>geoadd</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geoadd key 经度 维度 位置名称</span></span><br><span class="line"><span class="attr">GEOADD</span> <span class="string">cities 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>geopos</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geo 的类型</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; type cities</span></span><br><span class="line"><span class="attr">zset</span></span><br><span class="line"><span class="attr">root@d9737da67152</span>:<span class="string">/data# redis-cli --raw # 解决乱码</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; zrange cities 0 -1</span></span><br><span class="line"><span class="attr">Palermo</span></span><br><span class="line"><span class="attr">Catania</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从键里面返回所有给定位置元素的位置(经度和纬度)</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; geopos cities Palermo</span></span><br><span class="line"><span class="attr">13.36138933897018433</span></span><br><span class="line"><span class="attr">38.11555639549629859</span></span><br></pre></td></tr></table></figure></li><li><p><code>geodist</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GEOADD</span> <span class="string">cities 13.361389 38.115556 &quot;A&quot; 15.087269 37.502669 &quot;B&quot;</span></span><br><span class="line"><span class="comment"># 返回两个给定位置之间的距离</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; geodist cities A B km</span></span><br><span class="line"><span class="attr">166.2742</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; </span></span><br></pre></td></tr></table></figure><ul><li>m: 米</li><li>km: 千米</li><li>ft 英尺</li><li>mi: 英里</li></ul></li><li><p><code>georadius</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以给定的经纬度为中心,返回与中心的距离不超过给定最大距离的所有位置元素(也叫以半径为中心,朝朝附近的xxxx)</span></span><br><span class="line"><span class="attr">georadius</span> <span class="string">cities 13.361389 38.115556 10 km withdist withcoord withhash count 10 desc</span></span><br></pre></td></tr></table></figure><ul><li><code>13.361389 38.115556</code>自己所在的位置</li><li><code>withdist</code>: 在返回位置元素的同时,将位置元素与中心之间的距离也一并返回.距离的单位和用户给定的范围单位保持一直</li><li><code>withcoord</code>将位置元素的经度和维度也一并返回</li><li><code>withhash</code>以<code>52</code>位有符号整数的形式,返回位置元素经过原始<code>geohash</code>编码的有序集合分值,这个选项主要用于底层应用或者调式,实际中的作用并不大</li><li><code>count</code>: 限定返回的记录数</li></ul></li><li><p><code>geoadiusbymember</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和 georadius 类似</span></span><br><span class="line"><span class="attr">geoadiusbymember</span> <span class="string">cities A 10 km  withdist withcoord  count 10 withhash </span></span><br></pre></td></tr></table></figure></li><li><p><code>geohash</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回一个或多个位置元素的 geohash 表示</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; geohash cities Palermo</span></span><br><span class="line"><span class="attr">sqc8b49rny0</span></span><br></pre></td></tr></table></figure><ul><li>geohash算法生成的<code>base32</code>编码值</li><li><code>3维变2维变1维度</code></li></ul></li></ul></li></ul><h4 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h4><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接池依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.129</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#  最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">100</span> <span class="comment"># 连接等待时间</span></span><br></pre></td></tr></table></figure></li><li><p>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></li></ul><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有引入 springmvc 时添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 详细配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory redisConnFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接池工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnFactory);</span><br><span class="line">        <span class="comment">// 1. 解决 key 的序列化方式</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// 2. 解决 value 的序列化方式</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="comment">// 序列化时将类的数据类型存入 json，以便反序列化的时候转换成正确的类型</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 将当前对象的数据类型也存入序列化的结果字符串中</span></span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">// 解决jackson2无法反序列化 LocalDateTime的问题</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h4><ul><li><p><code>Spring</code>默认提供了一个<code>StringRedisTemplate</code>类,他的<code>key</code>和<code>value</code>的序列化方式默认就是<code>String</code>方式,省去了我们自定义<code>RedisTemplate</code>的过程</p><ul><li><p>定义实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringRedisTemplate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">// json 工具</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">2024</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;123456@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 手动序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    <span class="comment">// 写入一条数据到 redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:2024&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:2024&quot;</span>);</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> objectMapper.readValue(val, User.class);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redis 中存储的结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2024</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456@qq.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后的输出</span></span><br><span class="line">User(id=<span class="number">2024</span><span class="punctuation">,</span> name=张三<span class="punctuation">,</span> email=<span class="number">123456</span>@qq.com)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h4><ul><li><p>单线程解释</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Redis</code>是单线程的,意思是,<code>Redis</code>执行命令是单线程的。并不能说<code>Redis</code>就只能有一个客户端。<code>Redis</code>是单线程的，为什么还能连接多个客户端呢？这是通过多路复用实现的。多路复用,就是<code>一个线程同时监听多个套接字</code>。</p></div><ul><li>多路复用<ul><li><code>select</code><ul><li>特点</li></ul></li><li><code>poll</code><ul><li>特点:<code>2048</code></li></ul></li><li><code>epoll</code>：特点,当那个套接字准备好,</li></ul></li></ul></li></ul><h4 id="Redis是单线程的-为什么还那么块？"><a href="#Redis是单线程的-为什么还那么块？" class="headerlink" title="Redis是单线程的,为什么还那么块？"></a>Redis是单线程的,为什么还那么块？</h4><ul><li>纯内存访问: 数据放在内存中,内存的响应时间是极快的,</li><li>采用单线程自然也就避免了现成的上下文切换和所带来的开销</li><li>非阻塞式的<code>I/O</code>操作：<code>redis</code>采用<code>epoll</code>作为<code>I/O</code>多路复用技术的实现,在处理连接请求是非常快速<ul><li><code>epoll</code>(支持零拷贝)能精准获取数据,对比 <code>select,poll</code></li></ul></li><li><code>redis6</code>开始支持多线程,进一步降低了网络<code>IO</code>带来的性能开销,但仍然是单线程在执行<code>redis</code>命令</li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><p>缓存就是数据交换的缓冲区(<code>称作 Cache</code>)，是存储数据的临时地方,一般读写性能较高</p></li><li><p>缓存的作用</p><ul><li>降低后端负载</li><li>提高读写效率,降低响应时间</li></ul></li><li><p>缓存的成本</p><ul><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ul></li><li><p>缓存流程图</p><p><img src="https://img-blog.csdnimg.cn/direct/9f18f09acffd47ed9fc184845ab8ba1c.png" alt=""></p></li></ul><ul><li><p>缓存更新策略</p><p><img src="https://img-blog.csdnimg.cn/direct/ddd199da4f4447d68bcf0917a26af7c2.png" alt=""></p><ul><li><p>业务场景</p><ul><li>低一致性需求: 使用内存淘汰机制,例如店铺类型的查询缓存</li><li>高一致性需求: 主动更新,并以超时剔除作为兜底方案,例如店铺详情查询缓存</li></ul></li><li><p>读操作</p><ul><li>缓存命中则直接返回</li><li>缓存未命中则查询数据库,并写入缓存,设定超时时间</li></ul></li><li>写操作<ul><li>先写数据库,然后再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul></li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><ul><li><p>缓存穿透是指客户端请求的数据再缓存中和数据库中都不存在,这样缓存永远不会生效,这些请求都会打到数据库</p></li><li><p>缓存穿透的解决方案</p><ul><li><p>缓存空对象</p><ul><li><p>优点：实现简单,维护方便</p></li><li><p>缺点</p><ul><li>造成额外的内存消耗</li><li>可能造成短期的不一致</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/c7cde63bb5f94e398ab7ee0d67c5ecec.png" alt=""></p></li></ul></li><li><p>布隆过滤</p><ul><li><p>优点：内存占用较少,没有多余key</p><p><img src="https://img-blog.csdnimg.cn/direct/1a1d161499434a429b2c8c8b114c7941.png" alt=""></p></li><li><p>缺点</p><ul><li><p>实现复杂</p></li><li><p>存在误判可能</p><p><img src="https://img-blog.csdnimg.cn/direct/fe9019745ccd46a988ca7badb540a1f3.png" alt="误判"></p><ul><li>误判率：数组越小误判率就越大,数组越大误判率就越小,但是同时带来了更多的内存消耗</li></ul></li></ul></li><li><p>布隆过滤器的底层实现</p><ul><li>是基于<code>bitmap</code>(位图)：相当于是一个以<code>bit</code>位为单位的数组,数组中每个单元只能存储二进制数<code>0或1</code></li><li>布隆过滤器的作用: 布隆过滤器可以用于检索一个元素是否存在一个集合中</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/9f7b0487c8304f71888fdb5094bef16f.png" alt=""></p></li><li><p>布隆过滤器实现方案</p><ul><li><code>Redisson</code></li><li><code>Guava</code></li></ul></li></ul></li></ul></li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><h4 id="Redis-配置文件详解"><a href="#Redis-配置文件详解" class="headerlink" title="Redis-配置文件详解"></a>Redis-配置文件详解</h4><h5 id="include"><a href="#include" class="headerlink" title="include"></a>include</h5><ul><li><p>作用解释</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>指定要在当前配置文件中包含的配置文件。这样做的目的主要是便于配置信息管理,可以将不同场景的配置都进行单独定义,然后再当前核心配置文件中根据不同场景选择包含进不同的配置文件。但是要放在最后一行。</p></div></li></ul><h5 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h5><ul><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Redis</code>配置文件中可以通过加载不同的第三方模块,来增强、扩展<code>Redis</code>的功能(用处不大)</p></div></li></ul><h5 id="network"><a href="#network" class="headerlink" title="network"></a>network</h5><ul><li><p><code>bind</code>: 注释掉,负责只能访问本机</p></li><li><p><code>protected-mode</code>设置为<code>no</code></p></li><li><p><code>port</code></p></li><li><p><code>timout</code></p></li><li><p><code>tcp-keepalive</code></p></li><li><p><code>tcp-backlog(重要的)</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>tcp-backlog</code>是一个<code>TCP</code>连接的队列,其主要作用用于解决高并发澄静下客户端慢连接问题。这里设置的值就是这个队列的长度。该队列与<code>TCP</code>连接的三次握手有关。不同的<code>Linux</code>内核,<code>backlog</code>队列中存放的元素(<code>客户端连接</code>类型是不同的)</p><p><code>TCP</code>中的<code>backlog</code>队列的长度在<code>Linux</code>中由内核参数<code>somaxconn</code>来决定。所以,在<code>Redis</code>中该队列的长度由<code>Redis</code>配置文件设置与<code>somaxconn</code>来共同决定(<code>取他们中的最小值</code>)</p></div><ul><li><p>查看<code>somaxconn</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cat</span> <span class="string">/proc/sys/net/core/somaxconn</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>somaxconn</code>的值</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生产环境下(特别是高并发场景下), backlog 的值最好要大一些,否则可能会影响系统性能</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/etc/sysctl.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">net.core.somaxconn</span>=<span class="string">2048</span></span><br></pre></td></tr></table></figure></li><li><p>配置生效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sysctl</span> <span class="string">-p</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="clients"><a href="#clients" class="headerlink" title="clients"></a>clients</h5><ul><li><p><code>maxclients</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>该模块用于设置客户端相关的属性,其中仅包含一个属性<code>maxclients</code>.</p><p><code>maxclients</code>用于设置<code>Redis</code>可并发处理的客户端连接数量,默认值为<code>10000</code>,如果达到了该最大连接数,则会拒绝再来的新连接,并返回一个异常信息:<code>已达到最大连接数</code></p></div></li></ul><h5 id="memory-management"><a href="#memory-management" class="headerlink" title="memory management"></a>memory management</h5><ul><li><p><code>maxmemory</code>:该配置可以控制最大内存及相关内容移除问题</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>将内存使用限制设置为指定的字节数,当达到内存限制时,<code>Redis</code>将根据选择的逐出策略,<code>maxmemory-policy</code>尝试删除符合条件的<code>key</code></p></div></li><li><p><code>maxmemory-policy</code></p></li><li><p><code>maxmemory-samples</code></p></li><li><p><code>maxmemory-eviction-tenacity</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>设置移除容忍度。数值越小表示容忍度越低,需要移除的数据移除延迟越小;数值越大,表示容忍度越高,需要移除的数据移除延迟越大</p></div></li></ul><h4 id="Redis-持久化原理"><a href="#Redis-持久化原理" class="headerlink" title="Redis-持久化原理"></a>Redis-持久化原理</h4><h5 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h5><ul><li><p><code>RDB</code>持久化</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>RDB</code>是指将内存中某一时刻的数据快照全量写入到指定的<code>rdb</code>文件的持久化技术,<code>RDB</code>持久化默认是开启的,当<code>Redis</code>启动时会自动读取<code>RDB</code>快照文件,将数据从硬盘载入到内存,以恢复<code>Redis</code>关机前的数据库状态</p></div><ul><li>保存的文件是<code>dump.rdb</code>文件</li></ul></li><li><p>案例演示</p><ul><li><p>自动触发</p><ul><li><p>修改为<code>5s 2次修改</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis.conf</span></span><br><span class="line"><span class="attr">save</span> <span class="string">5 2</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>dump</code>文件保存路径</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件内容获取</span></span><br><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; config get dir</span></span><br><span class="line"><span class="attr">1)</span> <span class="string">&quot;dir&quot; (key)</span></span><br><span class="line"><span class="attr">2)</span> <span class="string">&quot;/data&quot; (value)</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>dump.rdb</code>文件的名称</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dbfilename</span> <span class="string">xxx.rdb</span></span><br></pre></td></tr></table></figure></li><li><p>如何恢复</p><ul><li>细节: <code>物理恢复,一定要服务和备份分机隔离</code></li><li>将备份文件(<code>dump.rdb</code>)移动到<code>redis</code>安装目录并启动服务即可</li></ul></li></ul></li><li><p>手动触发</p><ul><li><p><code>Redis</code> 提供了两个命令来生成<code>RDB</code>文件,分别是<code>save和bgsave</code></p></li><li><p><code>save</code>在主程序中执行<code>会阻塞</code>当前<code>redis</code>服务器,直到持久化工作完成,执行<code>save</code>命令期间,<code>Redis</code>不能处理其他命令,<code>线上禁止使用</code></p></li><li><p><code>bgsave</code></p><ul><li><p><code>Redis</code>会在后台异步进行快照操作,<code>不阻塞</code>快照同时还可以响应客户端请求,该触发方式会<code>fork</code>一个子进程由子进程复制持久化过程</p></li><li><p>最后一次备份时间戳获取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span>:<span class="string">6379&gt; lastsave</span></span><br><span class="line"><span class="attr">(integer)</span> <span class="string">1709176858</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[root@localhost</span> <span class="string">~]# date -d @1709176858</span></span><br><span class="line"><span class="attr">Wed</span> <span class="string">Feb 28 22:20:58 EST 2024</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/587cf3961b3a478ab6be7738e6f78925.png" alt=""></p></li></ul></li></ul></li></ul></li></ul><ul><li><p>哪些情况会触发<code>RDB</code>快照</p><ul><li>配置文件中默认的快照配置</li><li>手动<code>save/bgsave</code>命令</li><li>执行<code>flushall/flushdb</code>也会产生<code>dump.rdb</code>文件,但里面是空的,无意义</li><li>执行<code>shutdown</code>且没有设置开启<code>AOF</code>持久化</li><li>主从复制时,主节点自动触发</li></ul></li><li><p><code>RDB</code>的优缺点</p><ul><li>优势<ul><li>适合大规模的数据恢复,他的文件可以传输</li><li>可以按照业务定时备份</li><li>对数据完整性和一致性要求不高</li><li><code>RDB</code>文件在内存中的加载速度要比<code>AOF</code>快得多</li></ul></li><li>劣势<ul><li>在一定间隔时间做一次备份,所以如果<code>redis</code>意外<code>down</code>掉的话,就会丢失从当前至最近一次快照期间的数据,<code>快照之间的数据会丢失</code></li><li>内存数据的全部同步,如果数据太大会<code>导致 I/O</code>严重影响服务器性能,<code>RDB</code>依赖于主进程的<code>fork</code>,在更大的数据集中,这可能会导致服务请求的瞬间延迟。<code>fork</code>的时候内存中的数据被克隆了一份,大致<code>2</code>倍的膨胀性,需要考虑</li></ul></li></ul></li><li><p>文件检查</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis-check-rdb</span> <span class="string">/dump.rdb</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h5><ul><li><p>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>以<code>日志的形式来记录每个写操作</code>,将<code>Redis</code>执行过的所有写指令记录下来(读操作不记录),只许追加文件但不可以改写文件，<code>Redis</code>启动之初会读取该文件重新构建数据,换言之,<code>Redis</code>重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>默认情况下,<code>Redis</code>是没有开启<code>AOF</code>的,开启<code>AOF</code>功能需要配置<code>appendonly yes</code></p></div></li><li><p><code>AOF</code>保存的文件是<code>appendonly.aof</code>文件</p></li><li><p><code>AOF</code>持久化工作流程</p></li></ul><h4 id="端口开放"><a href="#端口开放" class="headerlink" title="端口开放"></a>端口开放</h4><ul><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">firewall-cmd</span> <span class="string">--add-port=8001/tcp --permanent</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="主从复制流程"><a href="#主从复制流程" class="headerlink" title="主从复制流程"></a>主从复制流程</h4><ul><li><code>一主二从</code>集群环境搭建</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap-源码</title>
      <link href="/2024/02/25/54a4a76d/"/>
      <url>/2024/02/25/54a4a76d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-源码"><a href="#HashMap-源码" class="headerlink" title="HashMap-源码"></a>HashMap-源码</h3><h4 id="HashMap的实现原理"><a href="#HashMap的实现原理" class="headerlink" title="HashMap的实现原理"></a>HashMap的实现原理</h4><ul><li>HashMap的数据结构: 底层使用<code>hash</code>表数据结构,即数组和链表或红黑树</li><li>当我们往<code>HashMap</code>中<code>put</code>元素时,利用<code>key</code>的<code>hashCode</code>重新<code>hash</code>计算出当前对象的元素在数组中的下标</li><li>存储时,如果出现<code>hash</code>值相同的<code>key</code>，此时有两种情况<ul><li>如果<code>key</code>相同,则覆盖原始值</li><li>如果<code>key</code>不同(出现冲突)，则将当前的<code>key-value</code>放入链表或红黑树中</li></ul></li><li>获取时,直接找到<code>hash</code>值对应的下标,在进一步判断<code>key</code>是否相同,从而找到对应值</li></ul><h4 id="HashMap的jdk1-7和1-8有什么区别"><a href="#HashMap的jdk1-7和1-8有什么区别" class="headerlink" title="HashMap的jdk1.7和1.8有什么区别"></a>HashMap的jdk1.7和1.8有什么区别</h4><ul><li>JDK1.8之前采用的是拉链法,<ul><li>拉链法：将链表和数组相结合,也就是说创建一个链表数组,数组中每一格就是一个链表,若遇到哈希冲突,则将冲突的值加到链表中即可</li><li>JDK1.8 在解决哈希冲突时有了较大的变化,当链表长度大于阈值(<code>默认为 8</code>)时并且数组长度达到<code>64</code>时,将链表转化为红黑树，以减少搜索时间,扩容<code>resize()</code>时,红黑树拆分成的树的节点数小于等于临界值<code>6</code>个，则退化成链表</li></ul></li></ul><h4 id="HashMap的put过程？"><a href="#HashMap的put过程？" class="headerlink" title="HashMap的put过程？"></a>HashMap的put过程？</h4><ul><li><p>判断键值对数组<code>table</code>是否为空或为<code>null</code>，否则执行<code>resize</code>进行扩容（初始化）</p></li><li><p>根据键值<code>key</code>计算<code>hash</code>值得到数组索引</p></li><li><p>判断<code>table[i]==null</code>,条件成立,直接新建节点添加</p></li><li><p>如果<code>table[i]==null</code>不成立</p><ul><li>判断<code>table[i]</code>的首个元素是否和<code>key</code>一样,如果相同直接覆盖<code>value</code></li><li>判断<code>table[i]</code>是否为<code>treeNode</code>,即<code>table[i]</code>是否为<code>红黑树</code>,如果是红黑树,则直接在树中插入键值对</li><li>遍历<code>table[i]</code>，链表的尾部插入数据,然后判断链表长度是否大于<code>8</code>,大于<code>8</code>的话吧链表转换为红黑树,在红黑树中执行插入操作,遍历过程中若发现<code>key</code>已经存在直接覆盖<code>value</code></li></ul></li><li><p>插入成功后,判断实际存在的键值对数量<code>size</code>是否超多了最大容量<code>threshold(数组长度 * 0.75)</code>，如果超过,进行扩容</p></li><li><p>蜗牛</p><ul><li><p>计算<code>key</code>的哈希码，根据<code>hash</code>码计算出桶位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断桶位是否为空,如果是空的,则直接加入,如果不为空,则拿着新的<code>key</code>和该桶位中已存在的每一个<code>key</code>比较（<code>equals方法比较内容</code>）</p></li><li><p>如果比较结果相等,则覆盖<code>value</code>，如果不相等则加入该桶位中</p></li><li><p>判断是否需要树话,树化的条件是: 桶位达到64个，且当前桶位中的链表上的元素个数超过8个</p><ul><li>链表过长</li><li>变成树就是二分法查找,提升查找效率</li></ul></li></ul></li></ul><h4 id="HashMap的容量为什么必须是2的次方数？"><a href="#HashMap的容量为什么必须是2的次方数？" class="headerlink" title="HashMap的容量为什么必须是2的次方数？"></a>HashMap的容量为什么必须是2的次方数？</h4><ul><li>计算索引时效率更高:如果是<code>2</code>的<code>n</code>次幂可以使用位与运算代替取模</li><li>扩容时重新计算索引效率更高:<code>hash &amp; oldCap == 0</code>的元素留在原来位置,否则新位置 = 旧位置 + oldCap</li></ul><h4 id="HashMap的扩容过程是怎样的？"><a href="#HashMap的扩容过程是怎样的？" class="headerlink" title="HashMap的扩容过程是怎样的？"></a>HashMap的扩容过程是怎样的？</h4><ul><li>在添加元素或初始化的时候需要调用<code>resize</code>方法进行扩容,第一次添加数据初始化数组长度为<code>16</code>，以后每次扩容都是达到了扩容阈值（<code>数组长度 * 0.75</code>）</li><li>每次扩容的时候,都是扩容之前容量的2倍</li><li>扩容之后,会新创建一个数组,需要把老数组中的数据挪动到新的数组中<ul><li>没有<code>hash</code>冲突的节点,则直接使用<code>e.hash &amp; (newCap -1)</code> 计算新数组的索引位置</li><li>如果是红黑树,走红黑树的添加</li><li>如果是链表,则需要遍历链表,可能需要拆分链表,判断<code>e.hash &amp; oldCap</code>是否为 <code>0</code>,该元素的位置要么停留在原始位置,要么移动到原始位置 + 增加的数组大小这个位置上</li></ul></li></ul><h4 id="HashMap1-8在什么情况下，会将一个链表进行树化？"><a href="#HashMap1-8在什么情况下，会将一个链表进行树化？" class="headerlink" title="HashMap1.8在什么情况下，会将一个链表进行树化？"></a>HashMap1.8在什么情况下，会将一个链表进行树化？</h4><p>在 JDK 1.8 中，HashMap 在以下情况下会将一个链表进行树化：</p><ul><li><strong>链表长度大于等于 8</strong>。当链表中的节点数达到或超过 8 时，HashMap 会将该链表转换为红黑树。这是因为链表的查询效率会随着节点数的增加而降低，而红黑树的查询效率则相对稳定。</li><li><strong>数组长度大于等于 64</strong>。只有当数组长度足够大时，树化操作才会带来明显的性能提升。如果数组长度较小，则树化操作的开销反而会降低整体性能。</li><li><strong>HashMap 的负载因子大于等于 0.75</strong>。负载因子是 HashMap 中实际存储的键值对数量与容量的比值。当负载因子超过 0.75 时，HashMap 会进行扩容。如果扩容后链表长度仍然大于等于 8，则会进行树化操作。</li></ul><p>具体来说，HashMap 在 put 操作时会检查链表长度是否满足树化条件。如果满足条件，则会将链表转换为红黑树。树化操作的具体步骤如下：</p><ol><li>将链表转换为双向链表。</li><li>从头到尾遍历链表，将每个节点插入到红黑树中。</li><li>维护红黑树的平衡性。</li></ol><p>树化操作可以有效提高 HashMap 的查询效率，但会降低插入和删除操作的效率。因此，在实际应用中需要根据具体情况进行权衡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>平滑加权轮询算法</title>
      <link href="/2024/02/25/6a99d3c/"/>
      <url>/2024/02/25/6a99d3c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="平滑加权轮询算法"><a href="#平滑加权轮询算法" class="headerlink" title="平滑加权轮询算法"></a>平滑加权轮询算法</h3><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li><p>假如现在有三台服务器<code>A(5)、B(1)、C(1)</code></p></li><li><p>三台服务器的动态权重<code>currentWeight: 0,0,0</code></p></li><li><p>分析</p><p><img src="https://img-blog.csdnimg.cn/direct/4d2bf54bf964455eaefa13b3c3d1186e.png" alt=""></p></li><li><p>代码实现</p><ul><li><p><code>Weight</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Weight</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>ServerIp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerIps</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; WEIGHT_LIST = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        WEIGHT_LIST.put(<span class="string">&quot;192.168.5.1&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        WEIGHT_LIST.put(<span class="string">&quot;192.168.5.2&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        WEIGHT_LIST.put(<span class="string">&quot;192.168.5.3&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>RoundBalance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightRoundRobbin</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Weight&gt; WEIGHT_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> totalWeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ServerIps.WEIGHT_LIST.forEach((key, value) -&gt; &#123;</span><br><span class="line">            WEIGHT_MAP.put(key, <span class="keyword">new</span> <span class="title class_">Weight</span>(key, value, <span class="number">0</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        totalWeight = ServerIps.WEIGHT_LIST.values().stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 连续调用 10 次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getServer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 所有的 ip 的 currentWeight 统一加上原始权重</span></span><br><span class="line">        <span class="keyword">for</span> (Weight weight : WEIGHT_MAP.values()) &#123;</span><br><span class="line">            weight.setCurrentWeight(weight.getWeight() + weight.getCurrentWeight());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出 currentWeight 最大值</span></span><br><span class="line">        <span class="type">Weight</span> <span class="variable">maxCurrentWeight</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Weight weight : WEIGHT_MAP.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxCurrentWeight == <span class="literal">null</span> || weight.getCurrentWeight() &gt; maxCurrentWeight.getCurrentWeight()) &#123;</span><br><span class="line">                maxCurrentWeight = weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 maxCurrentWeight 的 currentWeight 减去 totalWeight</span></span><br><span class="line">        maxCurrentWeight.setCurrentWeight(maxCurrentWeight.getCurrentWeight() - totalWeight);</span><br><span class="line">        <span class="comment">// 返回 maxCurrentWeight 的 ip</span></span><br><span class="line">        <span class="keyword">return</span> maxCurrentWeight.getIp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-面试题</title>
      <link href="/2024/02/24/c5d24821/"/>
      <url>/2024/02/24/c5d24821/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-面试题"><a href="#Java-面试题" class="headerlink" title="Java-面试题"></a>Java-面试题</h3><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><ul><li><p>案例</p><p><img src="https://img-blog.csdnimg.cn/direct/e4a4549902db417498c8e256697bd72d.png" alt=""></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>缓存穿透: 查询一个<code>不存在的数据</code>，<code>mysql</code>查询不到数据也不会直接写入缓存,就会导致每次请求都查询数据库</p></div></li></ul><h5 id="Redis中的5种基本类型有哪些？-应用场景分别是什么？"><a href="#Redis中的5种基本类型有哪些？-应用场景分别是什么？" class="headerlink" title="Redis中的5种基本类型有哪些？ 应用场景分别是什么？"></a>Redis中的5种基本类型有哪些？ 应用场景分别是什么？</h5><h5 id="什么是二进制不安全，什么是二进制安全，Redis是如何保证String类型是二进制安全的？"><a href="#什么是二进制不安全，什么是二进制安全，Redis是如何保证String类型是二进制安全的？" class="headerlink" title="什么是二进制不安全，什么是二进制安全，Redis是如何保证String类型是二进制安全的？"></a>什么是二进制不安全，什么是二进制安全，Redis是如何保证String类型是二进制安全的？</h5><h5 id="Redis是单线程的，为什么还那么快？"><a href="#Redis是单线程的，为什么还那么快？" class="headerlink" title="Redis是单线程的，为什么还那么快？"></a>Redis是单线程的，为什么还那么快？</h5><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul><li><p>谈谈你对<code>Nginx</code>的理解</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>是一个高性能的开源 Web 服务器，反向代理服务器和电子邮件（IMAP/POP3）代理服务器。</p></div><ul><li>可以做反向代理，集群+负载均衡<ul><li>负载均衡</li><li>集群的作用是什么?</li><li>集群的高可用功能是什么?</li></ul></li><li>正向代理和反向代理的区别</li><li>部署静态网站</li><li><p>可以做动静分离</p></li><li><p>平滑轮询加权算法</p></li><li>平滑轮询加权算法的优点</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2024/02/24/65b69107/"/>
      <url>/2024/02/24/65b69107/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p><code>nginx</code>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Nginx</code>是一个高性能的<code>HTTP(解决C10k的问题)</code>和反向代理服务器,也是一个<code>IMAP/POP3/SMTP</code>服务器</p></div></li><li><p><code>Nginx</code>的<code>web</code>优势</p><ul><li><code>IO</code>多路复用</li><li>时分多路复用</li><li>频分多路复用</li></ul></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><ul><li><p>环境准备</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># gcc-c++</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install -y gcc gcc-c++ autoconf automake make</span></span><br></pre></td></tr></table></figure></li><li><p>第三方依赖库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PCRE库: 用于解析正则表达式</span></span><br><span class="line"><span class="comment"># zlib-devel: zlib压缩 和 解压</span></span><br><span class="line"><span class="comment"># openssl openssl-devel 用于 http 安全传输也就是 https</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install -y  gzip zlib zlib-devel openssl openssl-devel pcre pcre-devel wget httpd-tools vim</span></span><br></pre></td></tr></table></figure></li><li><p>安装</p><p><img src="https://img-blog.csdnimg.cn/direct/ecf09d9616634b6496020296343b6a8c.png" alt=""></p></li></ul><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">-p 80:80 \</span></span><br><span class="line"><span class="string">--name nginx \</span></span><br><span class="line"><span class="string">  -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="string">  -v /opt/nginx/html:/usr/share/nginx/html \</span></span><br><span class="line"><span class="string">  nginx</span></span><br></pre></td></tr></table></figure></li><li><p>容器内的部署目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/usr/share/nginx/html</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h4><ul><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置那个用户可以运行 worker 进程,这里指定 nobody 用户,也就是所有用户</span></span><br><span class="line"><span class="attr">user</span> <span class="string">nobody;</span></span><br><span class="line"><span class="comment"># 配置 worker 进程的数目,通常设置为服务器 cpu 的数量或者 cpu 数量的 2倍</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">4;</span></span><br><span class="line"><span class="comment"># 配置日志级别： debug info notice warn error crit,默认是 error</span></span><br><span class="line"><span class="comment"># error_log logs/error.log</span></span><br><span class="line"><span class="comment"># error_log logs_error.log notice</span></span><br><span class="line"><span class="comment">#error_log logs_error.log info</span></span><br><span class="line"><span class="comment"># 配置进程 pid 文件</span></span><br><span class="line"><span class="attr">pid</span> <span class="string">logs/nginx.pid</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h4><ul><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">events</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment"># 配置每个 worker 进程的连接数上限</span></span><br><span class="line"><span class="comment"># nginx 支持的总连接数: worker_processes * worker_connection(进程数 * 连接数)</span></span><br><span class="line"><span class="attr">worker_connections</span> <span class="string">1024;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h4><ul><li><p>说明</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>http</code>块可以包含多个<code>server</code>块,每一个<code>server</code>块配置的都是一个虚拟主机,而一个<code>server</code>块中又可以包含多个<code>location</code>块,每一个<code>location</code>块都是一个虚拟主机中的一个资源路径,在<code>server</code>块以外的内容,是所有<code>server</code>的公共基础配置</p></div></li><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # include 用于引入 /mime.types 文件,nginx会在 nginx.conf 所在路径找该文件</span></span><br><span class="line"><span class="comment">    # 配置虚拟主机支持的数据类型,在 mime.types 文件中描述了很多数据类型</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line"><span class="comment">    # 如果是虚拟主机不能识别的数据类型,则直接使用二进制流传输,此时浏览器会提示下载</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"><span class="comment">    # 开启零拷贝,通俗将就是开启高效文件传输模式</span></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    # tcp_nopush     on;</span></span><br><span class="line"><span class="comment">    # HTTP 有一个 keepalive 模式,它告诉 webserver 在处理完一个请求保持这个 TCP 连接的打开状态,若接收到来自客户端的其他请求,服务端会利用这个未被关闭的连接,而不需要再另外建立一个连接, keepalive 在一段时间内保持打开状态,他们会在这段时间内占用资源,占用过多就会影响性能,Nginx 使用 keepalive_timeout来指定 keepalive 的超时时间,指定每个 TCP 连接最多可以保持多长时间, Nginx 的默认值是 75s,有些浏览器最多只保持 60s,所以可以设定为 60</span></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    # 使用 gzip 压缩响应数据,在响应数据较大的情况下,服务器会使用 gzip 方式压缩数据,并通过响应头 Content-Encoding 告诉浏览器使用 gzip 格式解压</span></span><br><span class="line"><span class="comment">    # gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    # &quot;/&quot; 表示通用匹配,当匹配请求无法匹配其他 location 时,就会匹配到该 location</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">        # root 用于转换请求路径中的 “/” 为 html,html是从 nginx 的安装路径开始找的</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html;</span></span><br><span class="line"><span class="comment">        # index 这个配置,只能用于 “/”这个通用路径</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html index.htm;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">error_page</span> <span class="string">500 502 503 504 /40x.html;</span></span><br><span class="line"><span class="comment">    # &quot;=&quot; 表示精确匹配</span></span><br><span class="line">    <span class="attr">location</span> = <span class="string">/50x.html &#123;</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    # 负载均衡</span></span><br><span class="line">    <span class="attr">upstream</span> <span class="string">www.foo.com &#123;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">ip:port;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">ip:port;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">xxx;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span>  <span class="string">htttp://www.foo.com;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>传统的文件拷贝</p><p><img src="https://img-blog.csdnimg.cn/direct/5cd93c22e515448585bacf5825b2313b.png" alt=""></p></li><li><p><code>sendfile</code>拷贝</p><p><img src="https://img-blog.csdnimg.cn/direct/1af11891d0084cc7a75c07febd377415.png" alt=""></p></li></ul><h4 id="Nginx-负载均衡的方式"><a href="#Nginx-负载均衡的方式" class="headerlink" title="Nginx-负载均衡的方式"></a>Nginx-负载均衡的方式</h4><ul><li><strong>轮询（Round Robin）</strong>：<ul><li>轮询策略按顺序将每个新的请求依次分配给服务器列表中的下一个服务器。这是最简单的负载均衡算法之一，适用于每台服务器具有相似处理能力和负载的情况。</li></ul></li><li><strong>最少连接（Least Connections）</strong>：<ul><li>最少连接策略将请求分配给当前具有最少连接数的服务器。这样可以确保将请求发送到当前最空闲的服务器上，有助于避免过载。</li></ul></li><li><strong>IP 哈希（IP Hash）</strong>：<ul><li>IP 哈希策略根据客户端 IP 地址将请求分配给特定的服务器。这样可以确保相同的客户端请求总是被发送到同一台服务器上，有助于保持一些状态相关的数据。</li></ul></li><li><strong>加权轮询（Weighted Round Robin）</strong>：<ul><li>加权轮询策略与轮询类似，但是为每个服务器分配了一个权重，权重越高的服务器会获得更多的请求。这样可以根据服务器的性能和资源分配不同的负载。</li></ul></li><li><strong>加权最少连接（Weighted Least Connections）</strong>：<ul><li>加权最少连接策略结合了最少连接和加权轮询策略的思想，根据服务器的权重和当前连接数来选择服务器。这样可以将负载更加均匀地分配到服务器上。</li></ul></li><li><strong>随机（Random）</strong>：<ul><li>随机策略通过随机选择一个服务器来处理每个请求。虽然简单，但是在某些情况下可能会导致负载不均匀。</li></ul></li><li><strong>URL 哈希（URL Hash）</strong>：<ul><li>URL 哈希策略根据请求的 URL 将请求分配给特定的服务器。这样可以确保相同的 URL 总是被发送到同一台服务器上，有助于缓存和提高命中率。</li></ul></li></ul><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><ul><li><p>配置</p><p>```properties<br>location / {<br>  proxy_pass <a href="http://backend_server">http://backend_server</a>;<br>}</p></li></ul><h4 id="负载均衡策略面试题"><a href="#负载均衡策略面试题" class="headerlink" title="负载均衡策略面试题"></a>负载均衡策略面试题</h4><ul><li><p>几种轮询策略</p></li><li><p>平滑加权轮询</p><p>```properties<br>A(5) B(1) C(1)<br>AABACAA<br>优点: 让权重较大的服务,负载不会那么集中,负载较为分散</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot问题整理</title>
      <link href="/2024/02/20/7a9c47ce/"/>
      <url>/2024/02/20/7a9c47ce/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="第一题-填空题"><a href="#第一题-填空题" class="headerlink" title="第一题. 填空题"></a>第一题. 填空题</h4><ol><li><p>Git中，用于创建分支的命令是（<code>git branch newBranch</code>）</p></li><li><p>Git中，用于合并分支的命令是（<code>git merge fix</code>）</p></li><li><p>事务的四大特性是（<code>原子性</code>）（<code>一致性</code>）（<code>隔离性</code>）（<code>持久性</code>）</p><ul><li>原子性：一个事务中,操作要么全部执行，要么都不执行</li><li>一致性：在事务的执行前后,数据在逻辑上保持一致</li><li>隔离性: 多个事务并发操作相同的数据时,一个事务对其他事务的影响,具体如何影响,取决于隔离级别</li><li>持久性: 一个事务一旦结束(提交或回滚),对数据库中的数据的影响会一直保存下去,任何设备故障都不会影响存储的数据</li></ul></li><li><p>Spring实例化bean的3种方式是</p><ul><li><p>构造器实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>静态工厂方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.PersonFactory&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">factory-method</span> <span class="attr">name</span>=<span class="string">&quot;createPerson&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactory</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title function_">createPerson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实例工厂方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.PersonFactory&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;personFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createPerson&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">createPerson</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 一个类的创建过程比较复杂,通过简单的 new</span></span><br><span class="line">     <span class="comment">// 工厂模式: </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Git</code>的三大区域是</p><ul><li>工作区： 工作区是用户进行代码编辑和修改的地方，也是Git管理的最小单元。工作区中的所有文件都可以被Git跟踪和管理</li><li>暂存区：暂存区是位于工作区和版本库之间的缓冲区。用户可以将工作区中的改动暂存到暂存区，然后再提交到版本库。暂存区可以帮助用户更好地组织和管理代码提交</li><li>版本库：版本库是Git用来存储代码历史记录的地方。版本库中的所有文件都是只读的，用户无法直接修改版本库中的文件</li></ul></li><li><p>Restful风格中，增删改查分别对应的请求方式是</p><ul><li>@PostMapping</li><li>@DeleteMapping</li><li>@PutMapping</li><li>@GetMapping</li></ul></li><li><p>Maven的默认生命周期的阶段是（<code>compiler</code>）（<code>test</code>）（<code>package</code>）（<code>Install</code>）</p></li><li><p>依赖注入常见的两种方式是</p><ul><li><p>构造器注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>set</code>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    person.setName(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    person.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>Springboot两种配置文件的格式分别是 </p><ul><li><p><strong>Properties</strong>：这是传统的配置文件格式，使用键值对的形式来存储配置信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置服务器端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br></pre></td></tr></table></figure></li><li><p><strong>YAML</strong>：这是一种 YAML 格式的配置文件，使用缩进和冒号来表示键值对。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 配置服务器端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库连接</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><code>SpringBoot</code>应用的启动类上必须添加的注解是（<code>@SpringBootApplication</code>）</li></ol><h4 id="二．简答"><a href="#二．简答" class="headerlink" title="二．简答"></a>二．简答</h4><ol><li>简述<code>@Autowired</code>和<code>@Resources</code>的区别</li></ol><ul><li><code>@Autowired</code>是 <code>spring</code> 提供的，<code>@Resource</code> 是 <code>jdk</code> 内置的</li><li><code>@Autowired</code> 是优先按照类型查找<ul><li>找到一个就装配</li><li>找不到，就看 <code>required</code> 属性的取值，<code>true</code> 就报错，<code>false</code> 就不报错，而是注入<code>null</code></li><li>找到多个：就按照名称找，找到就注入，找不到就报错</li></ul></li><li><code>@Resource</code> 优先按照名称找<ul><li>找到一个就装配</li><li>找不到就报错</li><li>找到多个也报错</li></ul></li></ul><ol><li><p>你对<code>Spring IOC</code>的理解？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IOC是控制反转,就是把实例化对象的权利交给容器,而不是我们自己在程序中实例化</span><br><span class="line">IOC主要的作用就是解耦</span><br><span class="line">   举个例子: 控制器和业务层例子,UserServlet中使用UserService接口,不依赖于 UserService的实现类,然后当我们替换下层UserService实现的时候,只需要修改Spring配置,而不需要我们修改UserServlet的代码,这就是完全解耦</span><br></pre></td></tr></table></figure></li><li><p>脏读、幻读、不可重复读分别是什么？</p><ul><li><p>脏读</p><blockquote><p> 当一个事务读取到另一个事务尚未提交的数据时，发生了脏读，如果另一个事务回滚，读取到的数据就是无效的</p></blockquote></li><li><p>幻读</p><blockquote><p> 当一个事务在读取某个范围内的数据时，另一个事务在该范围内插入了新的数据，导致第一个事务的读取结果发生了变化，就发生了幻读</p></blockquote></li><li><p>不可重复读</p><blockquote><p> 当一个事务在读取某个数据后，另一个事务修改了该数据，导致第一个事务再次读取时得到不同的结果，就发生了不可重复读</p></blockquote></li></ul></li><li><p>简述SpringMVC的工作流程？</p><ol><li><p>用户发起请求 <code>login.do</code></p></li><li><p><code>DispatcherServlet</code> 接受请求 <code>login.do</code>, 把请求转交给处理器映射器</p><blockquote><p>处理器映射器: <code>springmvc</code> 框架中的一种对象，框架把实现了 <code>HandlerMapping</code> 接口的类叫做映射器</p><p>处理器映射器的作用：根据请求，从<code>springmvc</code>容器对象中获取处理器对象</p></blockquote></li><li><p><code>DispatcherServlet</code> 把 <code>2</code> 中的 <code>HandlerExecutionChain</code> 中的处理器对象交给了处理器适配器对象</p><blockquote><p>处理器适配器: <code>springmvc</code>框架中的对象，需要实现 <code>HandlerAdapter</code> 接口</p><p>处理器适配器的作用：执行・处理器方法 (<code>调用 Controller.doLogin(),得到返回值 ModelAndView</code>)</p></blockquote></li><li><p><code>DispatcherServlet</code> 把 <code>3</code> 中获取的 <code>ModelAndView</code> 交给了视图解析器对象</p><blockquote><p>视图解析器: <code>springmvc</code> 中的对象，需要实现 <code>ViewResoler</code> 接口</p><p>视图解析器的作用：组成视图完整路径，使用前缀，后缀，并创建 view 对象</p><p><code>View</code> 是一个接口，表示视图的，在框架中 <code>jsp，html</code> 不是 <code>string</code> 表示，而是使用 <code>View</code> 和他的实现类表示视图</p><p><code>InternalResourceView</code>: 视图类，表示 <code>jsp</code> 文件，视图解析器会创建 <code>InternalResourceView</code> 类对象，这个对象的里面，有一个属性 url=<code>/WEB-INF/view/show.jsp</code></p></blockquote></li><li><p><code>DispatcherServlet</code> 把 <code>4</code> 步骤中创建的 <code>View</code> 对象获取到，调用 <code>View</code> 类自己的方法，把 <code>Model</code> 数据放入到 <code>request</code> 作用域</p><p><img src="https://img-blog.csdnimg.cn/direct/bb611b2832df428dbbfabbcf1c31446a.png" alt=""></p></li></ol></li></ol><ul><li><p>为什么要分为三部分</p><blockquote><p>单一职责</p></blockquote></li></ul><ol><li><p>简述SpringBoot自动配置的原理？</p><ul><li>在<code>Spring Boot</code>项目中的引导类上有一个注解<code>@SpringBootApplication</code>,这个注解是对三个注解的封装,分别是<ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul></li><li>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解,该注解通过<code>@Import</code>注解导入对应的配置选择器，内部就是读取了该项目和该项目引用的<code>jar</code>包的<code>classpath</code>路径下<code>META-INF/spring.factories</code>文件中的所配置的类的全类名,在这些配置类中所定义的<code>Bean</code>会根据条件注解<code>所指定的条件来决定</code>是否需要将其导入到<code>Spring</code>容器中</li><li>条件判断会有向<code>@ConditionalOnClass</code>这样的注解,判断是否有对应的<code>class</code>文件,如果有则加载该类,把这个配置类的所有<code>Bean</code>放入<code>spring</code>容器中使用</li></ul></li><li><p>你知道的SpringBoot注解？至少写5个</p><p><strong>1. @SpringBootApplication:</strong></p><ul><li>是 Spring Boot 的核心注解，用于开启 Spring Boot 自动配置。</li><li>该注解组合了 <code>@Configuration</code>, <code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 三个注解。</li><li>可以通过 <code>@SpringBootApplication(exclude = &#123;…&#125;)</code> 来排除自动配置的类。</li></ul><p><strong>2. @EnableAutoConfiguration:</strong></p><ul><li>启用 Spring Boot 的自动配置功能，会自动根据类路径中的 jar 包来配置 Spring 容器。</li><li>可以通过 <code>@EnableAutoConfiguration(exclude = &#123;…&#125;)</code> 来排除自动配置的类。</li></ul><p><strong>3. @ComponentScan:</strong></p><ul><li>用于扫描指定包路径下的类，并将其注册到 Spring 容器中。</li><li>可以通过 <code>@ComponentScan(basePackages = &#123;…&#125;)</code> 来指定扫描的包路径。</li></ul><p><strong>4. @ConfigurationProperties:</strong></p><ul><li>用于将外部配置文件中的属性绑定到 Java bean 的属性上。</li><li>可以通过 <code>@ConfigurationProperties(prefix = &quot;…&quot;)</code> 来指定属性的前缀。</li></ul><p><strong>5. @ConditionalOnProperty:</strong></p><ul><li>根据指定的条件判断是否加载该类或方法。</li><li>可以通过 <code>@ConditionalOnProperty(name = &quot;…&quot;, havingValue = &quot;…&quot;)</code> 来指定条件。</li></ul><p><strong>6. @ConditionalOnBean:</strong></p><ul><li>根据指定的 bean 是否存在来判断是否加载该类或方法。</li><li>可以通过 <code>@ConditionalOnBean(type = &#123;…&#125;)</code> 来指定 bean 的类型。</li></ul><p><strong>7. @ConditionalOnClass:</strong></p><ul><li>根据指定的类是否存在来判断是否加载该类或方法。</li><li>可以通过 <code>@ConditionalOnClass(name = &quot;…&quot;)</code> 来指定类的名称。</li></ul><p><strong>8. @ConditionalOnMissingBean:</strong></p><ul><li>根据指定的 bean 是否不存在来判断是否加载该类或方法。</li><li>可以通过 <code>@ConditionalOnMissingBean(type = &#123;…&#125;)</code> 来指定 bean 的类型。</li></ul></li></ol><ol><li><p>JDK动态代理和CGLIB动态代理的区别？</p><blockquote><p>在java的动态代理机制中，有两个重要的类或接口，一个是 <code>InvocationHandler</code>(Interface)、另一个则是 <code>Proxy</code>(Class)，这一个类和接口是实现我们动态代理所必须用到的。</p><p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。</p><p>InvocationHandler这个接口的唯一一个方法 invoke 方法：</p><p>个方法一共接受三个参数，那么这三个参数分别代表如下：</p><ul><li><strong>proxy</strong>:指代JDK动态生成的最终代理对象</li><li><strong>method</strong>:指代的是我们所要调用真实对象的某个方法的Method对象</li><li><strong>args</strong>:指代的是调用真实对象某个方法时接受的参数</li></ul></blockquote><p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是newProxyInstance 这个方法</p><p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：</p><ul><li><strong>loader</strong>：ClassLoader对象，定义了由哪个ClassLoader来对生成的代理对象进行加载，即代理类的类加载器。</li><li><strong>interfaces</strong>：Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了。</li><li><strong>Handler</strong>：InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上。</li></ul></li></ol><p>三、编程题：定义一个静态方法，接收一个字符串，判断其中的小括号是否是配对的</p><p>比如：<code>(1+2)(abc)</code>的小括号就是配对的， )(1+2+3)(qwe)(的小括号是不配对的，(1+2)(a+b的小括号也是不配对的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkParentheses</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 右括号多于左括号</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>; <span class="comment">// 如果计数器为零，说明所有左括号都有匹配的右括号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">testString</span> <span class="operator">=</span> <span class="string">&quot;((()))&quot;</span>; <span class="comment">// 这是一个匹配的字符串</span></span><br><span class="line">        System.out.println(checkParentheses(testString));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2024/01/28/7d2eec83/"/>
      <url>/2024/01/28/7d2eec83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h3><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><h5 id="权限管理的概念"><a href="#权限管理的概念" class="headerlink" title="权限管理的概念"></a>权限管理的概念</h5><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>基本上涉及到用户参与的系统都要进行权限管理,权限管理属于系统安全的范畴,权限管理实现<code>对用户访问系统的控制</code>、按照<code>安全规则</code>或者<code>安全策略</code>控制用户<code>可以访问而且只能访问自己被授权的资源</code></p></div></li></ul><h5 id="认证概念"><a href="#认证概念" class="headerlink" title="认证概念"></a>认证概念</h5><ul><li><p>认证</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>身份认证</code>,就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令,看其是否与系统中存储的该用户的用户名和口令是否一致,来判断用户身份是否正确。</p></div></li></ul><h5 id="授权概念"><a href="#授权概念" class="headerlink" title="授权概念"></a>授权概念</h5><ul><li><p>授权</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>授权</code>，即访问控制，控制谁能访问哪些资源。主要进行身份认证后需要分配权限可访问系统的资源，对于某些资源没有权限是无法访问的</p></div></li></ul><h4 id="SpringSecurity-整体架构"><a href="#SpringSecurity-整体架构" class="headerlink" title="SpringSecurity-整体架构"></a>SpringSecurity-整体架构</h4><ul><li><p>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring Security</code>作为<code>Spring</code>家族中的一员,在和<code>Spring</code>家族的其他成员如<code>Spring Boot、Spring Cloud</code>等进行整合时,具有其他框架无可比拟的优势m同时对<code>OAuth2</code>有着良好的支持,再加上<code>Spring Cloud</code>对<code>Spring Security</code>的不断加持，让<code>Spring Security</code>不知不觉中成为微服务项目的首选安全管理方案</p></div></li><li><p>架构概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>Spring Security</code>的架构设计中,认证<code>Authentication</code>和授权<code>Authorization</code>是分开的,无论使用什么样的认证方式。都不会影响授权,这是两个独立的存在，这种独立带来的好处之一,就是可以非常方便的整合一些外部的解决方案</p></div></li><li><p>模型</p><p><img src="https://img-blog.csdnimg.cn/direct/934b45bc23ea4ab9ab559862ffa6a69a.png" alt=""></p></li></ul><ul><li><p>认证</p><ul><li><p><code>AuthenticationManager</code></p><ul><li><p>在<code>Spring Security</code>中认证是由<code>AuthenticationManager</code>接口来负责的,接口定义为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">    Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回<code>Authentication</code>表示认证成功</p></li><li><p>返回<code>AuthenticationException</code>异常,表示<code>认证失败</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>AuthenticationManager</code>主要实现类为<code>ProviderManager</code>，在<code>ProviderManager</code>中管理了众多了<code>AuthenticationProvider</code>用来实现多种认证方式,这些<code>AuthenticationProvider</code>都是由<code>ProviderManager</code>进行统一管理的</p></div></li></ul></li></ul></li><li><p><code>Authentication</code></p><ul><li><p>认证以及认证成功的信息主要是由<code>Authentication</code>的实现类进行保存的,其接口定义为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户被授予的权限集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户在认证过程中提供的凭据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 凭据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取与认证请求相关的额外细节信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 细节信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取经过认证的主体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否已认证成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否已认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户的认证状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isAuthenticated 是否已认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 参数不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><code>SecurityContextHolder</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SecurityContextHolder</code>用来获取登录之后用户信息,在<code>Spring Security</code>会将登录用户数据保存在<code>session</code>中,但是，为了使用方便,<code>Spring Security</code>在此基础上还做了一些改进,其中最主要的一个变化就是线程绑定，当用户登录成功后,<code>Spring Security</code>会将登录用户信息保存到<code>SecurityContextHolder</code>中。<code>SecurityContextHolder</code>中的数据会默认是通过<code>ThreadLocal</code>来实现的,使用<code>ThreadLocal</code>创建的变量只能被当前线程访问,不能被其他线程访问和修改，也就是用户数据和线程绑定在一起,等登录请求处理完毕后,<code>Spring Security</code>会将<code>SecurityContextHolder</code>中的数据拿出来保存到<code>Session</code>中,同时将<code>SecurityContextHolder</code>中的数据清空,以后每当有请求到来时,<code>Spring Security</code>就会先从<code>Session</code>中取出用户登录数据,保存到<code>SecurityContextHolder</code>中,方便在该请求的后续处理法过程中使用,同时在请求结束时将<code>SecurityContextHolder</code>中的数据清空,这一策略非常方便用户在<code>Controller、Service</code>层以及任何代码中获取当前的登录用户数据</p></div></li></ul><ul><li><p>授权</p><ul><li><p><code>AccesssDecisionManager</code></p><ul><li><code>AccesssDecisionManager(访问决策管理器)</code>,用来决定此次请求访问是否被允许</li></ul></li><li><p><code>AccessDecisionVoter</code></p><ul><li><p><code>AccessDecisionVoter(访问决定投票器)</code>,投票器会检查用户是否具备应有的角色,进而投出赞成、反对或者弃权票</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionVoter</span>&lt;S&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">ACCESS_GRANTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">ACCESS_ABSTAIN</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">ACCESS_DENIED</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">vote</span><span class="params">(Authentication authentication, S object, Collection&lt;ConfigAttribute&gt; attributes)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ConfigAttribute</code></p><ul><li><code>ConfigAttribute</code>用来保存授权时的角色信息</li></ul></li></ul></li></ul><h4 id="自定义认证"><a href="#自定义认证" class="headerlink" title="自定义认证"></a>自定义认证</h4><ul><li><p>自定义资源权限规则</p><ul><li><p>公共资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放行白名单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] WHITELIST = &#123;</span><br><span class="line">        <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/swagger-resources&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>受保护资源</p><blockquote><p>除去放行资源的白名单外的资源全部为受保护资源</p></blockquote></li><li><p>访问流程分析</p><p><img src="https://img-blog.csdnimg.cn/direct/19064309db664f81bc05a33fa004c2b3.png" alt="分析"></p><ul><li>说明<ul><li>用户发起请求<ul><li>公共资源可以直接进行匿名访问(<code>匿名: 不需要登陆直接被访问</code>)</li><li>受限资源,必须经过登录认证成功后才可以访问</li></ul></li></ul></li></ul></li></ul></li><li><p>自定义登录成功处理</p><ul><li><p>前后端分离</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>前后端分离时,只需要给前端返回一个<code>JSON</code>通知登录成功还是失败</p></div></li><li><p>统一结果返回处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.demosecurity.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultVO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResultVO</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultVO&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        ResultVO&lt;T&gt; resultVO = <span class="keyword">new</span> <span class="title class_">ResultVO</span>&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">200</span>);</span><br><span class="line">        resultVO.setMessage(message);</span><br><span class="line">        resultVO.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultVO&lt;T&gt; <span class="title function_">fail</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        ResultVO&lt;T&gt; resultVO = <span class="keyword">new</span> <span class="title class_">ResultVO</span>&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">500</span>);</span><br><span class="line">        resultVO.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>响应工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.demosecurity.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 响应工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">responseJson</span><span class="params">(HttpServletResponse response, ResultVO resultVO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 将对象转换为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(resultVO);</span><br><span class="line">        <span class="comment">// 获取PrintWriter对象</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 将json字符串写入PrintWriter对象</span></span><br><span class="line">        printWriter.write(json);</span><br><span class="line">        <span class="comment">// 刷新PrintWriter对象</span></span><br><span class="line">        printWriter.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义成功之后的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.demosecurity.auth;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义成功之后的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ResultVO</span> <span class="variable">success</span> <span class="operator">=</span> ResultVO.success(<span class="string">&quot;进入认证成功处理方法的回调!&quot;</span>, authentication);</span><br><span class="line">            ResponseUtils.responseJson(response, success);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义认证失败之后的处理回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.demosecurity.auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ResultVO</span> <span class="variable">error</span> <span class="operator">=</span> ResultVO.fail(exception.getMessage());</span><br><span class="line">            ResponseUtils.responseJson(response, error);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.demosecurity.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.security.demosecurity.auth.MyAuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> com.example.security.demosecurity.auth.MyAuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> com.example.security.demosecurity.auth.MyLogoutSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="comment">// TODO 此包下的 CorsConfigurationSource</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableWebSecurity</span>: SpringSecurity 的配置类 开启 SpringSecurity【自带大量过滤器链: 责任链模式】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JiaPeiSecurityC</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放行白名单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] WHITELIST = &#123;</span><br><span class="line">            <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/swagger-resources&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests((authorizeRequests) -&gt;  <span class="comment">// 在这个后面开始配置 URL 相关的【URL访问权限控制相关的】</span></span><br><span class="line">                        authorizeRequests</span><br><span class="line">                                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()  <span class="comment">// permitAll: 授予所有权限【匿名可以访问的、不用登录就可以访问】</span></span><br><span class="line">                                .anyRequest() <span class="comment">// 任何的请求</span></span><br><span class="line">                                .authenticated()  <span class="comment">// 需要认证【登录】后才能访问</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        http.formLogin((formLogin) -&gt;</span><br><span class="line">                        formLogin.loginProcessingUrl(<span class="string">&quot;/login&quot;</span>).permitAll() <span class="comment">// 登录接口可以匿名访问</span></span><br><span class="line">                                .successHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationSuccessHandler</span>()) <span class="comment">// 登录成功后的处理回调</span></span><br><span class="line">                                .failureHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationFailureHandler</span>()) <span class="comment">// 登录失败后的处理回调</span></span><br><span class="line">                <span class="comment">// .defaultSuccessUrl(&quot;/index&quot;) // 登录成功访问 /index 页面</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        http.logout(logout -&gt;</span><br><span class="line">                logout</span><br><span class="line">                        .logoutUrl(<span class="string">&quot;/logout&quot;</span>).permitAll() <span class="comment">// 退出登录接口可以匿名访问</span></span><br><span class="line">                        .logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyLogoutSuccessHandler</span>())</span><br><span class="line">                        .deleteCookies(<span class="string">&quot;JSESSIONID&quot;</span>)</span><br><span class="line">                        .invalidateHttpSession(<span class="literal">true</span>) <span class="comment">// session 失效</span></span><br><span class="line">                        .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)); <span class="comment">// 退出登录后的访问地址</span></span><br><span class="line"></span><br><span class="line">        http.csrf((csrf) -&gt; csrf.disable()); <span class="comment">// 关闭跨站漏洞攻击防护</span></span><br><span class="line"></span><br><span class="line">        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource())); <span class="comment">// 跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(); <span class="comment">// 新建一个跨域配置源</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>(); <span class="comment">// 新建一个跨域配置</span></span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 浏览器是否应当发送凭证信息，如cookie。</span></span><br><span class="line">        configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求方法,*表示允许所有方法</span></span><br><span class="line">        configuration.setAllowedHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求头,*表示允许所有头</span></span><br><span class="line">        configuration.setMaxAge(Duration.ofHours(<span class="number">1</span>)); <span class="comment">// 预检请求的有效期，有效期内不必再次发送，默认是1800秒。</span></span><br><span class="line">        configuration.setAllowedOriginPatterns(Arrays.asList(<span class="string">&quot;*&quot;</span>));<span class="comment">// 允许的请求源</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration); <span class="comment">// 注册跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>vue3</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">RouterLink</span>, <span class="title class_">RouterView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> username = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> password = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">doLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&#x27;/api/login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: username.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">password</span>: password.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doLogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doLogout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过<code>yml</code>配置<code>security</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li><li><p>访问成功测试</p><p><img src="https://img-blog.csdnimg.cn/direct/be93a90a62b4457ebf1122110a480c21.png" alt=""></p></li><li><p>访问失败测试</p><p><img src="https://img-blog.csdnimg.cn/direct/5c6773c44eb34aa8b6dd98cd4137c845.png" alt=""></p></li></ul></li></ul><h4 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h4><ul><li><p>前后端分离注销成功之后就不需要页面跳转了,只需要将注销成功的信息返回前端即可,此时我们可以通过自定义<code>LogoutSuccessHandler</code>实现来返回内容注销之后的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">ResultVO</span> <span class="variable">result</span> <span class="operator">=</span> ResultVO.success(authentication);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResponseUtils.responseJson(response, result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/eabcec64648f4dd3bd80093693deab72.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doLogout</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/api/logout&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="登录后的用户数据获取方式"><a href="#登录后的用户数据获取方式" class="headerlink" title="登录后的用户数据获取方式"></a>登录后的用户数据获取方式</h4><ul><li><p>获取方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAfterController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">authentication</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取方式</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前登录的用户为: &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="UserDetailService"><a href="#UserDetailService" class="headerlink" title="UserDetailService"></a>UserDetailService</h4><ul><li><p>关系图</p><p><img src="https://img-blog.csdnimg.cn/direct/36698d5954b649fdb92df9bfcb9551cb.png" alt=""></p></li><li><p>通过源码分析得知<code>UserDetailService</code>是顶层父接口,接口中<code>loadUserByUsername</code>方法是用来在认证时进行用户名认证方法,默认实现使用的是<code>内存实现</code>,如果想要修改数据库实现,我们只需要定义<code>UserDetailService</code>实现,最终返回<code>UserDetails</code>实例即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/41dba16d0b13481f8eff9f2dbbec433f.png" alt=""></p></li></ul><h4 id="自定义数据源认证"><a href="#自定义数据源认证" class="headerlink" title="自定义数据源认证"></a>自定义数据源认证</h4><ul><li><p>自定义数据源认证流程分析</p><p><img src="https://img-blog.csdnimg.cn/direct/b39df33d3d7542d9a37030e427f2e91e.png" alt=""></p></li></ul><ul><li><p>流程描述</p><ol><li><p>发起认证请求,请求中携带用户名、密码、该请求会被<code>UsernamePasswordAuthenticationFilter</code>拦截</p><p><img src="https://img-blog.csdnimg.cn/direct/f0b958235ad84d2bb74915aaea60bfb7.gif" alt=""></p></li><li><p>在<code>UsernamePasswordAuthenticationFilter</code>的<code>attemptAuthentication</code>方法中将请求中的用户名和密码,封装为<code>Authentication</code>对象,并交给<code>AuthenticationManager</code>进行认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obtainUsername(request);</span><br><span class="line">    username = (username != <span class="literal">null</span>) ? username.trim() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> obtainPassword(request);</span><br><span class="line">    password = (password != <span class="literal">null</span>) ? password : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class="line">            password);</span><br><span class="line">    <span class="comment">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class="line">    setDetails(request, authRequest);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>认证成功，将认证信息存储到<code>SecurityContextHolder</code>以及调用记住我等，并回调<code>AuthenticationSuccessHandler</code>处理</p></li><li><p>认证失败,清除<code>SecurityContextHolder</code>以及<code>记住我</code>中的信息,回调<code>AuthenticationFailureHandler</code>处理</p></li></ol></li><li><p>实现数据源认证</p><ul><li><p>创建自己项目的<code>user</code>实体</p></li><li><p>创建<code>Security</code>的<code>user</code>实体</p></li><li><p>修改配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="AuthenticationManager、ProviderManager、AuthenticationProvider三者的关系"><a href="#AuthenticationManager、ProviderManager、AuthenticationProvider三者的关系" class="headerlink" title="AuthenticationManager、ProviderManager、AuthenticationProvider三者的关系"></a>AuthenticationManager、ProviderManager、AuthenticationProvider三者的关系</h4><h5 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h5><ul><li><p><code>AuthenticationManager</code>是一个认证管理器,它定义了<code>Spring Security</code>过滤器要执行认证操作</p></li><li><p>关系查看</p><p><img src="https://img-blog.csdnimg.cn/direct/de56c77283254e91b6d6156f8aa6f59f.png" alt="AuthenticationManager被ProviderManager实现"></p></li></ul><h5 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h5><ul><li><code>ProviderManager</code>是<code>AuthenticationManager</code>接口的实现类<code>SpringSecurity</code>，认证时默认使用的就是<code>ProviderManager</code></li></ul><h5 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h5><ul><li><p><code>AuthenticationProvider</code>就是针对不同的身份类型执行的具体的身份认证</p></li><li><p>关系</p><p><img src="https://img-blog.csdnimg.cn/direct/0821baad595144d183f394995386f615.png" alt=""></p></li><li><p>说明</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>Spring Security</code>中，允许系统同时支持多种不同的认证方式，例如同时支持用户名/密码认证、<code>RememberMe</code>认证、手机号码动态认证等，而不同的认证方式对应了不同的<code>AuthenticationProvider</code>，所以一个完整的认证流程可能由多个<code>AuthenticationProvider</code>来提供。多个<code>AuthenticationProvider</code>将组成一个列表，这个列表将由<code>ProviderManager</code>代理。换句话说，在<code>ProviderManager</code>中存在一个<code>AuthenticationProvider</code> 列表，在<code>Provider Manager</code>中遍历列表中的每一个<code>AuthenticationProvider</code>去执行身份认证，最终得到认证结果。</p><p><code>ProviderManager</code>本身也可以再配置一个<code>AuthenticationManager</code> 作为<code>parent</code>，这样当<code>ProviderManager</code>认证失败之后，就可以进入到 <code>parent</code>中再次进行认证。理论上来说,<code>ProviderManager</code>的 <code>parent</code>可以是任意类型的<code>AuthenticationManager</code>，但是通常都是由<code>ProviderManager</code> 来扮演<code>parent</code>的角色，也就是 <code>ProviderManager</code>是<code>ProviderManager</code>的<code>parent</code>。<br><code>ProviderManager</code>本身也可以有多个，多个<code>ProviderManager</code>共用同一个 parent。有时,个应用程序有受保护资源的逻辑组 (例如，所有符合路径模式的网络资源，如/api/**)，每个组可以有自己的专用<code>AuthenticationManager</code>。通常，每个组都是一个<code>ProviderManager</code>,它们共享一个父级。然后，父级是一种 全局 资源，作为所有提供者的后备资源。<br>根据上面的介绍，我们绘出新的<code>AuthenticationManager、ProvideManager 和AuthentictionProvider</code> 关系</p></div><p><img src="https://img-blog.csdnimg.cn/direct/72f2510c65da45fabfffe76e6478809e.png" alt=""></p></li></ul><h4 id="配置全局-AuthenticationManager"><a href="#配置全局-AuthenticationManager" class="headerlink" title="配置全局 AuthenticationManager"></a>配置全局 AuthenticationManager</h4><h5 id="默认的全局AuthenticationManager"><a href="#默认的全局AuthenticationManager" class="headerlink" title="默认的全局AuthenticationManager"></a>默认的全局AuthenticationManager</h5><ul><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Boot 对 Spring Security 默认配置中,在工厂中默认创建 AuthenticationManager</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialze</span><span class="params">(AuthenticationManagerBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">InMemoryUserDetailsManager</span> <span class="variable">inMemoryUserDetailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">    inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">&quot;aa&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">    builder.userDetailsService(inMemoryUserDetailsManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8a802e61f75649d18f47fefd459810c7.png" alt=""></p></li></ul><h5 id="自定义全局AuthenticationManager"><a href="#自定义全局AuthenticationManager" class="headerlink" title="自定义全局AuthenticationManager"></a>自定义全局AuthenticationManager</h5><ul><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(PasswordEncoder passwordEncoder)</span> &#123;</span><br><span class="line">    <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">    provider.setUserDetailsService(myUserDetailsService);</span><br><span class="line">    <span class="comment">// 关联使用的密码编码器</span></span><br><span class="line">    provider.setPasswordEncoder(passwordEncoder);</span><br><span class="line">    <span class="comment">// 将 provider 放置进 AuthenticationManager 中</span></span><br><span class="line">    <span class="type">ProviderManager</span> <span class="variable">providerManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(provider);</span><br><span class="line">    <span class="keyword">return</span> providerManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="WebSecurity和HttpSecurity"><a href="#WebSecurity和HttpSecurity" class="headerlink" title="WebSecurity和HttpSecurity"></a>WebSecurity和HttpSecurity</h4><ul><li><p><code>5.7</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置请求那些资源时不需要做认证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    web.ignoring().mvcMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/image/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>5.7+</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WHITELIST 自定义的一个字符串数组,放置放行资源</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (web) -&gt; web.ignoring().antMatchers(WHITELIST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WebSecurity</code>: 在这个类里定义了一个<code>securityFilterChainBuilders</code> 集合，可以同时管理多个<code>SecurityFilterChain</code> 过滤器链，当<code>WebSecurity</code> 在执行时，会构建出一个名为<code>springSecurityFilterChain</code> 的<code>Spring BeanFilterChainProxy</code> 代理类，他的作用是定义那些请求客户忽略安全控制，那些请求必须接受安全控制，以及在合适的时候<code>清除 SecurityContext</code> 以避免内存泄漏，同时也可以用来<code>定义请求防火墙和请求拒绝处理器</code>,也可以在这里开启<code>Spring Security</code> 的<code>Debug</code> 模式</p></li><li><p><code>HttpSecurity</code>: <code>HttpSecurity</code> 用来构建包含一系列的过滤器链<code>SecurityFilterChain</code>，平常我们的配置就是围绕这个<code>SecurityFilterChain</code> 进行</p></li></ul><h4 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h4><ul><li><p>原理图</p><p><img src="https://img-blog.csdnimg.cn/514d2531390743708345f959c010fe36.png" alt=""></p></li></ul><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/captcha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVO&lt;String&gt; <span class="title function_">captcha</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SpecCaptcha</span> <span class="variable">specCaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpecCaptcha</span>(<span class="number">130</span>, <span class="number">48</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">verCode</span> <span class="operator">=</span> specCaptcha.text().toLowerCase();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 存入redis并设置过期时间为30分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;verCode&quot;</span>,verCode,<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 将key和base64返回给前端</span></span><br><span class="line">        <span class="keyword">return</span> ResultVO.success(verCode, specCaptcha.toBase64());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><ul><li><p>相关接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向密码加密损耗性能,但是不提供优化,是因为是通过这种方式提升安全性的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">    <span class="comment">// 明文密码加密</span></span><br><span class="line">    String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>;</span><br><span class="line"><span class="comment">// 用来比较密码的方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class="line"><span class="comment">// 用来给密码进行升级的方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> SpringSecurity6 密码加密方案升级未实现</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/43cdb0b504d44537a78e86fc91f9ec20.png" alt="实现类"></p></li></ul><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><ul><li><p><code>user</code>用户表</p></li><li><p><code>role</code>角色表</p></li><li><p><code>user_role</code>用户角色关联表</p></li><li><p><code>menu</code>菜单表(资源路径<code>/admin/**,/user/**</code>)</p></li><li><p><code>menu_role</code>菜单角色关联表</p></li></ul><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li><p>同源策略</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>两个<code>url</code>是否同源,取决于三个方面:<code>协议 + 域名 + 端口</code>都相同的<code>url</code>，就算做同源的</li><li>如果两个<code>url</code>不同源,则不会相互访问对方的资源</li><li>浏览器是遵守同源策略(<code>postman</code>等测试工具不用遵守同源策略)</li></ul></div></li><li><p><strong>Access-Control-Allow-Origin</strong></p><ul><li><code>Access-Control-Allow-Origin</code>响应头，用于指定哪个外域<code>url</code>可以访问当前服务的资源</li><li>比如：<code>Access-Control-Allow-Origin: http://www.star.com</code>表示只允许来自<code>www.star.com</code>的请求访问资源</li></ul></li><li><p><strong>Access-Control-Allow-Headers</strong></p><ul><li>默认情况下，<code>CORS</code>仅支持客户端向服务器发送<code>9</code>个请求头，如果客户端向服务器发送了额外的请求头信息，则需要在服务器端通过<code>Access-Control-Allow-Headers</code>对额外的请求头进行声明，否则请求会失败</li></ul></li><li><p><strong>Access-Control-Allow-Methods</strong></p><ul><li>默认情况下，<code>CORS</code>仅支持客户端发起<code>GET、POST、HEAD</code>请求，如果客户端通过<code>PUT、DELETE</code>等方式请求服务器的资源，则需要在服务器端通过<code>Access-Control-Allow-Methods</code>对额外的请求方式进行声明，否则请求会<code>失败</code></li></ul></li><li><p>简单请求</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>同时满足以下三个条件的请求，就是简单请求</p><ul><li>请求方式：<code>GET、POST、HEAD</code></li><li>请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width、Content-Type</code></li><li><code>Content-Type</code>的取值：<code>text/plain、multipart/form-data、application/x-www-form-urlencoded</code></li></ul></div></li><li><p>复杂请求，超过简单请求的就是复杂请求</p></li><li><p>预检请求</p><ul><li>预检请求出现的条件<ul><li>请求是一个<code>复杂请求</code></li><li>请求是一个<code>跨域请求</code></li></ul></li><li>预检请求的意义<ul><li>如果一个请求不被服务器允许跨域，而该请求仍然会产生副作用（比如数据入库，修改数据库数据等等），不被服务器允许跨域的请求，仅仅是限制浏览器无法读取服务器的响应数据，而该请求是仍然背会服务器正常处理的。</li><li>在浏览器与服务器正式通信之前，浏览器会先发送<code>OPTION</code>请求进行预检，以获知服务器是否允许跨域。只有得到服务器允许跨域的答复后，浏览器才会发送真正的（携带请求数据的）请求。以防止一个不被允许跨域的请求对服务器产生副作用。</li></ul></li></ul></li><li><p>跨域配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 开启跨域配置</span></span><br><span class="line">http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. login</span></span><br><span class="line">        http.authorizeHttpRequests((authorizeHttpRequests) -&gt;</span><br><span class="line">                authorizeHttpRequests</span><br><span class="line">                        <span class="comment">// 非普通请求(比如请求新增了自定义头部信息,比如Jwt头),会发送预检 Option 请求，这里直接让他通过</span></span><br><span class="line">                        .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll();</span><br><span class="line">                                   </span><br><span class="line"><span class="comment">// 3. CorsConfiguration</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(); <span class="comment">// 新建一个跨域配置源</span></span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>(); <span class="comment">// 新建一个跨域配置</span></span><br><span class="line">    configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 浏览器是否应当发送凭证信息，如cookie。</span></span><br><span class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求方法,*表示允许所有方法</span></span><br><span class="line">    configuration.setAllowedHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求头,*表示允许所有头</span></span><br><span class="line">    configuration.setMaxAge(Duration.ofHours(<span class="number">1</span>)); <span class="comment">// 预检请求的有效期，有效期内不必再次发送，默认是1800秒。</span></span><br><span class="line">    configuration.setAllowedOriginPatterns(Arrays.asList(<span class="string">&quot;*&quot;</span>));<span class="comment">// 允许的请求源</span></span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration); <span class="comment">// 注册跨域配置</span></span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/direct/10c7f7ff1eb042f4a98f179ed4c6a4c5.png" alt=""></p></li></ul><h4 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h4><ul><li><p><code>config</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableWebSecurity</span>: SpringSecurity 的配置类 开启 SpringSecurity【自带大量过滤器链: 责任链模式】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JiaPeiSecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 UserDetailsService 接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyUserDetailServiceImpl myUserDetailServiceImpl;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源: 提供给 remember-me(javax.sql.DataSource)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationEntryPoint myAuthenticationEntryPoint; <span class="comment">// 认证异常</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAccessDeniedHandler myAccessDeniedHandler; <span class="comment">// 授权异常</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/******************************** 基本配置 ****************************************/</span></span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests((authorizeRequests) -&gt;  <span class="comment">// 在这个后面开始配置 URL 相关的【URL访问权限控制相关的】</span></span><br><span class="line">                        authorizeRequests</span><br><span class="line">                                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/captcha&quot;</span>,<span class="string">&quot;/user/download&quot;</span>).permitAll()  <span class="comment">// permitAll: 授予所有权限【匿名可以访问的、不用登录就可以访问】</span></span><br><span class="line">                                .anyRequest() <span class="comment">// 任何的请求</span></span><br><span class="line">                                .authenticated()</span><br><span class="line">                        <span class="comment">// 需要认证【登录】后才能访问</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 表单配置 ****************************************/</span></span><br><span class="line">        http.formLogin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 退出登录配置 ****************************************/</span></span><br><span class="line">        http.logout(logout -&gt;</span><br><span class="line">                logout</span><br><span class="line">                        .logoutUrl(<span class="string">&quot;/logout&quot;</span>).permitAll() <span class="comment">// 退出登录接口可以匿名访问</span></span><br><span class="line">                        .logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyLogoutSuccessHandler</span>(redisTemplate))</span><br><span class="line">                        .deleteCookies(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">                        .invalidateHttpSession(<span class="literal">true</span>)); <span class="comment">// session 失效</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 记住我配置 ****************************************/</span></span><br><span class="line">        http.rememberMe(rememberMe -&gt;</span><br><span class="line">                rememberMe</span><br><span class="line">                        .rememberMeServices(rememberMeServices()) <span class="comment">// 设置前后端分离时自动登录使用那个rememberMeServices</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** csrf跨站请求配置 ****************************************/</span></span><br><span class="line">        http.csrf((csrf) -&gt; csrf.disable()); <span class="comment">// 关闭跨站漏洞攻击防护</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 跨域配置 ****************************************/</span></span><br><span class="line">        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource())); <span class="comment">// 跨域配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 自定义 JSON 登录配置 ****************************************/</span></span><br><span class="line">        http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******************************** 认证异常和授权异常 ****************************************/</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(myAuthenticationEntryPoint) <span class="comment">// 认证异常</span></span><br><span class="line">                .accessDeniedHandler(myAccessDeniedHandler); <span class="comment">// 授权异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WHITELIST 自定义的一个字符串数组,放置放行资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (web) -&gt; web.ignoring().antMatchers(WhiteListConstant.WHITELIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AuthenticationManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        provider.setUserDetailsService(myUserDetailServiceImpl);</span><br><span class="line">        <span class="comment">// 关联使用的密码编码器</span></span><br><span class="line">        provider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="comment">// 将 provider 放置进 AuthenticationManager 中</span></span><br><span class="line">        <span class="type">ProviderManager</span> <span class="variable">providerManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(provider);</span><br><span class="line">        <span class="keyword">return</span> providerManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into corsConfigurationSource......................&quot;</span>);</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(); <span class="comment">// 新建一个跨域配置源</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>(); <span class="comment">// 新建一个跨域配置</span></span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 浏览器是否应当发送凭证信息，如cookie。</span></span><br><span class="line">        configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求方法,*表示允许所有方法</span></span><br><span class="line">        configuration.setAllowedHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 允许的请求头,*表示允许所有头</span></span><br><span class="line">        configuration.setMaxAge(Duration.ofHours(<span class="number">1</span>)); <span class="comment">// 预检请求的有效期，有效期内不必再次发送，默认是1800秒。</span></span><br><span class="line">        configuration.setAllowedOriginPatterns(Arrays.asList(<span class="string">&quot;*&quot;</span>));<span class="comment">// 允许的请求源</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration); <span class="comment">// 注册跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginFilter <span class="title function_">loginFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into loginFilter......................&quot;</span>);</span><br><span class="line">        <span class="type">LoginFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.example.security.filter.LoginFilter(redisTemplate);</span><br><span class="line">        filter.setVerCodeParameter(<span class="string">&quot;verCode&quot;</span>);</span><br><span class="line">        filter.setUsernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        filter.setRememberMeParameter(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置认证管理器</span></span><br><span class="line">        filter.setAuthenticationManager(authenticationManager());</span><br><span class="line">        <span class="comment">// 设置登录 URL</span></span><br><span class="line">        filter.setFilterProcessesUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置认证成功时使用自定义 RememberMeServices</span></span><br><span class="line">        filter.setRememberMeServices(rememberMeServices());</span><br><span class="line">        <span class="comment">// 设置登录成功后和认证失败后处理</span></span><br><span class="line">        filter.setAuthenticationSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationSuccessHandler</span>(redisTemplate));</span><br><span class="line">        filter.setAuthenticationFailureHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationFailureHandler</span>());</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RememberMeServices <span class="title function_">rememberMeServices</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 手动创建表结构(内部: JdbcTokenRepositoryImpl 提供了表结构)</span></span><br><span class="line">        jdbcTokenRepository.setCreateTableOnStartup(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPersistentTokenBasedRememberMeServices</span>(UUID.randomUUID().toString(), myUserDetailServiceImpl, jdbcTokenRepository, redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Activiti-工作流引擎</title>
      <link href="/2024/01/21/4eb24b6c/"/>
      <url>/2024/01/21/4eb24b6c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Activiti-工作流引擎"><a href="#Activiti-工作流引擎" class="headerlink" title="Activiti-工作流引擎"></a>Activiti-工作流引擎</h3><h4 id="工作流概述"><a href="#工作流概述" class="headerlink" title="工作流概述"></a>工作流概述</h4><h5 id="工作流介绍"><a href="#工作流介绍" class="headerlink" title="工作流介绍"></a>工作流介绍</h5><ul><li><p>工作流</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>工作流(<code>Workflow</code>)，指业务过程的部分或整体在计算机应用环境下的自动化,是对工作流程及其各操作步骤之间业务规则的抽象、概括描述,在计算机中,工作流属于计算机支持的协同工作(<code>CSCW</code>)的一部分,后者是普遍的研究一个群体如何在计算机帮助下实现协同工作的</p><p>工作流主要解决的问题是:<code>为了实现某个业务目标,利用计算机在多个参与者之间按某种规则自动传递文档、信息或者任务</code></p></div></li></ul><h5 id="工作流应用场景"><a href="#工作流应用场景" class="headerlink" title="工作流应用场景"></a>工作流应用场景</h5><ul><li>行政管理中的各类申请: 请假申请、加班申请、出差申请等</li><li>客户服务类的各种处理: 退货处理、换货处理等</li><li>人事管理类的各种场景: 员工升职流程、岗位调配流程等</li></ul><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><ul><li><p>为了实现工作流的流程控制，通常是采用状态字段的方式来跟踪流程的变化情况,通过状态变化来控制不同的业务行为。比如以请假申请为例,工作流程分成了多个状态,不同状态对应不同的业务行为</p><p><img src="https://img-blog.csdnimg.cn/direct/423e411d742745d0b0c7b40ed9aa1a9f.jpeg" alt=""></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通过状态的变化,把请假申请投递给不同的人进行相同的业务处理。这种方式的好处是非常自然和简单的。但是这种方式存在一些问题,流程中的某一个人只能看到当前流程的某一部分,不能看到完整的流程,需要借助需求文档等其他工具,另一个问题,当流程发生变更时,此时需要整个流程发生变化</p></div></li></ul><h4 id="Activiti介绍"><a href="#Activiti介绍" class="headerlink" title="Activiti介绍"></a>Activiti介绍</h4><ul><li><p>介绍</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Activiti</code>项目是一项新的基于<code>Apache</code>许可的开源<code>BPM</code>平台,从基础开始构建,旨在提供支持新的<code>BPMN 2.0</code>标准,包括支持对象管理组(<code>OMG</code>),面对新技术的机遇,诸如互操作性和云架构,提供技术实现</p><p><code>Activiti</code>是一个独立运作和经营开源项目品牌,并将独立于<code>Alfresco</code>开源<code>ECM</code>系统运行,<code>Activiti</code>将是一种轻量级，可嵌入的<code>BPM</code>引擎,而且还设计适用于可扩展的云架构.<code>Activiti</code>将提供宽松的<code>Apache</code>许可<code>2.0</code>，以便这个项目可以被广泛的使用,同时促进<code>Activiti BPM</code>引擎和<code>BPMN 2.0</code>的匹配,该项目现正由<code>OMG</code>通过标准审定</p></div></li><li><p><code>BPM</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>BPM</code>，即<code>Business Process Management</code>，业务流程管理,是一种以规范化的构造端到端的卓越业务流程为中心,以持续的提高组织业务绩效为目的的系统化方法,常见商业管理教育如<code>EMBA、MBA</code>等均将<code>BPM</code>包含在内。</p><p>通常,<code>BPM</code>也指针对流程管理的信息化系统,其特点是注重流程驱动为核心,实现端到端全流程信息化管理</p></div></li><li><p><code>BPMN</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>BPMN</code>,即<code>Business Process Modeling Notation</code>,业务流程建模符号,<code>BPMN</code>定义了一个业务流程图，该业务流程图基于一个流程图,该流程图被设计用于创建业务流程操作的图形化模型。而一个业务流程模型，指一个由图形对象组成的网状图,图形对象包括活动·和用于定义这些活动顺序的流程控制器</p><p><img src="https://img-blog.csdnimg.cn/direct/035b7e24549843dda2db5f3ab0ad0f3b.png" alt="活动用圆角矩形表示，一个流程由一个活动或多个活动组成"></p></div><p><img src="https://img-blog.csdnimg.cn/direct/642e436dec8a4806a64f8a5dc679becf.png" alt="流程图"></p></li></ul><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li><p>部署<code>Activiti</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Activiti</code>是一个工作流引擎(<code>其实就是一堆jar包API</code>),业务系统访问<code>activiti</code>的接口,就可以方便的操作流程相关数据,这样就可以把工作流环境与业务系统的环境集成在一起</p></div></li><li><p>流程定义</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>使用<code>activiti</code>流程建模工具(<code>activity-designer</code>)定义业务流程(<code>.bpmn文件</code>)</p><p><code>.bpmn</code>文件就是业务流程定义文件,通过<code>xml</code>定义业务流程</p></div></li><li><p>流程定义部署</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>activiti</code>部署业务流程定义(<code>.bpmn</code>文件)</p><p>使用<code>activiti</code>提供的<code>api</code>把流程定义内容存储起来,在<code>Activiti</code>执行过程中可以查询定义的内容</p><p><code>Activiti</code>执行把流程定义内容存储在数据库中</p></div></li><li><p>启动一个流程实例</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>流程实例也叫(<code>ProcessInstance</code>)</p><p>启动一个流程实例表示开始一次业务流程的运行</p><p>在员工请假流程定义部署完成后,如果张三要请假就可以启动一个流程实例,如果李四要请假也要启动一个流程实例,两个流程的执行互不影响</p></div></li><li><p>用户查询代办任务(task)</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>用户查询代办任务后，就可以办理某个任务,如果这个任务办理完成还需要其他用户办理,比如采购单创建后由部门经理审核,这个过程也是由<code>activiti</code>帮助我们完成</p></div></li><li><p>流程结束</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当任务办理完成没有下一个任务节点了,这个流程实例就完成了</p></div></li></ul><h4 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h4><ul><li><p>创建<code>maven</code>项目,添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 模型处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn json 数据转换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  https://artefacts.alfresco.com/nexus/content/repositories/activiti-thirdparty/com/github/jgraph/jgraphx/v3.9.3/ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- activiti 云支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-services-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql 数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三方数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>jgraphx</code>下载错误问题</p><ul><li><p>根据链接下载对应的<code>jar</code>文件</p><blockquote><p><a href="https://artefacts.alfresco.com/nexus/content/repositories/activiti-thirdparty/com/github/jgraph/jgraphx/v3.9.3/">https://artefacts.alfresco.com/nexus/content/repositories/activiti-thirdparty/com/github/jgraph/jgraphx/v3.9.3/</a> </p></blockquote></li><li><p>在下载好后的位置执行如下命令,安装到本地仓库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mvn</span> <span class="string">install:install-file -DgroupId=com.github.jgraph -DartifactId=jgraphx -Dversion=v3.9.3 -Dpackaging=jar -Dfile=jgraphx-v3.9.3.jar</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3643ec1056594a1d97c85b42c29af558.png" alt=""></p></li></ul></li></ul></li><li><p>创建日志配置<code>log4j.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="attr">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.File</span>=<span class="string">d:\axis.log</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h4><ul><li><p>创建<code>activiti</code>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot; jdbc:mysql://localhost:3306/activiti?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 activiti 使用的 processEngine对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动创建 activiti 数据库中的表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 加载配置</span></span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;activiti.cfg.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取 processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Activiti 表结构说明</p><ul><li><p><code>GE</code>通用数据</p><p><img src="https://img-blog.csdnimg.cn/direct/de0bf162f9a642a98f1258ade822a90c.png" alt=""></p></li><li><p><code>HI</code>历史数据</p><blockquote><p>这些表中保存的都是历史数据,比如执行过的流程实例、变量、任务、等,<code>Activiti</code>默认提供了<code>4</code>种历史级别</p></blockquote><ul><li><p><code>none</code>：不保存任何历史信息,可以提高系统性能</p></li><li><p><code>activity</code>：保存所有的流程实例、任务、活动信息</p></li><li><p><code>audit</code>：默认级别，保存所有的流程实例、任务、活动、表单属性等</p></li><li><p><code>full</code>：最完整的历史记录，除了<code>audit</code>级别的信息外还可以保存详细,例如流程变量</p><p><img src="https://img-blog.csdnimg.cn/direct/143de02db93d47d4a247fe422aa73057.png" alt=""></p></li></ul></li><li><p><code>RE</code>静态数据</p><blockquote><p>代表仓库,这些表中保存一些<code>静态</code>信息,如流程定义和流程资源(如图片,规则等)</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/b098cac11ec34ca081e53a5e67f5e022.png" alt=""></p></li><li><p><code>RU</code>运行实例</p><blockquote><p><code>RU(Runtime(运行时))</code>，这些表中保存一些流程实例,用户任务，变量等的运行时数据，<code>Activiti</code>只保存流程实例在执行过程中的运行时数据,并且当流程结束后会立即移除这些数据,这是为了保证运行时表尽量的小并运行的足够快</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/795372552ac848aabe26ffdc31b68406.png" alt=""></p></li></ul></li></ul><h4 id="Activiti的六⼤Service服务"><a href="#Activiti的六⼤Service服务" class="headerlink" title="Activiti的六⼤Service服务"></a>Activiti的六⼤Service服务</h4><h5 id="RepositoryService仓储服务"><a href="#RepositoryService仓储服务" class="headerlink" title="RepositoryService仓储服务"></a>RepositoryService仓储服务</h5><ul><li><p>仓储服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仓储服务</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>仓储服务可以⽤来部署我们的流程图，还可以创建我们的流程部署查询对象，⽤于 查询刚刚部署的流程列表，便于我们管理流程，⽅法如下。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部署流程的⽅法，流程图以inputStream流的形式传⼊</span></span><br><span class="line"> <span class="type">DeploymentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">repositoryService.createDeployment();</span><br><span class="line"> builder.name(process.getName());</span><br><span class="line"> builder.addInputStream(fileName, inputStream);</span><br><span class="line"> <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> builder.deploy();</span><br><span class="line"> <span class="comment">//流程部署列表查询的⽅法</span></span><br><span class="line"> <span class="type">DeploymentQuery</span> <span class="variable">deploymentQuery</span> <span class="operator">=</span></span><br><span class="line">repositoryService.createDeploymentQuery();</span><br><span class="line"> <span class="comment">//可以根据很多条件查询，我这是根据部署名称模糊查询</span></span><br><span class="line"> List&lt;Deployment&gt; list =</span><br><span class="line">deploymentQuery.deploymentNameLike(<span class="string">&quot;%&quot;</span>+name+<span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="RuntimeService运⾏时服务"><a href="#RuntimeService运⾏时服务" class="headerlink" title="RuntimeService运⾏时服务"></a>RuntimeService运⾏时服务</h5><ul><li><p>运⾏时服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运⾏时服务</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> RuntimeService runtimeService;</span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>运⾏时服务主要⽤来开启流程实例，⼀个流程实例对应多个任务，也就是多个流程 节点，⽐如请假审批是⼀个流程实例，部⻔主管，部⻔经理，总经理都是节点，我 们开启服务是通过流程定义key或者流程定义id来开启的，⽅法如下：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//根据部署id创建流程定义</span></span><br><span class="line"> <span class="type">ProcessDefinition</span> <span class="variable">def</span> <span class="operator">=</span></span><br><span class="line">repositoryService.createProcessDefinitionQuery().</span><br><span class="line"> deploymentId(form.getDeployId()).singleResult();</span><br><span class="line"> <span class="comment">//根据流程定义id或者key开启流程实例</span></span><br><span class="line"> <span class="type">ProcessInstance</span> <span class="variable">proInst</span> <span class="operator">=</span></span><br><span class="line">runtimeService.startProcessInstanceById(def.getId());</span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当我们⽤仓储服务部署了流程图之后，就会产⽣⼀个流程部署id，⼀个流程部署id 对应⼀个流程定义，⼀个流程定义对应多个流程实例，流程定义和流程实例之间的 关系就好⽐是类和对象的关系。⼀个流程实例对应多个任务节点。</p></div></li></ul><h5 id="TaskService任务服务"><a href="#TaskService任务服务" class="headerlink" title="TaskService任务服务"></a>TaskService任务服务</h5><ul><li><p>任务服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService taskService;</span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>任务服务是⽤来可以⽤来领取，完成，查询任务列表功能的，使⽤⽅法分别如下：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据任务id和⽤户领取任务</span></span><br><span class="line">taskService.claim(String taskId, String userId)</span><br><span class="line"><span class="comment">//根据任务id完成⾃⼰节点的任务</span></span><br><span class="line">taskService.complete(String taskId)</span><br><span class="line"><span class="comment">//创建任务查询对象之后根据候选⼈也就是任务处理⼈查询⾃⼰的任务列表</span></span><br><span class="line">taskService.createTaskQuery().taskAssignee(String assignee)</span><br></pre></td></tr></table></figure></li></ul><h5 id="HistoryService历史服务"><a href="#HistoryService历史服务" class="headerlink" title="HistoryService历史服务"></a>HistoryService历史服务</h5><ul><li><p>历史服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//历史服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HistoryService historyService;</span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>历史服务可以查看审批⼈曾经审批完成了哪些项⽬，审批项⽬总共花了多少时间， 以及在哪个环节⽐较耗费时间等等，便于审批⼈查看历史信息，⽅法如下。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据审批⼈查看该审批⼈审批了哪些项⽬</span></span><br><span class="line"> List&lt;HistoricTaskInstance&gt; =</span><br><span class="line">historyService.createHistoricTaskInstanceQuery().</span><br><span class="line"> taskAssignee(String assignee).finished().list();</span><br><span class="line"><span class="comment">// 历史任务对象HistoricTaskInstance，它⾥⾯封装了任务开始时间，结束时间，该节点花费的时间等等信息。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="FormService表单服务"><a href="#FormService表单服务" class="headerlink" title="FormService表单服务"></a>FormService表单服务</h5><ul><li><p>表单服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表单服务 实现任务表单管理的，可选服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FormService formService;</span><br></pre></td></tr></table></figure></li></ul><h5 id="IdentityService实体服务"><a href="#IdentityService实体服务" class="headerlink" title="IdentityService实体服务"></a>IdentityService实体服务</h5><ul><li><p>实体服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体服务</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> IdentityService identityService;</span><br><span class="line"><span class="comment">// 操作⽤户信息，⽤户分组信息等，组信息包括如部⻔表和职位表</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="绘制流程图"><a href="#绘制流程图" class="headerlink" title="绘制流程图"></a>绘制流程图</h4><ul><li><p>绘制</p><p><img src="https://img-blog.csdnimg.cn/direct/a4a419c7020c463b83d79482cc864ff3.png" alt=""></p></li><li><p>生成<code>png</code>图片</p></li></ul><h4 id="流程部署"><a href="#流程部署" class="headerlink" title="流程部署"></a>流程部署</h4><ul><li><p>部署流程图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 部署流程图</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deployImg</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取 ProcessEngine 对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">// 2. 获取用于部署的 RepositoryService</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="comment">// 3. 执行部署</span></span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;bpmn/level.bpmn20.xml&quot;</span>) <span class="comment">// 添加 bpmn 资源</span></span><br><span class="line">            .addClasspathResource(<span class="string">&quot;bpmn/level.png&quot;</span>) <span class="comment">// 添加 png 资源</span></span><br><span class="line">            .name(<span class="string">&quot;请假申请流程&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    <span class="comment">// 输出部署信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;流程部署 id: &quot;</span>+deployment.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程部署名称: &quot;</span>+deployment.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建流程实例"><a href="#创建流程实例" class="headerlink" title="创建流程实例"></a>创建流程实例</h4><ul><li><p>创建流程实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取 ProcessEngine 对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">// 2. 获取 RepositoryService</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="comment">// 3. 根据部署id来获得流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">def</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class="line">            .deploymentId(<span class="string">&quot;2501&quot;</span>).singleResult();</span><br><span class="line">    <span class="comment">// 4. 获取 RuntimeService</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">// 5. 获取流程定义(类)生成流程实例(对象),借助 RuntimeService</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(def.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id: &quot;</span>+processInstance.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;实例id: &quot;</span>+processInstance.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="查询任务"><a href="#查询任务" class="headerlink" title="查询任务"></a>查询任务</h4><ul><li><p>任务查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流程实例启动后,不同的用户可以查询到他在这个流程中的任务,前提是流程已经到达该用户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">            .processDefinitionId(<span class="string">&quot;level:2:2504&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;流程定义id: &quot;</span> + task.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例ID: &quot;</span> + task.getProcessInstanceId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务ID: &quot;</span> + task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名称: &quot;</span> + task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="任务处理"><a href="#任务处理" class="headerlink" title="任务处理"></a>任务处理</h4><ul><li><p>任务处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="comment">// 查询出 张三 的任务</span></span><br><span class="line">    <span class="type">Task</span> <span class="variable">tasks</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processDefinitionId(<span class="string">&quot;level:2:2504&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>).singleResult();</span><br><span class="line">    <span class="comment">// 完成任务</span></span><br><span class="line">    taskService.complete(tasks.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="资源文件的下载"><a href="#资源文件的下载" class="headerlink" title="资源文件的下载"></a>资源文件的下载</h4><ul><li>资源文件下载</li></ul><h4 id="SpringBoot-集成"><a href="#SpringBoot-集成" class="headerlink" title="SpringBoot-集成"></a>SpringBoot-集成</h4><h5 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h5><ul><li><p>引入依赖并初始化数据库,如果数据库之前有<code>数据会被清空</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">activiti:</span></span><br><span class="line">        <span class="attr">database-schema-update:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">db-history-used:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">history-level:</span> <span class="string">full</span></span><br><span class="line">        <span class="attr">check-process-definitions:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>activiti7</code>加入后启动报错</p><ul><li><p><code>yml</code>添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">mvc:</span></span><br><span class="line">     <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ANT_PATH_MATCHER</span></span><br></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Knife4j</code>的配置类添加如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.common.util.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;dockerBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">dockerBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定使用Swagger2规范</span></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        <span class="comment">//描述字段支持Markdown语法</span></span><br><span class="line">                        .description(<span class="string">&quot;# Knife4j RESTful APIs&quot;</span>)</span><br><span class="line">                        .termsOfServiceUrl(<span class="string">&quot;https://itl-coder.github.io/&quot;</span>)</span><br><span class="line">                        .contact(<span class="string">&quot;ituninapp@gmail.com&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;用户服务&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.web.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 主要添加如下 </span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcEndpointHandlerMapping <span class="title function_">webEndpointServletHandlerMapping</span><span class="params">(WebEndpointsSupplier webEndpointsSupplier, ServletEndpointsSupplier servletEndpointsSupplier, ControllerEndpointsSupplier controllerEndpointsSupplier, EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties, WebEndpointProperties webEndpointProperties, Environment environment)</span> &#123;</span><br><span class="line">        List&lt;ExposableEndpoint&lt;?&gt;&gt; allEndpoints = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        Collection&lt;ExposableWebEndpoint&gt; webEndpoints = webEndpointsSupplier.getEndpoints();</span><br><span class="line">        allEndpoints.addAll(webEndpoints);</span><br><span class="line">        allEndpoints.addAll(servletEndpointsSupplier.getEndpoints());</span><br><span class="line">        allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());</span><br><span class="line">        <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> webEndpointProperties.getBasePath();</span><br><span class="line">        <span class="type">EndpointMapping</span> <span class="variable">endpointMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EndpointMapping</span>(basePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">shouldRegisterLinksMapping</span> <span class="operator">=</span> <span class="built_in">this</span>.shouldRegisterLinksMapping(webEndpointProperties, environment, basePath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcEndpointHandlerMapping</span>(endpointMapping, webEndpoints, endpointMediaTypes, corsProperties.toCorsConfiguration(), <span class="keyword">new</span> <span class="title class_">EndpointLinksResolver</span>(allEndpoints, basePath), shouldRegisterLinksMapping, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldRegisterLinksMapping</span><span class="params">(WebEndpointProperties webEndpointProperties, Environment environment, String basePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> webEndpointProperties.getDiscovery().isEnabled() &amp;&amp; (StringUtils.hasText(basePath) || ManagementPortType.get(environment).equals(ManagementPortType.DIFFERENT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>url</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 MySQL 的链接 URL 中添加: nullCatalogMeansCurrent=true 配置</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>通过工具绘画流程图(<code>bpmn</code>)</p><ul><li><p>工具下载(<code>Activiti 5.0</code>)</p><blockquote><p><a href="https://www.activiti.org/get-started">https://www.activiti.org/get-started</a></p></blockquote></li><li><p><code>Tomcat9</code>下载</p></li><li><p><code>jdk1.8</code></p></li><li><p>将<code>activiti-explorer.war</code>复制到<code>Tomcat9的webapps</code>目录中</p></li><li><p>修改<code>Tomcat9目录中conf/logging.properties第47行,将 UTF-8 修改为 gbk</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">java.util.logging.ConsoleHandler.encoding</span> = <span class="string">gbk</span></span><br></pre></td></tr></table></figure></li><li><p>双击启动<code>Tomcat的 startup.bat</code></p><p><img src="https://img-blog.csdnimg.cn/direct/e6c88f8d992540499a54915bdd6b4f5e.png" alt=""></p></li><li><p>访问</p><blockquote><p><a href="http://localhost:8080/activiti-explorer/">http://localhost:8080/activiti-explorer/</a></p></blockquote></li><li><p>输入用户名和密码<code>kermit</code></p><p><img src="https://img-blog.csdnimg.cn/direct/9e781dce19694130ae63cbaf8563be3d.png" alt=""></p></li></ul></li><li><p>流程定义部署</p></li><li><p>启动一个流程实例</p></li><li><p>用户查询代办任务</p></li><li><p>用户办理任务</p></li><li><p>流程结束</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Echarts集成</title>
      <link href="/2024/01/19/15218fe1/"/>
      <url>/2024/01/19/15218fe1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringBoot-Echarts集成"><a href="#SpringBoot-Echarts集成" class="headerlink" title="SpringBoot-Echarts集成"></a>SpringBoot-Echarts集成</h3><ul><li><p>安装<code>echarts</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install echarts --save</span></span><br></pre></td></tr></table></figure></li><li><p>引入<code>echarts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line">myChart.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>provide</code>向下传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">RouterLink</span>, <span class="title class_">RouterView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&#x27;echarts&#x27;</span>, echarts);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Son</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RouterView</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>inject</code>接受</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; inject, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> $echarts = <span class="title function_">inject</span>(<span class="string">&#x27;echarts&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明一个ref来存放DOM元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> charts = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> myChart = $echarts.<span class="title function_">init</span>(charts.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绘制图表</span></span></span><br><span class="line"><span class="language-javascript">  myChart.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;charts&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 900px; height: 900px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>效果图</p><p><img src="https://img-blog.csdnimg.cn/direct/a300abe616b44d48a41c5cb8b50c55fb.gif" alt=""></p></li></ul></li><li><p><code>vue2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂载到原型上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">prototyoe</span>.<span class="property">$echarts</span> = echarts</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2024/01/18/d044eab7/"/>
      <url>/2024/01/18/d044eab7/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><ul><li><p><code>TypeScript</code>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>TypeScript(简称:TS)</code>,是<code>JavaScript</code>的超集</p><p><code>TypeScript = Type + JavaScript(在 JS 的基础之上,为 JS 添加了类型支持)</code></p><p><code>TypeScript</code>是微软开发的开源编程语言,可以在任何运行<code>JavaScript</code>的地方运行</p></div></li></ul><h4 id="TS优势"><a href="#TS优势" class="headerlink" title="TS优势"></a>TS优势</h4><ul><li>更早(<code>写代码的同时</code>)发现错误,减少找<code>Bug</code>，改<code>Bug</code>时间,提升了开发效率</li><li>程序中任何位置的代码都有提示,随时随地的安全感,增加了开发体验</li><li>强大的<code>类型系统</code>提升了代码的可维护性,使得<code>重构代码更容易</code></li><li>支持<code>最新的ECMAScript</code>语法,优先体验最新的语法</li><li><code>TS</code>类型推断机制,<code>不需要</code>在代码中的<code>每个地方都显示标注类型</code></li></ul><h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><ul><li><p>安装编译<code>TS</code>的工具包</p><ul><li><p>为什么要安装编译<code>TS</code>的工具包</p><blockquote><p><code>Node.js/浏览器</code>,只认识<code>JS</code>代码,需要先将<code>TS</code>代码转换为<code>JS</code>代码,然后才能运行</p></blockquote></li><li><p>安装命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># typescript 用来编译 TS 代码的包,提供了 tsc 命令,实现了 TS -&gt; JS 的转换 </span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install -g typescript</span></span><br></pre></td></tr></table></figure></li><li><p>查看是否安装成功</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tsc</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>编译并运行<code>TS</code>代码</p><ul><li><p>创建<code>hello.ts</code>文件</p></li><li><p>将<code>TS</code>编译为<code>JS</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tsc</span> <span class="string">hello.ts</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>JS</code>代码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node</span> <span class="string">hello.js</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/486044604b1c4017820c8cee321316d3.png" alt=""></p></li></ul></li><li><p>简化运行<code>TS</code>的步骤</p><ul><li><p>简化方式: 使用<code>ts-node</code>包,直接在<code>node.js</code>中执行<code>TS</code>代码</p></li><li><p>安装命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g ts-node</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ts-node 命令在内部偷偷的将 TS -&gt; JS，然后运行 JS 代码</span></span><br><span class="line"><span class="attr">ts-node</span> <span class="string">hello.ts</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h4><ul><li><p><code>JS</code>有类型(比如: <code>number/string</code>)，但是<code>JS</code>不会检查变量的类型是否发生变化,而<code>TS</code>会检查</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>TypeScript</code>类型系统的主要优势是可以显示标记出代码中的意外行为,从而降低了发生错误的可能性</p></div></li><li><p>类型注解</p><ul><li>说明: 代码中的<code>:number</code>就是类型注解</li><li>语法: 为变量<code>添加类型约束</code></li><li>解释: 约定了什么类型,就只能给变量赋值该类型的值,否则就会报错</li></ul></li><li><p>常用基础类型</p><ul><li><p><code>JS</code>已有类型</p><ul><li><p>原始类型:<code>number/string/boolean/null/undefined/symbol</code></p></li><li><p>对象类型:<code>object(包括数组、对象、函数等对象)</code></p><ul><li><p>数组类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">number</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// 推荐写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strings</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>对象类型：<code>JS</code>中的对象是由属性和方法构成的,而<code>TS</code>中的<code>对象类型</code>就是在<code>描述对象的结构(有什么类型的属性和方法)</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="title function_">sayHello</span>(): <span class="built_in">void</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接使用<code>&#123; &#125;</code>来描述对象结构,属性采用<code>属性名:类型</code>，<code>方法名():返回值类型</code>的形式</li><li>如果方法有参数,就在方法名后面的小括号中指定参数类型,比如(<code>add(num1:number):number</code>)</li><li>在一行代码中指定对象的多个属性时,使用<code>;</code>来分隔<ul><li>如果一行代码只指定一个属性类型(<code>通过换行来分隔多个属性类型</code>,可以去掉<code>分号</code>)</li><li><code>方法的类型</code>也可以使用箭头函数形式(<code>比如 &#123;sayHello: ()=&gt;void &#125;</code>)</li></ul></li></ul></li></ul></li><li><p>函数类型：实际上指的是<code>函数参数 和 返回值的类型</code></p><ul><li><p>单独指定参数、返回值的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独指定参数,返回值的类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> div = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时指定参数、返回值的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时指定参数,返回值的类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果函数没有返回值,那么,函数返回值类型为:<code>void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">output</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用函数的某个功能时,参数可以传也可以不传,这种情况下,再给函数参数指定类型时,就用到了<code>可选参数</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySlice</span>(<span class="params">start?: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;起始索引: &quot;</span>, start, <span class="string">&quot;结束索引: &quot;</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可选参数: 在可传可不传的参数名称后面添加?(问号)</span></span><br><span class="line"><span class="comment">// 注意: 可选参数只能出现在参数列表的最后,也就是说可选参数后面不能再出现必选参数</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li><p><code>TS</code>新增类型</p><ul><li><p>联合类型、自定义类型(<code>类型别名</code>)、接口、元组、字面量类型、枚举、<code>void</code>、<code>any</code>等</p><ul><li><p>联合类型(<code>需求: 数组中既有 number类型，又有 string 类型,这个数组的类型应该如何写</code>)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>类型别名</p><ul><li><p>使用场景: 当同一类型(<code>复杂</code>)被多次使用时,可以通过类型别名,<code>简化该类型的使用</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customArray = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: customArray = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: customArray = [<span class="number">2</span>, <span class="string">&#x27;4&#x27;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4c54c385b4ff468b92d7723349140187.png" alt=""></p><ul><li>解释<ul><li>使用<code>type</code>关键字来创建类型别名</li><li>类型别名(<code>customArray</code>),可以是任意合法的变量名称</li><li>创建类型别名后,直接<code>使用该类型别名作为变量的类型注解即可</code></li></ul></li></ul></li></ul></li><li><p>元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景: 在地图中,使用经纬度坐标来标记位置信息,可以使用数组来记录坐标</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>, <span class="number">2.2</span>];</span><br></pre></td></tr></table></figure><ul><li>元组类型是灵一种类型的数组,它确切的知道包含多少个元素,以及特定索引对应的类型</li><li>解释<ul><li>元组类型可以确切的标记出有多少个元素,以及每个元素的类型</li></ul></li></ul></li></ul></li></ul></li><li><p>接口</p><ul><li><p>当一个对象类型被多次使用时,一般会使用<code>接口(interface)</code>来描述对象的类型,达到复用的目的</p></li><li><p>解释</p><ul><li><p>使用<code>interface</code>关键字来声明接口</p></li><li><p>接口名称是任意合法的变量名称</p></li><li><p>声明接口后,直接<code>使用接口名作为变量的类型</code></p></li><li><p>因为每一行只有一个属性类型,因此,属性类型后没有(<code>;</code>)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">sayHi</span>());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><ul><li><p>有时候你会比<code>TS</code>更加明确一个值的类型,此时，可以使用<code>类型断言</code>来指定更具体的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/6ff8a3a8615d44d189a570e9a7f257d4.png" alt="获取元素的类型,根据dir,拉取到最后"></p><ul><li>解释<ul><li>使用<code>as</code>关键字实现类型断言</li><li>关键字<code>as</code>后面的类型是一个更加具体的类型(<code>HTMLAnchorElement</code>)</li><li>通过类型断言,<code>aLink</code>的类型变得更加具体,这样就可以访问<code>a</code>标签特有的属性或方法了</li></ul></li></ul></li></ul><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><ul><li><p>使用模式:<code>字面量类型配合联合类型一起使用</code></p></li><li><p>使用场景: 用来<code>表示一组明确的可选值列表</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e2eb5cc34a464574b312b35541d9c6c8.png" alt=""></p></li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul><li><p>枚举的功能类似于字面量类型 + 联合类型组合的功能,也可以<code>表示一组明确的可选值</code></p></li><li><p>枚举:<code>定义一组命名常量</code>,它描述一个值,该值可以是这些命名常量中的一个</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  left,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>解释</p><ul><li>使用<code>enum</code>关键字定义枚举</li><li>约定枚举名称,枚举中的值以大写字母开头</li><li>枚举中的多个值之间通过<code>逗号</code>分隔</li><li>定义好枚举后,直接使用枚举名称作为类型注解</li></ul></li><li><p>枚举是<code>TS</code>为数不多的非<code>JavaScript</code>类型级扩展(<code>不仅仅是类型</code>)的特性之一</p><blockquote><p>因为：其他类型仅仅被当作类型,而<code>枚举不仅用作类型,还提供值(枚举成员都是有值的)</code>,也就是说,其他的类型会在编译为<code>JS</code>代码时自动移除,但是，<code>枚举</code>类型会被编译为<code>JS</code>代码</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">101.1</span>, <span class="number">202.2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  left,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4db87ea993324193a3ab52699f7db4b2.png" alt=""></p><blockquote><p>一般情况下,<code>推荐使用字面量类型 + 联合类型组合的方式</code>,因为相比枚举,这种方式更加直观、简洁、高效</p></blockquote></li></ul><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><ul><li><p><code>TS</code>提供的<code>typeof</code>可以在<code>类型上下文</code>中引用变量或属性的类型</p></li><li><p>使用场景：根据已有变量的值,获取该值的类型,来简化书写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;Hello TS&#x27;</span>); <span class="comment">// js 位置就是判断类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof 在 TS 位置就是类型推断</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: <span class="keyword">typeof</span> p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + p.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + p.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">formatPoint</span>(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>解释</p><ul><li><p>使用<code>typeof</code>操作符来获取变量<code>p</code>的类型,结果与第一种(<code>对象字面量形式的类型</code>)相同</p></li><li><p><code>typeof</code>出现在<code>类型注解的位置(参数名称的冒号后面)</code>所处的环境就在类型上下文</p></li><li><p>注意：<code>typeof</code>只能用来查询变量或属性的类型,无法查询其它形式的类型(<code>比如：函数调用的类型</code>)</p><p><img src="https://img-blog.csdnimg.cn/direct/9b89e9fe76ae41139753468d2bafb601.png" alt=""></p></li></ul></li></ul><h4 id="高阶类型"><a href="#高阶类型" class="headerlink" title="高阶类型"></a>高阶类型</h4><h5 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h5><ul><li><p><code>Class</code>基本使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 全面支持 ES2015 中引入的 class 关键字，并为其添加了类型注解和其他语法(比如: 可见修饰符)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Persoon</span> &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> persoon = <span class="keyword">new</span> <span class="title class_">Persoon</span>();</span><br></pre></td></tr></table></figure><ul><li>解释<ul><li>根据<code>TS</code>中的类型推论,可以知道<code>Person</code>类的实例对象<code>p</code>的类型是<code>Person</code></li><li><code>TS</code>中的<code>class</code>，不仅提供了<code>class</code>的语法功能,也作为一种类型存在</li></ul></li></ul></li><li><p>实例属性初始化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解释<ul><li>声明成员<code>age</code>，类型为<code>number(没有初始值)</code></li><li>声明成员<code>gender</code>，并设置初始值,此时,可以省略类型注解(<code>TS类型推论为 string 类型</code>)</li></ul></li></ul></li><li><p>构造函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Persoon</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> persoon = <span class="keyword">new</span> <span class="title class_">Persoon</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>成员初始化(<code>比如： age:number</code>)后,才可以通过<code>this.age</code>来访问实例成员</li><li>需要为构造函数指定类型注解,否则会被隐士推断为<code>any</code>,否则会被隐士推断为<code>any</code>，构造函数不需要返回值类型</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>佳陪陪护项目</title>
      <link href="/2024/01/15/cac673e6/"/>
      <url>/2024/01/15/cac673e6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="佳陪陪护项目"><a href="#佳陪陪护项目" class="headerlink" title="佳陪陪护项目"></a>佳陪陪护项目</h3><h4 id="项目目录划分"><a href="#项目目录划分" class="headerlink" title="项目目录划分"></a>项目目录划分</h4><ul><li><p>模块创建</p><p><img src="https://img-blog.csdnimg.cn/direct/607c02ae66964e7c83543b698cfd2bbd.jpeg" alt=""></p><ul><li><code>jia-pei-parent</code>: 项目的父工程,进行项目依赖的统一管理,打包方式为<code>pom</code><ul><li><code>jia-pei-common</code>: 项目公共模块的管理模块,父工程为<code>jia-pei-comment</code><ul><li><code>common-util</code>: 工具类模块,父工程为<code>jia-pei-common</code></li><li><code>common-service</code>: 公共服务模块,父工程为<code>jia-pei-common</code></li></ul></li><li><code>jia-pei-model</code>: 实体类模块</li><li><code>jia-pei-web</code>: 项目后台管理系统的后端服务</li></ul></li><li>实体类<ul><li>封装请求参数的实体类: 这种实体类在定义的时候往往会携带到<code>dto(数据传输对象: Data Transfer Object)</code>,会定义在<code>dto</code>包中</li><li>与数据库对应的实体类: 这种实体往往和数据表名称保持一致,会定义在<code>domain、entity、pojo</code>包中</li><li>封装响应结果的实体类: 这种实体类定义的时候往往会写到到<code>vo(视图对象: View Object)</code>,会定义在<code>vo</code>包中</li></ul></li></ul></li><li><p>模块依赖关系</p><p><img src="https://img-blog.csdnimg.cn/direct/d23962443c29408097ef7ec46550285e.jpeg" alt=""></p><ul><li>说明<ul><li><code>jia-pei-log</code>会依赖:<code>common-util、jia-pei-model</code></li><li><code>jia-pei-web</code>会依赖<code>common-service</code></li></ul></li></ul></li></ul><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li><p>环境版本</p><p><img src="https://img-blog.csdnimg.cn/direct/09e20c868dcb49fc935eb8caf783bf6b.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker-应用容器</title>
      <link href="/2024/01/13/b81b5a7e/"/>
      <url>/2024/01/13/b81b5a7e/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Docker-应用容器"><a href="#Docker-应用容器" class="headerlink" title="Docker-应用容器"></a>Docker-应用容器</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>关闭防火墙</p></li><li><p>关闭<code>SeLinux</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/selinux/config</span></span><br><span class="line"><span class="comment"># 将 SELINUX=enforcing 或者 SELINUX=permissive 修改为 SELINUX=disabled。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><ul><li><p>安装</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><img src="https://img-blog.csdnimg.cn/direct/c28bc9e4984d414f86886831d6b84fdb.png" alt="https://docs.docker.com/engine/install/centos/"></p></div></li><li><p>卸载旧版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line"><span class="string">                 docker-client \</span></span><br><span class="line"><span class="string">                 docker-client-latest \</span></span><br><span class="line"><span class="string">                 docker-common \</span></span><br><span class="line"><span class="string">                 docker-latest \</span></span><br><span class="line"><span class="string">                 docker-latest-logrotate \</span></span><br><span class="line"><span class="string">                 docker-logrotate \</span></span><br><span class="line"><span class="string">                 docker-engine</span></span><br></pre></td></tr></table></figure></li><li><p>下载关于<code>Docker</code> 的依赖环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install -y yum-utils  device-mapper-persistent-data  lvm2</span></span><br></pre></td></tr></table></figure></li><li><p>设置镜像仓库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum-config-manager</span> <span class="string">--add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 选择一个</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>docker</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 yum 软件包索引</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">makecache fast</span></span><br><span class="line"><span class="comment"># 安装最新版本</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span></span><br></pre></td></tr></table></figure></li><li><p>启动<code>docker</code> 并设置开机自动启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable docker</span></span><br></pre></td></tr></table></figure></li><li><p>配置镜像加速</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过修改daemon配置文件/etc/docker/daemon.json 来使用加速器</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">mkdir -p /etc/docker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加国内镜像【sudo开始复制一直到 EOF 结束】</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>:<span class="string">[</span></span><br><span class="line">    <span class="attr">&quot;https</span>:<span class="string">//eyy45bvx.mirror.aliyuncs.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//hub-mirror.c.163.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.aliyuncs.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.docker-cn.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">    <span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">EOF</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 重新加载 daemon 配置</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl restart docker</span></span><br></pre></td></tr></table></figure><ul><li><p>可以获取自己的阿里云地址</p><ul><li><p>登录阿里云</p></li><li><p>进入控制台</p></li><li><p>搜索<code>容器镜像服务(https://cr.console.aliyun.com/cn-hangzhou/instances)</code></p><p><img src="https://img-blog.csdnimg.cn/4256e8099fd44cefa757e1d75b9a35d2.png" alt="获取镜像加速器地址"></p></li></ul></li><li><p>查看镜像加速是否生效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h4><ul><li><p>镜像简介</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>镜像是一种轻量级、可执行的独立软件包,也可以说是一个精简的操作系统。镜像中包含应用软件及应用软件的运行环境。具体来说镜像包含运行某个软件所需的所有内容,包括代码、库、环境变量和配置文件等。几乎所有应用,直接打包为<code>Docker</code>镜像后就可以运行。</p><p>由于镜像的运行时是容器,容器的设计初衷就是快速和小巧,所以镜像通常都比较小,镜像中不包含内核,其共享宿主机的内核,镜像中只包含简单的<code>Shell</code>或没有<code>Shell</code></p></div></li><li><p>拉取环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://hub.daocloud.io/ 在此处搜索</span></span><br><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull 镜像名称[:tag]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Eg</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull daocloud.io/library/tomcat:8.0.45</span></span><br></pre></td></tr></table></figure></li><li><p>操作流程</p><ul><li><p>进入<code>deockerhub</code></p></li><li><p>搜索所需要的容器名称</p><p><img src="https://img-blog.csdnimg.cn/849913d02b474ac6b8c2a58cb97b9dd3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="拉取镜像的流程"></p></li></ul></li></ul><h4 id="Run-流程"><a href="#Run-流程" class="headerlink" title="Run-流程"></a>Run-流程</h4><ul><li><p>流程</p><p><img src="https://img-blog.csdnimg.cn/42392cb82f754a87a541351732138fae.png" alt=""></p></li></ul><h4 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker-常用命令"></a>Docker-常用命令</h4><h5 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h5><ul><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">stop docker</span></span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">status docker</span></span><br></pre></td></tr></table></figure></li><li><p>开机启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">enable docker</span></span><br></pre></td></tr></table></figure></li><li><p>查看<code>docker</code> 概要信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li><li><p>查看<code>docker</code> 总体帮助命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">--help</span></span><br></pre></td></tr></table></figure></li><li><p>查看<code>docker</code> 命令帮助文档</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">具体命令 --help</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h5><ul><li><p>列出本地主机上的镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">images -[options]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">options</span>:<span class="string"></span></span><br><span class="line"><span class="attr">-a</span>: <span class="string">列出本地所有的镜像(含历史映像层)</span></span><br><span class="line"><span class="attr">-q</span>: <span class="string">只显示镜像 ID</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/06486173b6514da89d5ec7a036884211.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><ul><li><code>REPOSITORY</code>: 表示镜像的仓库源</li><li><code>TAG</code>: 镜像的标签版本号</li><li><code>IMAGE ID</code>: 镜像<code>ID</code></li><li><code>CREATED</code>: 镜像创建时间</li><li><code>SIZE</code>: 镜像大小</li></ul></li><li><p>搜索某个镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">search 某个镜像名称</span></span><br><span class="line"><span class="comment"># Eg: 查看排名前 5 的</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">search --limit 5 redis</span></span><br></pre></td></tr></table></figure></li><li><p>镜像拉取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull 某个镜像名称[:TAG]</span></span><br><span class="line"><span class="comment"># 没有 TAG 就是最新版,等价于如下</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull 镜像名称:latest</span></span><br></pre></td></tr></table></figure></li><li><p>查看占用空间</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 镜像/容器/数据卷所占用的空间</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">system df </span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/554d5710283d43b9bc65bade4c66d60b.png" alt=""></p></li><li><p>删除镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除单个， -f 参数可以强制删除</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi 某个镜像名字id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 删除多个</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi -f 镜像名1:TAG 镜像名2:TAG </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 删除全部</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi -f $(docker images -qa)</span></span><br></pre></td></tr></table></figure></li><li><p>镜像的重命名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会出现出一个全新的镜像,并保留旧镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">tag 旧的名称:旧的版本号 新的名称:新的版本号</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3b6853e33d6640c48d0140befd77059b.png" alt=""></p></li></ul><h4 id="谈谈-docker-虚悬镜像是什么"><a href="#谈谈-docker-虚悬镜像是什么" class="headerlink" title="谈谈 docker 虚悬镜像是什么?"></a>谈谈 docker 虚悬镜像是什么?</h4><ul><li><p>虚悬镜像指的是<code>仓库名、标签都是 &lt;none&gt; 的镜像,俗称 虚悬镜像(dangling image)</code></p><p><img src="https://img-blog.csdnimg.cn/960c6568b99a42efacc0ad9c93876599.png" alt=""></p></li><li><p>查看虚悬镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">image ls -f dangling=true</span></span><br></pre></td></tr></table></figure></li><li><p>删除虚悬镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">image prune</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ul><li><p>拉取<code>ubuntu</code> 镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docler</span> <span class="string">pull ubuntu</span></span><br></pre></td></tr></table></figure></li><li><p>启动交互式容器(前台命令行)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run 镜像标识 | 镜像名称[:tag]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可以直接拉取并启动</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 宿主机端口:容器端口 --name 容器名称  镜像的标识|镜像名称[:tag] </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># -d: 代表后台运行容器</span></span><br><span class="line"><span class="comment"># --name: 容器名称 =&gt;指定容器的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># -i: 以交互模式运行容器,通常与 -t 同时使用</span></span><br><span class="line"><span class="comment"># -t: 为容器重新分配一个伪输入终端,通常与 -i 同时使用</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -it ubuntu bash</span></span><br><span class="line"><span class="comment"># 从容器内退出到宿主机</span></span><br><span class="line"><span class="attr">exit</span></span><br><span class="line"><span class="comment"># -p: 宿主机端口:容器端口 =&gt; 为了映射当前 Linux 的端口和容器的端口</span></span><br></pre></td></tr></table></figure></li><li><p>退出</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cc9f5e87a6e8418fbd4131faaec29a29.png" alt=""></p></li><li><p>查看正在运行的<code>容器</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">ps [-qa]</span></span><br><span class="line"><span class="comment"># -a: 查看全部的容器,包括没有运行的</span></span><br><span class="line"><span class="comment"># -q: 只查看容器的标识</span></span><br></pre></td></tr></table></figure><ul><li>选项说明<ul><li><code>-a</code>:列出当前所有的<code>正在运行的容器</code>+<code>历史上运行过</code>的</li><li><code>-l</code>: 显示最近创建的容器</li><li><code>-n</code>: 显示最近<code>n</code>个创建的容器</li><li><code>-q</code>: 静默模式,只显示容器编号</li></ul></li></ul></li><li><p>启动已停止运行的容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">start 容器id/或者容器名</span></span><br></pre></td></tr></table></figure></li><li><p>停止容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop 容器id/或者容器名</span></span><br></pre></td></tr></table></figure></li><li><p>强制停止容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">kill 容器id/或者容器名</span></span><br></pre></td></tr></table></figure></li><li><p>删除已停止的容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除单个</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm 容器id</span></span><br><span class="line"><span class="comment"># 一次性删除多个容器实例</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm -f $(docker ps -qa)</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器的日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">logs -f 容器id</span></span><br><span class="line"><span class="comment"># -f: 可以滚动查看日志的最后几行</span></span><br></pre></td></tr></table></figure></li><li><p>启动守护式容器(<code>后台服务器</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d redis:6.0.8</span></span><br></pre></td></tr></table></figure></li><li><p>进入正在运行的容器并以命令行交互</p><ul><li><p>方式一</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器id(CONTAINER ID)  bash</span></span><br><span class="line"><span class="comment"># Eg: 进入 Tomcat</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it fb0 bash</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 退出容器内部</span></span><br><span class="line"><span class="attr">exit</span></span><br></pre></td></tr></table></figure></li><li><p>方式二</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">attach 容器id</span></span><br></pre></td></tr></table></figure></li><li><p>两者的区别</p><ul><li><code>exec【推荐】</code>是在容器中打开新的终端,并且可以启动新的进程,用<code>exit</code> 退出,不会导致容器的停止</li><li><code>attach</code>: 直接进入容器启动命令的终端,不会启动新的进程,用<code>exit</code> 退出，会导致容器的停止</li></ul></li></ul></li><li><p>查看容器内部细节</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">inspect 容器id</span></span><br></pre></td></tr></table></figure></li><li><p>从容器内拷贝文件到宿主机上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">cp 容器id:容器内路径 目的主机路径</span></span><br><span class="line"><span class="comment"># Eg: 将 容器 tmp 目录内的文件备份到宿主机</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp bc7c957b6662:/tmp/文件 ./cp-tmp.txt</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/02474b34ce9843868a6c660e60dbd11d.png" alt=""></p></li><li><p>导入和到导出容器</p><ul><li><p><code>export</code>: 导出容器的内容六作为一个<code>tar</code> 归档文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出容器的内容留作为一个 tar 归档文件</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">export 容器id &gt; 文件名.tar</span></span><br></pre></td></tr></table></figure></li><li><p><code>import</code>: 从<code>tar</code> 包中的内容创建一个新的文件系统再导入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入: 从 tar 包中的内容创建一个新的文件系统再导入为镜像</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</span></span><br><span class="line"><span class="comment"># Eg:</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">ubuntu.tar | docker import - coderitl/ubuntu:latest</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/6663f614e7704eaf83fbf7929976f0a1.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -it -d coderitl/redis:6.0.8 bash</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker-镜像"></a>Docker-镜像</h4><ul><li><p>镜像的概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>镜像是一种轻量级、可执行的独立软件包,它包含运行某个软件所需的所有内容,我们把应用程序和配置依赖打包好形成一个可交付的运行环境(<code>包括代码、运行时需要的库、环境变量和配置文件等</code>),这个打包好的运行环境就是<code>image</code>镜像文件</p></div></li><li><p>联合文件系统</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>UnionFS</code>文件系统是一种分层、轻量级并且高性能的文件系统，它支持<code>对文件系统的修改作为一次提交来一层层的叠加</code>,同时可以将不同目录挂载到同一个虚拟文件系统下,<code>Union</code>文件系统时<code>Docker</code>镜像的基础,<code>镜像可以通过分层来进行继承</code>,基于基础镜像(<code>没有父镜像</code>),可以制作各种具体的应用镜像</p></div><ul><li><p>特性</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>一次同时加载多个文件系统,但从外面看起来,只能看到一个文件系统,联合加载会把各层文件系统叠加起来,这样最终的文件系统会包含所有底层的文件和目录</p></div></li></ul></li><li><p><code>Docker</code>镜像加载的原理</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>docker</code>的镜像实际上由一层一层的文件系统组成,这种层级的文件系统<code>UnionFS</code></p><p><code>bootfs(boot file system)</code>主要包含<code>bootloader</code>和<code>kernel</code>,<code>bootloader</code>主要是引导加载<code>kernel</code>,<code>Linux</code>刚启动时会加载<code>bootfs</code>文件系统,<code>Docker</code>镜像的最底层是引导文件系统<code>bootfs</code>，这一层与我们经典的<code>Linux/Unix</code>系统是一样的,包含<code>boot</code>加载器和内核,当<code>boot</code>加载完成之后整个内核就在内存中了,此时内存的使用权已由<code>bootfs</code>转交给内核,此时系统也会卸载<code>bootfs</code></p><p><code>tootfs(root file system)</code>,在<code>bootfs</code>之上,包含的就是典型的<code>Linux</code>系统中的<code>/dev,/proc,/bin,/etc</code>等标准目录和文件,<code>rootfs</code>就是各种不同操作系统和发行版,比如<code>Ubuntu,Centos</code>等</p></div></li><li><p>为什么<code>Docker</code>镜像要采用这种分层结构呢？</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>镜像分层最大的一个好处就是共享资源,方便复制迁移,就是为了复用。</p><p>比如说有多个镜像都从相同的<code>base</code>镜像构建而来,那么<code>Docker Host</code>只需要在磁盘上保存一份<code>base</code>镜像,同时内存中也只需要加载一份<code>base</code>镜像,就可以为所有的容器服务了,而且镜像的每一层都可以被共享</p></div></li><li><p>重点理解</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Docker</code>镜像层都是<code>只读的，容器层是可写的</code>,当容器启动时,一个新的可写层被加载到镜像的顶部。这一层通常被称作为<code>容器层</code>,<code>容器层</code>之下的都叫<code>镜像层</code></p></div></li></ul><h4 id="Docker-commit"><a href="#Docker-commit" class="headerlink" title="Docker-commit"></a>Docker-commit</h4><ul><li><p><code>docker commit</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit 提交容器副本使之成为一个新的镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">commit -m=&#x27;提交的描述信息&#x27; -a=&#x27;作者&#x27; 已有容器id 要创建的目标镜像名:[标签名]</span></span><br></pre></td></tr></table></figure></li><li><p>练习</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 添加 vim 命令</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/bc1f4f6ba30641fb9d1825add8400a76.png" alt="进入ubuntu-容器"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新包管理工具</span></span><br><span class="line"><span class="attr">apt-get</span> <span class="string">update</span></span><br><span class="line"><span class="attr">apt-get</span> <span class="string">-y install vim</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c4812851f856(原来的ubuntu的容器id)</span></span><br><span class="line"><span class="comment"># vim/ubuntu 新名称</span></span><br><span class="line"><span class="comment"># 1.0.0 版本号</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">commit -m=&#x27;add vim&#x27; -a=&#x27;coder-itl&#x27; c4812851f856 vim/ubuntu:1.0.0</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0487edfe98b54d5c8bd3b42a17854d1c.png" alt="基于基础镜像创建一个新的镜像"></p></li></ul><h4 id="镜像发布"><a href="#镜像发布" class="headerlink" title="镜像发布"></a>镜像发布</h4><ul><li><p>流程</p><p><img src="https://img-blog.csdnimg.cn/direct/3c7b96a4d2ff4d8689978cab744d5289.png" alt=""></p></li><li><p>进入阿里云</p><ul><li><p>搜索<code>容器镜像服务</code></p></li><li><p>点击如下</p><p><img src="https://img-blog.csdnimg.cn/direct/68a8b1ee57924c46bf2867b9dcada12d.png" alt="点击红色方框"></p></li><li><p>先创建命名空间</p></li><li><p>后创建仓库名称</p></li><li><p>将镜像推送到<code>阿里云</code></p><ul><li><p>登录阿里云<code>Docker Registry</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">login --username=coderitl registry.cn-hangzhou.aliyuncs.com</span></span><br></pre></td></tr></table></figure></li><li><p>从<code>Registry</code>中拉取镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull registry.cn-hangzhou.aliyuncs.com/coder-itl/coderitl:[镜像版本号]</span></span><br></pre></td></tr></table></figure></li><li><p>将镜像推送到<code>Registry</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">$</span> <span class="string">docker login --username=coderitl registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="attr">$</span> <span class="string">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/coder-itl/coderitl:[镜像版本号]</span></span><br><span class="line"><span class="attr">$</span> <span class="string">docker push registry.cn-hangzhou.aliyuncs.com/coder-itl/coderitl:[镜像版本号]</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/fb0772c3e3204eb5ba4ccbcb450efc66.png" alt="登录"></p><p><img src="https://img-blog.csdnimg.cn/direct/bd39a4603f2d4c76a8419df4bd14b207.png" alt=""></p></li><li><p>选择合适的镜像仓库地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">$</span> <span class="string">docker images</span></span><br><span class="line"><span class="attr">REPOSITORY</span>                                                         <span class="string">TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span></span><br><span class="line"><span class="attr">registry.aliyuncs.com/acs/agent</span>                                    <span class="string">0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB</span></span><br><span class="line"><span class="attr">$</span> <span class="string">docker tag 37bb9c63c8b2 registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>&quot;docker push&quot;</code> 命令将该镜像推送至远程</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">push registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="私服推送"><a href="#私服推送" class="headerlink" title="私服推送"></a>私服推送</h4><ul><li><p>下载镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull registry</span></span><br></pre></td></tr></table></figure></li><li><p>运行私有库,相当于本地有个私有的<code>Docker hub</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">-p 5000:5000 \</span></span><br><span class="line"><span class="string">-v /coderitl/myregistery/:/tmp/registry \</span></span><br><span class="line"><span class="string">--priviliged=true \</span></span><br><span class="line"><span class="string">registry</span></span><br></pre></td></tr></table></figure></li><li><p><code>curl</code>验证私服库上有什么镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">curl</span> <span class="string">-XGET http://ip:port/v2/_catalog</span></span><br></pre></td></tr></table></figure></li><li><p>将新镜像修改符合私服规范的<code>tag</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker tag 镜像ID:Tag Host:Port/Repository:Tag</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置文件使之支持<code>http</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;insecure-registries&quot;</span>:<span class="string">[&quot;ip:port&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>push</code>推送到私服库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">push 192.168.5.129:5000/镜像id:Tag</span></span><br></pre></td></tr></table></figure></li><li><p><code>curl</code>验证私服库上有什么镜像</p></li><li><p>拉取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull ip:port/镜像id:Tag</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>可以将<code>docker</code> 容器内的数据保存在宿主机的磁盘中</p><p>卷: 卷就是一个目录，存在于一个或多个容器中,由<code>docker</code> 挂载到容器,但不属于联合文件系统,因此能够绕过<code>Unbion File System</code> 提供的一些用于持续存储或共享数据的特性</p><p>卷的设计目的就是<code>数据的持久化</code>,完全独立于容器的生命周期，因此<code>Docker</code> 不会在容器删除时删除其挂载的数据卷</p></div></li><li><p>权限问题</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Docker</code> <code>挂载目录访问</code>如果出现 <code>cannout open directory.: Oermission denid</code></p><p>解决方法: 在挂载目录后多加一个<code>--privileged=true</code> 参数即可</p><p>原因: 如果是<code>Centos7</code> 安全模块会比之前系统版本加强，不安全的会先禁止,所以目录挂载的情况被默认认为不是安全的行为，在<code>SELinux</code> 里面挂载目录被禁止掉了，如果要开启，只需要添加<code>--privileged=true</code> 参数即可，可以扩大容器的权限解决挂载目录没有权限的问题，使用了该参数,<code>容器</code>内的<code>root</code> 将会拥有真正的<code>root</code> 权限，否则,<code>root</code> 将会只是一个普通<code>root</code> 用户而已</p></div></li><li><p>运行一个带有容器数据卷存储功能的容器实例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名</span></span><br></pre></td></tr></table></figure></li><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>将运行的环境打包成镜像,<code>run</code> 后形成容器实例运行,但是我们对数据的要求希望是持久化的</p><p>Docker<code>容器产生的数据，如果我们不备份，那么当容器实例删除后,容器内的数据自然也就没有了，为了能保存数据在</code>docker<code>中我们使用</code>卷</p><p>特点:</p><ol><li>数据卷可以在容器之间共享或重用数据</li><li>卷中的更改可以直接试试生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一致持续到没有容器使用它为止</li></ol></div></li></ul><h4 id="Tomcat10"><a href="#Tomcat10" class="headerlink" title="Tomcat10"></a>Tomcat10</h4><ul><li><p>搜索</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">search --limit 1 tomcat</span></span><br></pre></td></tr></table></figure></li><li><p>拉取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tomcat 10</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull tomcat</span></span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 8080:8080 --privileged=true --name=&quot;test-tomcat&quot; tomcat</span></span><br></pre></td></tr></table></figure></li><li><p>新版发生改变</p><ul><li><p>首页发生变化</p><p><img src="https://img-blog.csdnimg.cn/6803ee662291438090e0298b1e5a1921.png" alt=""></p></li><li><p>进入<code>Tomcat</code> 容器内部</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器id bash</span></span><br></pre></td></tr></table></figure></li><li><p>无法显示的原因</p><p><img src="https://img-blog.csdnimg.cn/719af45e908d43d18bbeb25c0d5477e2.png" alt=""></p><ul><li><p>删除该文件夹</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rm</span> <span class="string">-r webapps </span></span><br></pre></td></tr></table></figure></li><li><p>将<code>webapps.dist</code> 重命名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 先进性备份</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">webapps.dist/ -r webapps.dist.back/</span></span><br><span class="line"><span class="comment"># 2. 修改为 webapps</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">-r webapps.dist webapps</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>免修改版本下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tomcat8</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机已经安装了 mysql 需要注意端口</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 3306:3306 --privileged=true \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/log:/var/log/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string">-e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string">--name mysql \</span></span><br><span class="line"><span class="string">mysql:5.7</span></span><br></pre></td></tr></table></figure><ul><li><p>在目录<code>/coderitl/mysql/conf</code> 下新建<code>my.cnf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过容器卷同步给 mysql 容器实例</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">my.cnf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加如下内容</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">collation-server</span>=<span class="string">utf8_general_ci</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>MySQL8</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 3306:3306 --privileged=true \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/log:/var/log/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string">-e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string">--name mysql \</span></span><br><span class="line"><span class="string">mysql</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li><p>从<code>docker hub</code> 上拉取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull redis:6.0.8</span></span><br></pre></td></tr></table></figure></li><li><p><code>Redis6.0</code> 的配置文件地址</p><blockquote><p><a href="https://raw.githubusercontent.com/redis/redis/6.0/redis.conf">https://raw.githubusercontent.com/redis/redis/6.0/redis.conf</a></p></blockquote></li><li><p>修改配置文件以下的内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br></pre></td></tr></table></figure></li><li><p>容器创建</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p /coderitl/redis/conf</span></span><br><span class="line"><span class="comment"># 添加 redis 的配置文件</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/coderitl/redis/conf</span></span><br><span class="line"><span class="comment"># 将提供的配置文件内容写入 redis.conf 文件中</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">redis.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 注意宿主机是否已经安装 安装需要注意端口</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -p 6379:6379 \</span></span><br><span class="line"><span class="string">    --name redis \</span></span><br><span class="line"><span class="string">    --restart=always \</span></span><br><span class="line"><span class="string">    --privileged=true \</span></span><br><span class="line"><span class="string">    -v /coderitl/redis/data/:/data \</span></span><br><span class="line"><span class="string">    -v /coderitl/redis/conf/redis.conf:/etc/redis/redis.conf \</span></span><br><span class="line"><span class="string">    -d redis:6.0.8 redis-server /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul><li><p>将<code>nginx</code>配置放置到<code>~/nginx-test/</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="attr">user</span>  <span class="string">root;</span></span><br><span class="line"><span class="attr">worker_processes</span>  <span class="string">auto;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">error_log</span>  <span class="string">/var/log/nginx/error.log notice;</span></span><br><span class="line"><span class="attr">pid</span>        <span class="string">/var/run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">worker_connections</span>  <span class="string">1024;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>sendfile(零拷贝,作用就是开启高效文件传输模式)</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>mmap</code>允许我们创建和修改那些因为太大而不能放入内存的文件,有了内存映射文件,我们就可以假定整个文件都放在内存中,而且可以把它当作非常大的数组来访问</p><p><code>mmap</code>需要<code>4</code>次上下文切换,<code>3</code>次数据拷贝</p><p><code>sendFile</code>需要<code>3</code>次上下文切换,最少<code>2</code>次数据拷贝</p><p><code>sendFile</code>可以利用<code>DMA</code>的方式直接把内核缓存区中的数据拷贝到网络协议栈,减少<code>CPU</code>拷贝,<code>mmap</code>则不能(<code>必须从内核拷贝到 Socket 缓存区，再从 Socket缓冲区拷贝</code>)</p></div></li></ul></li><li><p>拉取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 80:80 --name nginx \</span></span><br><span class="line"><span class="string">  -v ~/nginx-test/nginx.conf:/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="string">  nginx</span></span><br></pre></td></tr></table></figure><ul><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/direct/494693573e4947bc87d3294047a5f2f0.png" alt=""></p></li><li><p>文件部署的目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器内</span></span><br><span class="line"><span class="attr">/usr/share/nginx/html</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><ul><li><p><code>Dockerfile</code>是用来构建<code>Docker</code>镜像的文本文件,是由一条条构建镜像所需的指令和参数构成的脚本</p></li><li><p><code>Dockerfile</code>基础知识</p><ul><li>每条保留字指定都<code>必须为大写字母</code>且后面要跟随至少一个参数</li><li>指令按照从上到下,顺序执行</li><li><code>#</code>表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ul></li><li><p><code>Docker</code>执行<code>Dockerfile</code>的大致流程</p><ul><li><code>docker</code>从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似<code>docker commit</code>的操作提交一个新的镜像层</li><li><code>docker</code>在基于刚提交的镜像运行一个新容器</li><li>执行<code>dockerfile</code>中的下一条指令制导所有指令都执行完成</li></ul></li><li><p>保留字</p><ul><li><p><code>FROM</code>基础镜像,当前新镜像是基于那个镜像的,指定一个已经存在的镜像作为模板,第一条必须是<code>FROM</code></p></li><li><p><code>MAINTAINER</code>镜像维护者的姓名和邮箱地址</p></li><li><p><code>RUN</code>容器构建时需要运行的命令</p><ul><li><p>格式</p><ul><li><p><code>shell</code>格式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于,在终端操作的 shell 命令</span></span><br><span class="line"><span class="attr">RUN</span> <span class="string">&lt;命令行命令&gt; </span></span><br></pre></td></tr></table></figure></li><li><p><code>exec</code>格式</p></li></ul></li><li><p>运行时机: <code>docker build</code>时运行</p></li></ul></li><li><p><code>EXPOSE</code>当前容器对外暴露出的端口</p></li><li><p><code>WORKDIR</code>指定在创建容器后,终端默认登录的进来的工作目录,一个落脚点</p></li><li><p><code>USER</code>指定该镜像以什么样的用户去执行,如果都不指定,默认是<code>root</code></p></li><li><p><code>ENV</code>用来在构建镜像过程中设置环境变量</p></li><li><p><code>ADD</code>将宿主机目录下的文件拷贝进镜像且会自动处理<code>URL</code>和解压<code>tar</code>压缩包</p></li><li><p><code>COPY</code></p><ul><li><p>类似<code>ADD</code>,拷贝文件和目录到镜像中</p></li><li><p>将从构建上下文目录中<code>&lt;源路径&gt;</code>的文件按/目录复制到新的一层的镜像内的<code>&lt;目标路径&gt;</code>位置</p></li><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">COPY</span> <span class="string">src dest</span></span><br><span class="line"><span class="attr">src</span>: <span class="string">源文件或者源目录</span></span><br><span class="line"><span class="attr">dest</span>: <span class="string">容器内的指定路径,该路径不用事先创建好</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>VOLUME</code></p></li><li><p><code>CMD</code>指定容器启动后要干的事情</p><ul><li>只有最后一个<code>CMD</code>会生效</li><li>区别<ul><li><code>CMD</code>是在<code>docker run</code>时运行</li><li><code>RUN</code>是在<code>docker build</code>时运行</li></ul></li></ul></li><li><p><code>ENTRYPOINT</code></p><ul><li>作用: 也是用来指定一个容器启动时要运行的命令</li><li>类似于<code>CMD</code>指令,但是<code>ENTRYPOINT</code>不会被<code>docker run</code>后面的命令覆盖,而且这些命令行参数<code>会被当做参数送给 ENTRYPOINT</code>指令指定的程序</li></ul></li><li><p>总结</p><p><img src="https://img-blog.csdnimg.cn/direct/a96c82fb9c614dfca049eb55905397c4.png" alt=""></p></li></ul></li><li><p>编写<code>Dockerfile</code></p></li><li><p>构建</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">build -t 新镜像名字:TAG .</span></span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -it 新镜像名字:TAG</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker-网络"></a>Docker-网络</h4><ul><li><p>虚拟网桥</p><p><img src="https://img-blog.csdnimg.cn/7483847af4b44af0843a376ebed7121e.png" alt=""></p></li><li><p>查看<code>docker</code> 网络模式命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">network ls</span></span><br></pre></td></tr></table></figure></li><li><p>删除网络</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">network rm xxx</span></span><br></pre></td></tr></table></figure></li><li><p>能干什么</p><ul><li>容器间的互联和通信以及端口映射</li><li>容器<code>IP</code> 变动时候可以通过服务名直接网络通信而不受到影响</li></ul></li><li><p><code>docker0</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Docker</span> <span class="string">服务默认会创建一个docker0 网桥(其上有一个docker0 内部接口),该桥接网络的名称为docker0,它在内核层连通了其他的物理或虚拟网卡,这就将所有容器和本地主机都放到同一个物理网络,Docker 默认指定了docker0 接口的IP 地址和子网掩码, 让主机和容器之间可以通过网桥相互通信</span></span><br></pre></td></tr></table></figure></li><li><p>网络模式</p><p><img src="https://img-blog.csdnimg.cn/direct/dcfce42fddea4965b4eff10f9921a3d5.png" alt=""></p></li></ul><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h4><ul><li><p>概念</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Docker-Compose</span> <span class="string">是Docker 官方的开源项目,负责实现对Docker 容器集群的快速编排</span></span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">简化参数,使用*.yml</span> <span class="string">文件易于维护,yml 文件严格要求空格和缩进,不要使用tab</span></span><br></pre></td></tr></table></figure></li><li><p>下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64</span></span><br><span class="line"><span class="attr">curl</span> <span class="string">-SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># 如果是在 windows 上下载传输到linux,需要重命名</span></span><br><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">777 docker-compose</span></span><br><span class="line"><span class="comment"># 软连接【不需要再进行后续的环境变量配置】</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure><ul><li><p>本地传输方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入链接 https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 </span></span><br><span class="line"><span class="comment"># 下载 docker-compose-linux-x86_64</span></span><br><span class="line"><span class="comment"># 传输到 Linux 的 /usr/local/bin/</span></span><br><span class="line"><span class="comment"># chmod 777 docker-compose</span></span><br><span class="line"><span class="comment"># 软连接【不需要再进行后续的环境变量配置】</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/9ea438ce34f24de29f9fbc41f37fc28a.png" alt=""></p></li></ul></li><li><p>核心概念</p><ul><li><p>一个文件<code>docker-compose.yml</code></p></li><li><p>两要素</p><ul><li><p>服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">一个个应用容器实例,比如定单微服务,库存微服务,mysql容器,nginx容器或者reids容器</span></span><br></pre></td></tr></table></figure></li><li><p>工程</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">由一组关联的应用容器组成的一个完整业务单元,在</span> <span class="string">docker-compose.yml 文件中定义</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>使用步骤</p><ul><li>编写<code>Dockerfile</code>定义各个微服务应用并构建出对应的镜像文件</li><li>使用<code>docker-compose.yml</code>定义一个完整业务单元,安排好整体应用中的各个容器服务</li><li>最后,执行<code>docker-compose up</code>命令,来启动并运行整个应用程序,完成一键部署上线</li></ul></li><li><p>基础命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker-compose</span> <span class="string">-h                           # 查看帮助</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">up                           # 启动所有docker-compose服务</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">up -d                        # 启动所有docker-compose服务并后台运行</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">down                         # 停止并删除容器、网络、卷、镜像。</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">exec  yml里面的服务id          # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">ps                      # 展示当前docker-compose编排过的运行的所有容器</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">top                     # 展示当前docker-compose编排过的容器进程</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">logs  yml里面的服务id     # 查看容器输出日志</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">config     # 检查配置</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">config -q  # 检查配置，有问题才有输出</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">restart   # 重启服务</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">start     # 启动服务</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">stop      # 停止服务</span></span><br></pre></td></tr></table></figure></li><li><p>容器管理</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span> <span class="comment"># docker 版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 代表只要 docker 启动,那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/mysql</span> <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span> <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span> <span class="comment"># 指定端口号映射 (- 可以映射多个)</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span> <span class="comment"># 指定 MYSQL 的root用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span> <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span> <span class="comment"># 映射数据卷</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment"># 解决外部无法访问</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 代表只要 docker 启动,那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.0.45</span> <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span> <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span> <span class="comment"># 指定端口号映射 (- 可以映射多个)</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span> <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span> <span class="comment"># war 映射数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span> <span class="comment"># 日志映射数据卷</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">coderitl:</span>  <span class="comment"># 网络连接声明</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c4c75628a0e24055a91fd0efd072cace.png" alt="一键启动"></p><ul><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/direct/27a4dd8caba1432d9cba27ca4c982e6a.png" alt="启动的Docker内部的webapps目录是空的"></p></li></ul></li></ul><h4 id="Docker-安装脚本"><a href="#Docker-安装脚本" class="headerlink" title="Docker-安装脚本"></a>Docker-安装脚本</h4><ul><li><p>脚本整理</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto.........................................................\e[0m\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto remove docker...........\e[0m&quot;</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum remove docker \</span></span><br><span class="line"><span class="string">                 docker-client \</span></span><br><span class="line"><span class="string">                 docker-client-latest \</span></span><br><span class="line"><span class="string">                 docker-common \</span></span><br><span class="line"><span class="string">                 docker-latest \</span></span><br><span class="line"><span class="string">                 docker-latest-logrotate \</span></span><br><span class="line"><span class="string">                 docker-logrotate \</span></span><br><span class="line"><span class="string">                 docker-engine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto download utils...........\e[0m\n&quot; </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install -y yum-utils  device-mapper-persistent-data  lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto add repo...........\e[0m\n&quot; </span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto yum makecache...........\e[0m\n&quot; </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">makecache fast</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto install docker-ce...........\e[0m\n&quot;</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto config daemon.json...........\e[0m\n&quot;</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">mkdir -p /etc/docker</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>:<span class="string">[</span></span><br><span class="line">    <span class="attr">&quot;https</span>:<span class="string">//eyy45bvx.mirror.aliyuncs.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//hub-mirror.c.163.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.aliyuncs.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.docker-cn.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">    <span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto daemon-reload...........\e[0m\n&quot;</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34minto restart docker...........\e[0m\n&quot;</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl restart docker</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">-e &quot;\e[1m\e[4m\e[34mend.........................................................\e[0m\n&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h4><ul><li><p>在多个停止的容器中,启动目标的容器</p><ul><li><p>首先,创建容器时创建名称</p></li><li><p>通过如下方式获取信息</p><p><img src="https://img-blog.csdnimg.cn/direct/67ce1265f5a34944912bb65799d81e5d.png" alt=""></p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON-相关问题使用</title>
      <link href="/2024/01/09/7882bcfa/"/>
      <url>/2024/01/09/7882bcfa/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="JSON-相关问题使用"><a href="#JSON-相关问题使用" class="headerlink" title="JSON-相关问题使用"></a>JSON-相关问题使用</h3><h4 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h4><ul><li><p>介绍</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>FastJson</code>是阿里巴巴的开源<code>JSON</code>解析库,它可以解析<code>JSON</code>格式的字符串，支持将<code>Java Bean</code>序列化为<code>JSON</code>字符串,也可以从<code>JSON</code>字符串反序列化到<code>JavaBean</code></p></div></li><li><p>优点</p><ul><li><p>速度快</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>fastjson</code>相对其他<code>JSON</code>库的特点是快,从<code>2011</code>年<code>fastjson</code>发布<code>1.1x</code>版本之后,其性能从未被其他<code>Java</code>实现的<code>JSON</code>库超越</p></div></li></ul></li></ul><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><ul><li><p>序列化是指将<code>Java</code>对象转成<code>json</code>格式字符串的过程,<code>JavaBean</code>对象,<code>List</code>集合对象,<code>Map</code>集合,为应用最广泛的</p></li><li><p><code>JSON.toJSONString</code></p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.42<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>序列化<code>Java</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setStuName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">12</span>);</span><br><span class="line">    <span class="comment">// &#123;&quot;age&quot;:12,&quot;stuName&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>序列化<code>List</code>集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listFastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>), <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>));</span><br><span class="line">    <span class="comment">// [&#123;&quot;age&quot;:12,&quot;stuName&quot;:&quot;张三&quot;&#125;,&#123;&quot;age&quot;:13,&quot;stuName&quot;:&quot;李四&quot;&#125;]</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>序列化<code>Map</code>集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapFastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Student&gt;  map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;张三&quot;</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>));</span><br><span class="line">    map.put(<span class="string">&quot;李四&quot;</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>));</span><br><span class="line">    <span class="comment">// &#123;&quot;李四&quot;:&#123;&quot;age&quot;:13,&quot;stuName&quot;:&quot;李四&quot;&#125;,&quot;张三&quot;:&#123;&quot;age&quot;:12,&quot;stuName&quot;:&quot;张三&quot;&#125;&#125;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><ul><li><p><code>json</code>字符串反序列化为<code>Object</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:12,\&quot;stuName\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JSON.parseObject(json, Student.class);</span><br><span class="line">    <span class="comment">// Student(stuName=张三, age=12)</span></span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>json</code>字符串反序列化为<code>List</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listFastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;age\&quot;:12,\&quot;stuName\&quot;:\&quot;张三\&quot;&#125;,&#123;\&quot;age\&quot;:13,\&quot;stuName\&quot;:\&quot;李四\&quot;&#125;]&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; studentList = JSON.parseArray(json, Student.class);</span><br><span class="line">    <span class="comment">// [Student(stuName=张三, age=12), Student(stuName=李四, age=13)]</span></span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>json</code>字符串反序列化为<code>Map</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不安全的</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapFastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;李四\&quot;:&#123;\&quot;age\&quot;:13,\&quot;stuName\&quot;:\&quot;李四\&quot;&#125;,\&quot;张三\&quot;:&#123;\&quot;age\&quot;:12,\&quot;stuName\&quot;:\&quot;张三\&quot;&#125;&#125; &quot;</span>;</span><br><span class="line">    Map&lt;String, Student&gt; studentMap = JSON.parseObject(json, Map.class);</span><br><span class="line">    <span class="comment">// &#123;李四=&#123;&quot;stuName&quot;:&quot;李四&quot;,&quot;age&quot;:13&#125;, 张三=&#123;&quot;stuName&quot;:&quot;张三&quot;,&quot;age&quot;:12&#125;&#125; Map 没有泛型（是不安全的集合）</span></span><br><span class="line">    System.out.println(studentMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapFastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;李四\&quot;:&#123;\&quot;age\&quot;:13,\&quot;stuName\&quot;:\&quot;李四\&quot;&#125;,\&quot;张三\&quot;:&#123;\&quot;age\&quot;:12,\&quot;stuName\&quot;:\&quot;张三\&quot;&#125;&#125; &quot;</span>;</span><br><span class="line">    Map&lt;String, Student&gt; studentMap = JSON.parseObject(json, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Student&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 李四::Student(stuName=李四, age=13)</span></span><br><span class="line">    <span class="comment">// 张三::Student(stuName=张三, age=12)</span></span><br><span class="line">    <span class="keyword">for</span> (String key : studentMap.keySet()) &#123;</span><br><span class="line">        System.out.println(key + <span class="string">&quot;::&quot;</span> + studentMap.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>美化输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fastJsonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>), <span class="literal">true</span>);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0ff9917ae01a471ba007add42e841848.png" alt=""></p></li></ul><h4 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对 LocalDateTime 等 jdk8 时间日期 api 转换支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h5><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate registerDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>序列化为<code>json</code>字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJackson</span> &#123;</span><br><span class="line">    <span class="comment">// 是线程安全的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局配置</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        objectMapper.findAndRegisterModules();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">objectToJsonStr</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">18</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), LocalDate.now());</span><br><span class="line">        <span class="type">String</span> <span class="variable">stuToJson</span> <span class="operator">=</span> objectMapper.writeValueAsString(student);</span><br><span class="line">        <span class="comment">// &#123;&quot;stuName&quot;:&quot;tom&quot;,&quot;age&quot;:18,&quot;birthday&quot;:&quot;2024-01-09&quot;,&quot;registerDate&quot;:&quot;2024-01-09&quot;&#125;</span></span><br><span class="line">        System.out.println(stuToJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">objectToJsonStr</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;stuName\&quot;:\&quot;tom\&quot;,\&quot;age\&quot;:18,\&quot;birthday\&quot;:\&quot;2024-01-09\&quot;,\&quot;registerDate\&quot;:\&quot;2024-01-09\&quot;&#125; &quot;</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> objectMapper.readValue(json, Student.class);</span><br><span class="line">    <span class="comment">// Student(stuName=tom, age=18, birthday=Tue Jan 09 08:00:00 CST 2024, registerDate=2024-01-09)</span></span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-高级知识掌握</title>
      <link href="/2024/01/08/c6ef98e/"/>
      <url>/2024/01/08/c6ef98e/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="MySQL-高级知识掌握"><a href="#MySQL-高级知识掌握" class="headerlink" title="MySQL-高级知识掌握"></a>MySQL-高级知识掌握</h3><h4 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h4><ul><li>数据库: 数据存储的仓库</li><li>数据库管理系统：操纵和管理数据库的大型软件</li><li><code>SQL</code>操作关系行数据库的编程语言,是一套标准</li></ul><h4 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h4><ul><li><p>关系型数据库</p><ul><li>概念：建立在关系模型基础上,由多张相互连接的二维表组成的数据库</li><li>特点<ul><li>使用表存储数据,格式统一,便于维护</li><li>使用<code>SQL</code>语言操作,标准统一,使用方便</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/4e3f9d3e8e074fa4962ff0e41480cea2.png" alt=""></p></li></ul><h4 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL-分类"></a>SQL-分类</h4><ul><li><p>分类</p><p><img src="https://img-blog.csdnimg.cn/direct/8598030e43f54290ab75953b3cf6dce8.png" alt=""></p></li></ul><h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h4><ul><li><p><code>DDL</code>数据库操作</p><ul><li><p>查询</p><ul><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure></li><li><p>查询当前使用的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] test;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- drop database if exists aa;</span></span><br><span class="line"><span class="keyword">drop</span> database test;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>DDL</code>表操作</p><ul><li><p>查询当前数据库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure></li><li><p>查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> tableName;</span><br></pre></td></tr></table></figure></li><li><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tableName;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">字段名 字段类型 [comment 字段注释],</span><br><span class="line">    字段名 字段类型 [comment 字段注释]</span><br><span class="line">) [comment 表注释];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>DDL</code>修改表</p><ul><li><p>添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> 字段名 类型(长度) [comment 注释] [约束]; </span><br></pre></td></tr></table></figure></li><li><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure></li><li><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束]; ;</span><br></pre></td></tr></table></figure></li><li><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>DDL</code>表操作-删除</p><ul><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>删除指定表,并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML(数据操作语言)"></a>DML(数据操作语言)</h4><ul><li><p><code>DML</code>数据操作语言,用来对数据库中表的数据记录进行增删改操作</p></li><li><p>添加数据(<code>insert</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tableName <span class="keyword">values</span>();</span><br></pre></td></tr></table></figure></li><li><p>修改数据(<code>update</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tableName <span class="keyword">set</span> xx<span class="operator">=</span>xx <span class="keyword">where</span> xxx<span class="operator">=</span>xxx</span><br></pre></td></tr></table></figure></li><li><p>删除数据(<code>delete</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tableName <span class="keyword">where</span> xxx<span class="operator">=</span>xxx</span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>插入数据时,指定的字段顺序需要和值的顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小,应该在字段的规定范围内</li></ul></li></ul><h4 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h4><ul><li><p><code>DQL</code>数据查询语言,用来查询数据库中表的记录</p></li><li><p>聚合函数</p><ul><li><p>将一列数据作为一个整体,进行纵向计算</p><ul><li><code>null</code>值<code>不</code>参与所有<code>聚合函数</code>运算</li></ul></li><li><p>分组查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><ul><li><code>where</code>和<code>having</code>区别<ul><li>执行时机不同:<code>where</code>是分组之前进行过滤,不满足<code>where</code>条件,不参与分组;而<code>having</code>是分组之后对结果进行过滤</li><li>判断条件不同:<code>where</code>不能对聚合函数进行判断,而<code>having</code>可以</li></ul></li></ul></li></ul></li><li><p>顺序</p><ul><li><p>编写顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit </span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure></li><li><p>执行顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span></span><br><span class="line">表名</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h4><ul><li><p><code>DCL</code>用来管理数据库用户,控制数据库的访问、权限</p></li><li><p>管理用户</p><ul><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>权限控制</p><p><img src="https://img-blog.csdnimg.cn/direct/9a8c1aedb4cf4a789ab78d5feb152b45.png" alt=""></p><ul><li><p>查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><ul><li><p>函数总结</p><p><img src="https://img-blog.csdnimg.cn/direct/d4a9e20c4b5c474da51b4a2ecace9434.png" alt=""></p></li></ul><h5 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h5><ul><li><code>ceil(x)</code>: 向上取整</li><li><code>floor(x)</code>: 向下取整</li><li><code>mod(x,y)</code>:返回<code>x/y</code>的模</li><li><code>rand()</code>: 返回<code>0~1</code>内的随机数</li><li><code>round(x,y)</code>: 求参数<code>x</code>的四舍五入的值,保留<code>y</code>位小数</li></ul><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><ul><li><p><code>curdate()</code>: 返回当前日期</p></li><li><p><code>curtime()</code>: 返回当前时间</p></li><li><p><code>now()</code>: 返回当前日期和时间</p></li><li><p><code>year(date)</code>: 获取指定<code>date</code>的年份</p></li><li><p><code>month(date)</code>: 获取指定<code>date</code>的月份</p></li><li><p><code>day(date)</code>: 获取指定<code>date</code>的日期</p></li><li><p><code>date_add(date,interval expr type)</code>: 返回一个日期/时间值加上一个时间间隔<code>expr</code>后的时间值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add(now,<span class="type">interval</span> <span class="number">70</span> <span class="keyword">year</span>) <span class="comment">-- 70年后</span></span><br></pre></td></tr></table></figure></li><li><p><code>datediff(date1,date2)</code>: 返回起始时间<code>date1</code>和结束时间<code>date2</code>之间的天数</p></li></ul><h5 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h5><ul><li><code>if(value,true,false</code>)如果为<code>true</code>，则返回<code>t</code>，否则返回<code>f</code></li><li><code>ifnull(value1,value2)</code>如果<code>value1</code>不为空,返回<code>value1</code>,否则返回<code>value2</code></li><li><code>case when [val1] then [res1]..else [default] end</code>如果<code>val</code>为<code>true</code>，返回<code>res1</code>，否则返回<code>default</code>默认值</li><li><code>case [expr] when [val] then [res1]..else [default] end</code>如果<code>expr</code>的值等于<code>val1</code>，返回<code>res1</code>,否则返回<code>default</code>默认值</li></ul><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h5 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h5><ul><li><p>概述</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>项目开发中,在进行数据库表结构涉及时,会根据业务需求及业务模块之间的关系,分析并设计表结构,由于业务之间相互关联,所以各个表结构之间也存着各种关系,基本上分为三种</p><ul><li>一对多(多对一)</li><li>多对对</li><li>一对一</li></ul></div></li></ul><h5 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h5><ul><li><p>笛卡尔积：笛卡尔积是指在数学中,两个集合<code>A</code>集合和<code>B</code>集合的所有组合情况(<code>在多表查询时,需要消除无效的笛卡尔积</code>) </p></li><li><p>分析</p><p><img src="https://img-blog.csdnimg.cn/direct/300a3be6d06445c48129f615373c16e0.png" alt=""></p></li></ul><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><ul><li>相当于查询A、B交集部分的数据</li></ul><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><ul><li>当前表与自身的连接查询,自连接必须使用表别名</li></ul><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SQL</code>语句中嵌套<code>select</code>语句,称为嵌套查询,又称<code>子查询</code></p></div></li><li><p>根据子查询结果不同,分为</p><ul><li><p>标量子查询(子查询结果为单个值)</p></li><li><p>列子查询(子查询结果为一列)</p><ul><li>常用操作符：<code>In、Not in、any、some、all</code></li></ul></li><li><p>行子查询(子查询结果为一列)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与张无忌的薪资以及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> salary,managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary,managerid) <span class="operator">=</span> (<span class="keyword">select</span> salary,managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>表子查询(子查询结果为多行多列)</li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>事务</code>是一组操作的集合,他是一个不可分割的工作单位,事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求,即<code>这些操作要么同时成功,要么同时失败</code></p><p><img src="https://img-blog.csdnimg.cn/direct/69a92a6e913842fc963429cc97ff76b2.png" alt=""></p></div></li><li><p>四大特性</p><ul><li>原子性：事务是不可分割的最小操作单元,要么全部成功,要么全部失败</li><li>一致性：事务完成时,必须使所有的数据都保持一致状态</li><li>隔离性：数据库系统提供的隔离机制,保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚,它对数据库中的数据的改变就是永久的</li></ul></li><li><p>并发事物引发的问题</p><p><img src="https://img-blog.csdnimg.cn/direct/00b38e074f164a1a91d05305b1dae4db.png" alt=""></p><ul><li><p>脏读</p><p><img src="https://img-blog.csdnimg.cn/direct/7ce56e4aee3144eba8ab464a085a9946.png" alt=""></p></li><li><p>不可重复读</p><p><img src="https://img-blog.csdnimg.cn/direct/fed51bad76d5464994c07d38c20896ac.png" alt="并发场景下"></p></li><li><p>幻读</p><p><img src="https://img-blog.csdnimg.cn/direct/24e54c2e336344df9507eba08891b810.png" alt=""></p></li></ul></li><li><p>事物的隔离级别</p><p><img src="https://img-blog.csdnimg.cn/direct/ab8c56142e224ba09dcf92b7f2935a19.png" alt=""></p><ul><li><p>设置事务的隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看事务隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="comment">-- 设置事务隔离级别</span></span><br><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level &#123;read uncommitted <span class="operator">|</span> read committed <span class="operator">|</span> repeatable read <span class="operator">|</span> serializable&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><ul><li><p><code>InnoDB</code>存储引擎</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>具备外键支持功能的事务存储引擎</li><li><code>MySQL 大于等于 5.5</code>之后,默认采用<code>InnoDB</code>引擎</li><li>除了增加和查询外,还需要更新、删除等操作，那么,应优先选择<code>InnoDB</code>引擎</li></ul></div></li><li><p>存储引擎选择</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在选择存储引擎时,应根据应用系统的特点选择合适的存储引擎,对于复杂的应用系统,还可以根据实际情况选择多种存储引擎进行组合</p></div><ul><li><p><code>InnoDB</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>是<code>MySQL</code>的默认存储引擎,支持事务、外键、如果应用对事务的完整性有比较高的要求,在并发条件下要求数据的一致性,数据操作除了插入和查询之外,还包括更多的更新和删除操作,那么<code>InnoDB</code>存储引擎是比较合适的选择</p></div></li><li><p><code>MyISAM</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>如果应用是以读操作和插入操作为主,只有很少的更新和删除操作,并且对事务的完整性,并发性要求不是很高,那么选择这个存储引擎是比较合适的</p></div></li><li><p><code>MEMORY</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>将所有的数据保存在内存中,访问速度快,通常用于临时表及缓存.<code>MEMORY</code>的缺陷就是对表的大小有限制,太大的表无法缓存在内存中,而且无法保障数据的安全性</p></div></li></ul></li></ul><h4 id="Linux安装MySQL"><a href="#Linux安装MySQL" class="headerlink" title="Linux安装MySQL"></a>Linux安装MySQL</h4><ul><li><p><code>docker</code>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机已经安装了 mysql 需要注意端口</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 3306:3306 --privileged=true \</span></span><br><span class="line"><span class="string">    -v /coderitl/mysql/log:/var/log/mysql \</span></span><br><span class="line"><span class="string">    -v /coderitl/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string">    -v /coderitl/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string">    -e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string">    --name mysql \</span></span><br><span class="line"><span class="string">mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci </span></span><br></pre></td></tr></table></figure><ul><li><p>在宿主机<code>/coderitl/mysql/conf/</code>，提前创建配置文件,否则挂在后会是一个目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">my.cnf</span></span><br></pre></td></tr></table></figure></li><li><p>配置添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 在 /coderitl/mysql/conf/my.cnf 中添加以下内容以设置字符集和校对规则</span></span><br><span class="line">    <span class="section">[client]</span></span><br><span class="line">    <span class="attr">default-character-set</span> = utf8mb4</span><br><span class="line">    </span><br><span class="line">    <span class="section">[mysql]</span></span><br><span class="line">    <span class="attr">default-character-set</span> = utf8mb4</span><br><span class="line">    </span><br><span class="line">    <span class="section">[mysqld]</span></span><br><span class="line">    <span class="attr">character-set-server</span> = utf8mb4</span><br><span class="line">    <span class="attr">collation-server</span> = utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">+ 配置写入前先查询一下</span><br><span class="line">  </span><br><span class="line">  ```sql</span><br><span class="line">  show variables like &#x27;slow_query_log&#x27;<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/094837bf8f444381a5c171e638282deb.png" alt=""></p><ul><li><p>在<code>/coderitl/mysql/conf/my.cnf</code>写入慢查询开启的配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment"># 慢查询的开启</span></span><br><span class="line">      <span class="attr">slow_query_log</span>=<span class="number">1</span></span><br><span class="line">      <span class="comment"># 阈值时间</span></span><br><span class="line">      <span class="attr">long_query_time</span>=<span class="number">1</span></span><br><span class="line">      <span class="comment"># 慢日志生成的文件名</span></span><br><span class="line">      <span class="attr">slow_query_log_file</span> = /var/log/mysql/slow_query.log</span><br><span class="line">  </span><br><span class="line">+ 内容写入后进行容器的重启</span><br><span class="line">  </span><br><span class="line">+ 进入`mysql`的容器查看是否开启配置</span><br><span class="line">  </span><br><span class="line">  !<span class="section">[]</span>(https://img-blog.csdnimg.cn/direct/3693ad32c57c4c319f0b8ae9cd55ae82.png)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 索引</span></span><br><span class="line"></span><br><span class="line">+ 什么是索引</span><br><span class="line"></span><br><span class="line">  &#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line"></span><br><span class="line">  `索引(index)`是帮助`MySQL`高效获取数据的`数据结构(有序)`,在数据之外,数据库系统还维护着满足特定查找算法的数据结构,这些数据结构以某种方式引用(指向)数据,这样就可以在这些数据结构上实现高级查找算法,这种数据结构就是索引</span><br><span class="line"></span><br><span class="line">  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">  + 没有索引的时候,一条查询记录会进行全表扫描,效率极低</span><br><span class="line"></span><br><span class="line">    ```sql</span><br><span class="line">    select * from user where <span class="attr">age</span>=<span class="number">45</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>有索引的时候</p><p><img src="https://img-blog.csdnimg.cn/direct/870e37598feb414fb302419c9005ccb0.png" alt="假如是二叉树结构的索引"></p></li></ul></li><li><p>索引的优缺点</p><ul><li>优点<ul><li>提高数据检索的效率,降低数据库的<code>IO</code>成本</li><li>通过索引列对数据进行排序,降低数据库排序的成本,降低<code>CPU</code>的消耗</li></ul></li><li>缺点<ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率,同时却也降低了更新表的速度,如果对表进行<code>insert、update、delete</code>时,效率降低</li></ul></li></ul></li><li><p>索引的数据结构: 详细了解了<code>B+Tree 、Hash</code>索引结构</p><ul><li><p>二叉树</p><p><img src="https://img-blog.csdnimg.cn/direct/8acf2836b80a483d8ac44660d583b8ce.png" alt=""></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>二叉树缺点: 顺序插入时,会形成一个链表,查询性能大大降低,层级较深,检索速度慢</p><p>红黑树: 大数据量情况下,层级较深,检索速度慢</p></div></li><li><p><code>B-Tree(多路平衡查找树)</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>以一颗最大度数为<code>5</code>阶的<code>b-tree</code>为例(每个节点最多存储<code>4</code>个<code>key</code>，<code>5</code>个指针)</p><p>树的度数指的是一个节点的子节点个数</p></div><p><img src="https://img-blog.csdnimg.cn/direct/f36493f62037465ba4be633e41afbae0.png" alt=""></p></li><li><p><code>B+Tree</code></p><p><img src="https://img-blog.csdnimg.cn/direct/63a37e35e944403c9d24068939281f98.png" alt=""></p><blockquote><p>所有数据都会出现在<code>叶子节点</code>，非叶子节点会起一个索引的作用,叶子节点是一个单项链表结构</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/4c45617ae922479aa0fa320bfc9015b4.png" alt=""></p><ul><li><p><code>MySQL</code>中的<code>B+Tree</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>MySQL</code>索引数据结构对经典的<code>B+Tree</code>进行了优化,在原<code>B+Tree</code>的基础上,增加了一个指向相邻叶子节点的链表指针,就形成了带有顺序指针的<code>B+Tree</code>,提高区间访问的性能</p></div><p><img src="https://img-blog.csdnimg.cn/direct/115d8caa234f4445a355def94f175eda.png" alt=""></p></li></ul></li><li><p><code>Hash</code>索引特点</p><ul><li><code>Hash</code>索引只能用于对等比较(<code>=,in</code>),不支持范围查询(<code>between,&gt;,&lt;</code>)</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次索引就可以了,效率通常要高于<code>B+Tree</code>索引</li></ul></li></ul></li></ul><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ul><li><p>分类</p><p><img src="https://img-blog.csdnimg.cn/direct/4d22ffed2b0343ae9faa33ad67bde887.png" alt=""></p></li><li><p>在<code>InnoDB</code>存储引擎中,根据索引的存储形式,又可以分为以下两种</p><p><img src="https://img-blog.csdnimg.cn/direct/02b8a8b3d77b4bb0bd201d27b1f10c70.png" alt=""></p><ul><li><p>聚集索引选取规则</p><ul><li>如果存在主键,主键索引就是聚集索引</li><li>如果不存在主键,将使用第一个唯一索引作为聚集索引</li><li>如果表没有主键,或没有合适的唯一索引,则<code>InnoDB</code>会自动生成一个<code>rowId</code>作为隐藏的聚集索引</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/304bfaa2df05495798da9a0aee506a15.png" alt="聚集索引与二级索引样例"></p><blockquote><p>在二级索引中,叶子节点放的是对应值(<code>name=Kit,...</code>)的<code>id</code>,而聚集索引的叶子节点放的是这一行数据</p></blockquote></li></ul></li><li><p>添加索引后的查询过程分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> &quot;Arm&quot;; <span class="comment">-- 分析执行</span></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://img-blog.csdnimg.cn/direct/1aef54607e1e40989fd2c34d59817dd0.png" alt=""></p><h4 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h4><ul><li><p>创建索引</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unique: 唯一索引</span></span><br><span class="line"><span class="comment"># fulltext: 全文索引</span></span><br><span class="line"><span class="comment"># 默认是常规索引</span></span><br><span class="line"><span class="attr">create</span> <span class="string">[unique | fulltext] index index_name on table_name (index_col_name,...);</span></span><br></pre></td></tr></table></figure></li><li><p>查询索引</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">show</span> <span class="string">index from table_name;</span></span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">drop</span> <span class="string">index index_name on table_name;</span></span><br></pre></td></tr></table></figure></li><li><p>案例练习</p><ul><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    profession <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender ENUM(<span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Other&#x27;</span>),</span><br><span class="line">    status <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    createtime <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入10条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, phone, email, profession, age, gender, status, createtime) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;123-456-7890&#x27;</span>, <span class="string">&#x27;john.doe@example.com&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 08:30:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Jane Smith&#x27;</span>, <span class="string">&#x27;987-654-3210&#x27;</span>, <span class="string">&#x27;jane.smith@example.com&#x27;</span>, <span class="string">&#x27;Doctor&#x27;</span>, <span class="number">35</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 09:15:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Michael Johnson&#x27;</span>, <span class="string">&#x27;555-555-5555&#x27;</span>, <span class="string">&#x27;michael.johnson@example.com&#x27;</span>, <span class="string">&#x27;Teacher&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 10:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Emily Davis&#x27;</span>, <span class="string">&#x27;777-777-7777&#x27;</span>, <span class="string">&#x27;emily.davis@example.com&#x27;</span>, <span class="string">&#x27;Lawyer&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Inactive&#x27;</span>, <span class="string">&#x27;2024-03-04 11:45:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;David Brown&#x27;</span>, <span class="string">&#x27;333-333-3333&#x27;</span>, <span class="string">&#x27;david.brown@example.com&#x27;</span>, <span class="string">&#x27;Designer&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 13:20:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Sarah Wilson&#x27;</span>, <span class="string">&#x27;444-444-4444&#x27;</span>, <span class="string">&#x27;sarah.wilson@example.com&#x27;</span>, <span class="string">&#x27;Nurse&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 14:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Christopher Lee&#x27;</span>, <span class="string">&#x27;666-666-6666&#x27;</span>, <span class="string">&#x27;christopher.lee@example.com&#x27;</span>, <span class="string">&#x27;Programmer&#x27;</span>, <span class="number">27</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 15:30:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Amanda Martinez&#x27;</span>, <span class="string">&#x27;222-222-2222&#x27;</span>, <span class="string">&#x27;amanda.martinez@example.com&#x27;</span>, <span class="string">&#x27;Manager&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 16:45:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Daniel Taylor&#x27;</span>, <span class="string">&#x27;888-888-8888&#x27;</span>, <span class="string">&#x27;daniel.taylor@example.com&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Inactive&#x27;</span>, <span class="string">&#x27;2024-03-04 17:10:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Jessica White&#x27;</span>, <span class="string">&#x27;999-999-9999&#x27;</span>, <span class="string">&#x27;jessica.white@example.com&#x27;</span>, <span class="string">&#x27;Artist&#x27;</span>, <span class="number">31</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;2024-03-04 18:00:00&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8c2e5c4f536b41d9aff772bf7afdd1a1.png" alt="主键索引"></p></li></ul></li></ul><ul><li><p>完成以下练习</p><ul><li><p><code>name</code>字段为姓名字段,该字段的值可能会重复,为该字段创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_users_name <span class="keyword">ON</span> users ( NAME );</span><br></pre></td></tr></table></figure></li><li><p><code>phone</code>手机号字段的值,是非空,且唯一的，为该字段创建唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_users_phone <span class="keyword">ON</span> users ( phone );</span><br></pre></td></tr></table></figure></li><li><p>为<code>profession、age、status</code>创建联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_users_pro_age_sta <span class="keyword">ON</span> users ( profession, age, `status` );</span><br></pre></td></tr></table></figure></li><li><p>为<code>email</code>建立合适的索引来提升查询效率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_users_email <span class="keyword">ON</span> users ( email );</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0a95a6c053634e0f977ffd40e315aaf9.png" alt=""></p></li></ul></li></ul><h4 id="SQL-性能分析"><a href="#SQL-性能分析" class="headerlink" title="SQL-性能分析"></a>SQL-性能分析</h4><ul><li><p><code>SQL</code>执行频率</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>MySQL</code>客户端连接成功后,通过<code>show [session | global] status</code>命令可以提供服务器状态信息。通过如下指令,可以查看当前数据库的<code>insert,update,delete,select</code>的访问频次  </p></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Com 后面 7 个 _,主要关注: Com_insert、Com_select、Com_update、Com_delete</span></span><br><span class="line"><span class="attr">mysql&gt;</span> <span class="string">show global status like &#x27;Com_______&#x27;;</span></span><br><span class="line"><span class="attr">+---------------+-------+</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Variable_name | Value |</span></span><br><span class="line"><span class="attr">+---------------+-------+</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_binlog    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_commit    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_delete    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_import    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_insert    | 1     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_repair    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_revoke    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_select    | 20    |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_signal    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_update    | 0     |</span></span><br><span class="line"><span class="attr">|</span> <span class="string">Com_xa_end    | 0     |</span></span><br><span class="line"><span class="attr">+---------------+-------+</span></span><br><span class="line"><span class="attr">11</span> <span class="string">rows in set (0.00 sec)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>慢查询日志</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>慢查询日志记录了所有执行时间超过指定参数(<code>long_query_time</code>,单位:<code>秒</code>,默认<code>10s</code>)的所有的<code>SQL</code>语句的日志</p><p><code>MySQL</code>的慢查询日志默认没有开启,需要在<code>MySQL</code>的配置文件(<code>/etc/my.cnf</code>)中配置如下信息</p></div><ul><li><p>查看慢查询是否开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>配置开启慢查询记录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 MySQL 慢日志查询开关</span></span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="number">1</span></span><br><span class="line"><span class="comment"># 设置慢日志的时间为 2s,SQL语句执行超过2s,就会被视为慢查询,记录慢查询日志</span></span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>查看<code>docker</code>容器内的<code>sql</code>慢日志记录的文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log_file&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e571bef3b70e447b98391172331756e6.png" alt="以下目录是在容器内的目录位置"></p></li><li><p>慢查询<code>SQL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> example_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> example_table <span class="keyword">where</span> data <span class="keyword">like</span> <span class="string">&#x27;Data 100000&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0c7885ad9b6644b1a96ad7b66b64bc02.png" alt=""></p></li></ul></li><li><p><code>profile</code>详情</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>show profiles</code>能够在做<code>SQL</code>优化时帮助我们了解时间都耗到哪里去了,通过<code>have_profiling</code>参数,能够看到当前<code>MySQL</code>是否支持<code>profile</code>操作</p></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql&gt;</span> <span class="string">select @@have_profiling;</span></span><br><span class="line"><span class="attr">+------------------+</span></span><br><span class="line"><span class="attr">|</span> <span class="string">@@have_profiling |</span></span><br><span class="line"><span class="attr">+------------------+</span></span><br><span class="line"><span class="attr">|</span> <span class="string">YES              |</span></span><br><span class="line"><span class="attr">+------------------+</span></span><br><span class="line"><span class="attr">1</span> <span class="string">row in set, 1 warning (0.00 sec)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 默认 profiling 是关闭的,可以通过 set 语句在 session/global 级别开启 profiling</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>查看是否开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">0</span>: 就是关闭的</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@profiling</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行一系列的业务<code>SQL</code>操作,然后通过如下指令查看指令的执行耗时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看每一条 <span class="keyword">SQL</span> 的耗时情况</span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"># 查看指定 query_id 的 <span class="keyword">SQL</span> 语句各个阶段的耗时情况</span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query query_id;</span><br><span class="line"># 查看指定 query_id 的 <span class="keyword">SQL</span> 语句的 CPU 使用情况</span><br><span class="line"><span class="keyword">show</span> profile cpu <span class="keyword">for</span> query query_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00027900</span> <span class="operator">|</span> <span class="keyword">select</span> @<span class="variable">@profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status               <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting             <span class="operator">|</span> <span class="number">0.000180</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions <span class="operator">|</span> <span class="number">0.000012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables       <span class="operator">|</span> <span class="number">0.000015</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                 <span class="operator">|</span> <span class="number">0.000007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing           <span class="operator">|</span> <span class="number">0.000011</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing            <span class="operator">|</span> <span class="number">0.000012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                  <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>            <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables       <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items        <span class="operator">|</span> <span class="number">0.000013</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up          <span class="operator">|</span> <span class="number">0.000013</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profile cpu <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> Status               <span class="operator">|</span> Duration <span class="operator">|</span> CPU_user <span class="operator">|</span> CPU_system <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> starting             <span class="operator">|</span> <span class="number">0.000180</span> <span class="operator">|</span> <span class="number">0.000023</span> <span class="operator">|</span>   <span class="number">0.000150</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions <span class="operator">|</span> <span class="number">0.000012</span> <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span>   <span class="number">0.000009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables       <span class="operator">|</span> <span class="number">0.000015</span> <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span>   <span class="number">0.000013</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                 <span class="operator">|</span> <span class="number">0.000007</span> <span class="operator">|</span> <span class="number">0.000001</span> <span class="operator">|</span>   <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing           <span class="operator">|</span> <span class="number">0.000011</span> <span class="operator">|</span> <span class="number">0.000001</span> <span class="operator">|</span>   <span class="number">0.000009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing            <span class="operator">|</span> <span class="number">0.000012</span> <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span>   <span class="number">0.000010</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                  <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span> <span class="number">0.000000</span> <span class="operator">|</span>   <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>            <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span> <span class="number">0.000001</span> <span class="operator">|</span>   <span class="number">0.000007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables       <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span> <span class="number">0.000001</span> <span class="operator">|</span>   <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items        <span class="operator">|</span> <span class="number">0.000013</span> <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span>   <span class="number">0.000011</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up          <span class="operator">|</span> <span class="number">0.000013</span> <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span>   <span class="number">0.000011</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+----------+------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>explain</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>explain</code>或者<code>desc</code>命令获取<code>MySQL</code>如何执行<code>Select</code>语句的信息,包括在<code>select</code>语句执行过程中表如何连接和连接的顺序</p></div><ul><li><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表明 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c62779e4beef4cf39b2f5f9c3048ea0a.png" alt=""></p></li><li><p>字段解释说明</p><ul><li><code>id</code>: <code>select</code>查询的序列号,表示查询中执行了<code>select</code>子句或者是操作表的顺序(<code>id相同,执行顺序从上到下;id不同,值越大,越先执行</code>)</li><li><code>select_type</code>：这个字段表示了查询的类型，可能的值包括：<ul><li><code>SIMPLE</code>：简单查询，不包含子查询或<code>UNION</code></li><li><code>PRIMARY</code>：查询中的最外层查询。</li><li><code>UNION</code>：表示该查询是一个UNION的结果。</li><li><code>SUBQUERY</code>：子查询。</li><li><code>DERIVED</code>：派生表，即从<code>FROM</code>子句的<code>SELECT</code>列表中获取数据的子查询。</li><li><code>UNION RESULT</code>：<code>UNION</code>的结果集。</li></ul></li><li><code>table</code>：指明了查询中涉及的表名。</li><li><code>partitions</code>：如果使用了分区表，这个字段会显示使用的分区。</li><li><code>type</code>：表示了连接类型或访问类型。常见的值包括：<ul><li><code>const</code>：使用常量值进行连接，通常用于在索引中查找唯一行。</li><li><code>eq_ref</code>：在连接中使用了索引，并且索引是唯一索引。</li><li><code>ref</code>：在连接中使用了普通索引。</li><li><code>range</code>：使用了索引的范围扫描。</li><li><code>index</code>：全表扫描，但只使用了索引中的信息。</li><li><code>all</code>：全表扫描。</li></ul></li><li><code>possible_keys</code>：指明了查询中可能使用到的索引。</li><li><code>key</code>：指明了实际使用到的索引。</li><li><code>key_len</code>：表示索引中使用的字节数。</li><li><code>ref</code>：显示了使用索引的列或常量值。</li><li><code>rows</code>：表示了MySQL估计查询中需要检查的行数。</li><li><code>filtered</code>：表示了行的过滤率，即查询条件过滤后剩余的行数占总行数的百分比。</li><li><code>Extra</code>：提供了关于查询执行的其他信息，如使用了临时表、文件排序等。</li></ul></li></ul></li><li><p>测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">no</span>   <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;学号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;课程名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;课程表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student_course</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    student_id <span class="type">INT</span> COMMENT <span class="string">&#x27;学生id&#x27;</span>,</span><br><span class="line">    course_id  <span class="type">INT</span> COMMENT <span class="string">&#x27;课程id&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;学生课程中间表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_student_id</span><br><span class="line">        <span class="keyword">FOREIGN</span> KEY (student_id)</span><br><span class="line">            <span class="keyword">REFERENCES</span> student (id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_course_id</span><br><span class="line">        <span class="keyword">FOREIGN</span> KEY (course_id)</span><br><span class="line">            <span class="keyword">REFERENCES</span> course (id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向学生表中插入10条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name, <span class="keyword">no</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;2019001&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;2019002&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;2019003&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;2019004&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;钱七&#x27;</span>, <span class="string">&#x27;2019005&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;2019006&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;周九&#x27;</span>, <span class="string">&#x27;2019007&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;2019008&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;郑十一&#x27;</span>, <span class="string">&#x27;2019009&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;朱十二&#x27;</span>, <span class="string">&#x27;2019010&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向课程表中插入10条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course (name) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;数据库基础&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;数据结构&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;操作系统&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;计算机网络&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;编程语言&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;软件工程&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;算法设计&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;数据挖掘&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;人工智能&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;云计算&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生课程中间表中插入10条数据，随机分配学生选课关系</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_course (student_id, course_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">7</span>), (<span class="number">4</span>, <span class="number">8</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">9</span>), (<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://img-blog.csdnimg.cn/direct/a0db926ac65248278d135055c36d14fa.png" alt=""></p><ul><li><p>查询所有学生的选课情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line">         <span class="keyword">join</span> student_course sc <span class="keyword">on</span> s.id <span class="operator">=</span> sc.student_id</span><br><span class="line">         <span class="keyword">join</span> course c <span class="keyword">on</span> c.id <span class="operator">=</span> sc.course_id;</span><br></pre></td></tr></table></figure></li><li><p>查询选修了<code>操作系统的学生</code>信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line">         <span class="keyword">join</span> student_course sc</span><br><span class="line">              <span class="keyword">on</span> s.id <span class="operator">=</span> sc.student_id</span><br><span class="line"><span class="keyword">where</span> course_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> course <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;操作系统&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="为什么InnoDB存储引擎选择使用B-Tree索引结构"><a href="#为什么InnoDB存储引擎选择使用B-Tree索引结构" class="headerlink" title="为什么InnoDB存储引擎选择使用B+Tree索引结构"></a>为什么InnoDB存储引擎选择使用B+Tree索引结构</h4><ul><li>先讨论二叉树,再到二叉树的解决方案,提出红黑树,但是<code>红黑树也属于二叉树</code>的一种,没有脱离二叉树的缺陷</li><li>对于<code>B-Tree</code>,无论是叶子节点还是非叶子节点,都会保存数据,这样会导致<code>一页中存储的键值减少</code>，指针跟着减少,要同样保存大量数据,只能增加树的高度,导致性能降低,<code>B-Tree</code>的叶子节点是一个单项链表,不利于范围查询,<code>B+Tree</code>是一个双向链表,有利于范围搜索和排序</li><li>关于没有采用<code>Hash</code>索引是因为<code>Hash</code>索引由<code>Hash</code>索引只支持等值,不支持范围查询</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="创建模拟数据10000000条"><a href="#创建模拟数据10000000条" class="headerlink" title="创建模拟数据10000000条"></a>创建模拟数据10000000条</h4><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_data (</span><br><span class="line">    user_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender ENUM(<span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>),</span><br><span class="line">    phone_number <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    registration_date <span class="type">DATE</span>,</span><br><span class="line">    subscribed <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    user_level <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建特定数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA  INFILE <span class="string">&#x27;C:\\ProgramData\\MySQL\\MySQL Server 8.2\\Uploads\\user_data.csv&#x27;</span></span><br><span class="line">INTO TABLE user_data</span><br><span class="line">FIELDS TERMINATED BY <span class="string">&#x27;,&#x27;</span></span><br><span class="line">LINES TERMINATED BY <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">IGNORE <span class="number">1</span> LINES</span><br><span class="line">(username, age, email, address, gender, phone_number, registration_date, subscribed, user_level);</span><br></pre></td></tr></table></figure></li><li><p><code>MySQL</code>配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>; # (用于 [mysqld] 配置中的路径)</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 my.ini,重启服务</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">secure_file_priv</span> = <span class="string">&quot;C:/ProgramData/MySQL/MySQL Server 8.2/Uploads/&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>将csv文件放入<code>secure_file_priv</code>所指向的文件夹 </p><p><img src="https://img-blog.csdnimg.cn/direct/f34a5f8f96eb4dc792b93654aeeb60a3.png" alt=""></p></li><li><p>加载数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA  INFILE <span class="string">&#x27;C:\\ProgramData\\MySQL\\MySQL Server 8.2\\Uploads\\user_data.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> user_data</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">IGNORE <span class="number">1</span> LINES</span><br><span class="line">(username, age, email, address, gender, phone_number, registration_date, subscribed, user_level);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/f45ddbb6de0d44a59da97b50915a73d5.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8-Stream流</title>
      <link href="/2024/01/08/696e439c/"/>
      <url>/2024/01/08/696e439c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Java8-Stream流"><a href="#Java8-Stream流" class="headerlink" title="Java8-Stream流"></a>Java8-Stream流</h3><h4 id="Stream-流的使用步骤"><a href="#Stream-流的使用步骤" class="headerlink" title="Stream 流的使用步骤"></a>Stream 流的使用步骤</h4><ul><li><p>先得到一条<code>Stream</code>流(<code>流水线</code>),并把数据放上去</p><p><img src="https://img-blog.csdnimg.cn/direct/06fefde35c874a23a065b47591022826.png" alt=""></p><ul><li><p>单列集合获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;cccc&quot;</span>, <span class="string">&quot;ddddd&quot;</span>);</span><br><span class="line">        list.stream().forEach(item -&gt; System.out.println(item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>双列集合获取流的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;aa&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        map.put(<span class="string">&quot;bb&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        map.put(<span class="string">&quot;cc&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        map.put(<span class="string">&quot;dd&quot;</span>, <span class="number">44</span>);</span><br><span class="line">        <span class="comment">// 第一种方式获取流</span></span><br><span class="line">        map.keySet().stream().forEach(item -&gt; System.out.println(item));</span><br><span class="line">        <span class="comment">// 第二种方式获取流</span></span><br><span class="line">        map.entrySet().stream().forEach(item -&gt; System.out.println(item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数组获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        Arrays.stream(arr).forEach(item -&gt; System.out.println(item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>零散数据获取数据流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stream 接口中静态方法 of 的细节</span></span><br><span class="line"><span class="comment">// 方法的形参是一个可变参数,可以传递一堆零散的数据,也可以传递数组</span></span><br><span class="line"><span class="comment">// 但是数组必须是引用类型的,如果传递基本数据类型,是会把整个数组当做一个元素,放到 Stream 当中</span></span><br><span class="line">Stream.of(xxx).forEach(item -&gt; System.out.println(item));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>中间方法</code>对流水线上的数据进行操作</p><p><img src="https://img-blog.csdnimg.cn/direct/dc24a94f23244a44a44347310f5b1be5.png" alt=""></p><ul><li>注意：中间方法，返回新的<code>Stream</code>流,原来的<code>Stream</code>流只能使用一次，建议使用链式编程</li><li>注意：修改<code>Stream</code>流中的数据,不会影响原来集合或者数组中的数据</li></ul></li><li><p>使用<code>终结方法</code>对流水线上的数据进行操作</p><p><img src="https://img-blog.csdnimg.cn/direct/64abcc898f0e42f492fb263c8d1f0c3a.png" alt=""></p><ul><li><p><code>toArray</code></p><ul><li><p><code>toArray</code>方法的参数的作用: 负责创建一个指定类型的数组</p></li><li><p><code>toArray</code>方法的底层：会依次得到流里面的每一个数据,并把数据放到数组当中</p></li><li><p><code>toArray</code>方法的返回值：是一个装着流里面所有数据的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    String[] arr = list.stream().toArray(<span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;String[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] apply(<span class="type">int</span> value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[value];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    String[] array = list.stream().toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><code>collect</code></p><ul><li><p>收集到<code>list</code>集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aa-男-aa1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;b-男-bb2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;cc-女-cc3&quot;</span>);</span><br><span class="line">    <span class="comment">// 把男性收集起来</span></span><br><span class="line">    List&lt;String&gt; sex = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toList());</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>收集到<code>set</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aa-男-aa1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;aa-男-aa2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;aa-男-aa1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;b-男-bb2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;cc-女-cc3&quot;</span>);</span><br><span class="line">    <span class="comment">// 把男性收集起来</span></span><br><span class="line">    Set&lt;String&gt; sex = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toSet());</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>收集到<code>map</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;zhangsan-男-17&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;lisi-男-15&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;wanmgwu-男-12&quot;</span>);</span><br><span class="line">       <span class="comment">// 把男性收集起来</span></span><br><span class="line">       Map&lt;String, String&gt; collect = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toMap(</span><br><span class="line">               key -&gt; key.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>], <span class="comment">// 键的生成规则[键不允许重复]</span></span><br><span class="line">               value -&gt; value.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>] <span class="comment">// 值的生成规则</span></span><br><span class="line">       ));</span><br><span class="line">       System.out.println(collect);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h4><ul><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个集合,并添加一些整数 1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line">        <span class="comment">// 需求: 过滤奇数 只留下偶数,并将结果保存起来</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        List&lt;Integer&gt; collect = list.stream().filter(item -&gt; item % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Stream流的调试"><a href="#Stream流的调试" class="headerlink" title="Stream流的调试"></a>Stream流的调试</h4><ul><li><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Author&gt; <span class="title function_">getAuthors</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Author&gt; authors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Author&gt;();</span><br><span class="line">        <span class="type">Author</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">1</span>, <span class="string">&quot;John&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">Author</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">2</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Author</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">3</span>, <span class="string">&quot;Lucy&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="type">Author</span> <span class="variable">luna</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">3</span>, <span class="string">&quot;Lucy&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        Collections.addAll(authors, john, tom, lucy, luna);</span><br><span class="line">        <span class="keyword">return</span> authors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Author&gt; getAuthors = getAuthors();</span><br><span class="line">        getAuthors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .filter(author -&gt; author.getAge() &gt; <span class="number">18</span>).forEach(author -&gt; System.out.println(author.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/ff87a65f78344009ac67d2cafea8c7e1.png" alt=""></p></li></ul><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul><li><code>map</code>可以对流中的元素进行计算或转换</li></ul><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><ul><li><code>map</code>只能把一个对象转换成另一个对象作为流中的元素,而<code>flatMap</code>可以把一个对象转换成<code>多个对象</code>作为流中的元素</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lamdba-表达式</title>
      <link href="/2024/01/08/2581ae4c/"/>
      <url>/2024/01/08/2581ae4c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Lamdba-表达式"><a href="#Lamdba-表达式" class="headerlink" title="Lamdba-表达式"></a>Lamdba-表达式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><code>lambda</code>表达式,是<code>Java8</code>的一个新特性,也是<code>Java8</code>中最值得学习的新特性之一</li><li><code>lambda</code>表达式,从本质来讲,是一个匿名函数,可以使用这个匿名函数,实现接口中的方法,对接口进行非常简洁的实现,从而简化代码</li></ul><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><ul><li><p>如果说,一个接口中,要求实现类必须实现的抽象方法,有且只有一个,这样的接口,就是函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个接口中,有且只有一个方法,是实现类必须实现的,因此是一个函数式接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="comment">// 这个接口中,实现类必须实现的方法有两个,因此不是一个函数式接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h4><ul><li><p>是一个注解,用在接口之前,判断这个接口是否是一个函数式接口。如果是函数式接口,没有任何问题,如果不是函数式接口,则会报错.功能类似于<code>@Override</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个接口中,有且只有一个方法,是实现类必须实现的,因此是一个函数式接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Lambda表达式的语法"><a href="#Lambda表达式的语法" class="headerlink" title="Lambda表达式的语法"></a>Lambda表达式的语法</h4><ul><li><p><code>Lamdba</code>表达式的基础语法</p><blockquote><p><code>Lamdba</code>表达式,其实本质来讲,就是一个匿名函数,因此在写<code>lamdba</code>表达式的时候,不需要关心方法名是什么，实际上，我们在写<code>lamdba</code>表达式的时候,也不需要关心返回值类型,我们在写<code>lambda</code>表达式的时候,只需要关注两部分内容即可:<code>参数列表 和 方法体</code></p></blockquote><ul><li><p>基础语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(参数) -&gt; &#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数部分: 方法的参数列表,要求和实现的接口中的方法参数部分一致,包括参数的数量和类型</li><li>方法体部分：方法的实现部分,如果接口中定义的方法有返回值,则在实现的时候,注意返回值的返回</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限-RBAC</title>
      <link href="/2024/01/03/19dfe761/"/>
      <url>/2024/01/03/19dfe761/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="权限-RBAC"><a href="#权限-RBAC" class="headerlink" title="权限-RBAC"></a>权限-RBAC</h3><h4 id="已经拥有的角色回显"><a href="#已经拥有的角色回显" class="headerlink" title="已经拥有的角色回显"></a>已经拥有的角色回显</h4><ul><li><p>如何回显的</p><p><img src="https://img-blog.csdnimg.cn/direct/ebe9e1054a6240b8ba8f5f675df5b4fe.png" alt="主要通过id"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2024/01/02/53d0684b/"/>
      <url>/2024/01/02/53d0684b/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h4><ul><li><p>仅主机模式</p><ul><li><p>特点</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>虚拟机只能和宿主机之间实现通信</p></div></li><li><p>缺点</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>只有宿主机和虚拟机之间能通信,虚拟机联网需要做更多的配置</p></div></li></ul></li><li><p>桥接模式</p><ul><li>特点<ul><li>宿主机和虚拟机都是由局域网路由(<code>DHCP</code>进行<code>IP</code>分配)</li><li>宿主机和本地的虚拟机之间可以通信</li><li>局域网内其他机器也可以与虚拟机进行通信</li></ul></li><li>缺点<ul><li>虚拟机会占用大量的<code>IP</code>，局域网内如果机器太多,或者虚拟机太多,那么会出现大量的<code>IP</code>冲突</li></ul></li></ul></li><li><p><code>NAT</code>模式(<code>推荐</code>)</p><ul><li><p>特点</p><ul><li>宿主机和其他机器的<code>IP</code>由局域网路由进行<code>IP</code>的分配,虚拟机的<code>IP</code>通过<code>VMnet8</code>虚拟机进行分配</li><li>宿主机和本地的虚拟机之间可以进行通信</li><li>不会占用宿主机所在路由<code>IP</code>,不会造成<code>IP</code>冲突</li></ul></li><li><p>缺点</p><ul><li>局域网内的机器无法与其他机器上的虚拟机进行通信</li></ul></li><li><p>配置</p><ul><li><p>选择如下</p><p><img src="https://img-blog.csdnimg.cn/direct/173bb48d5c4e4922b095721a5e8a2d6d.png" alt=""></p></li></ul></li></ul></li></ul><pre><code>+ `NAT`模式选择  ![子网前三位固定自行配置](https://img-blog.csdnimg.cn/direct/f201c1ddf4244b37a34cc3be5bcbdd8f.png)+ 配置固定`IP`  + 查看`IP`    <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip</span> <span class="string">addr</span></span><br></pre></td></tr></table></figure>    ![](https://img-blog.csdnimg.cn/direct/d7827afb9d1a4e13aba3ab268b6e1409.png)  + `xShell`连接    <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ssh</span> <span class="string">root@192.168.5.129</span></span><br></pre></td></tr></table></figure>  + 固定`IP`配置    <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">Ethernet                       # 连接类型为以太网</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">none                   # 代理方式为无</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">no                    # 仅供浏览器使用为否</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">static                   # 引导协议为静态IP</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">yes                       # 默认路由为是</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">no              # IPv4失败致命为否</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">yes                       # 启用IPv6为是</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">yes                  # IPv6自动配置为是</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">yes                  # IPv6默认路由为是</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">no              # IPv6失败致命为否</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">stable-privacy  # IPv6地址生成模式为稳定隐私</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">ens33                         # 网络接口名称为ens33</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">ens33                       # 设备名称为ens33</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">yes                         # 开机自启为是</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">192.168.5.129               # IP地址为192.168.5.129(在子网的段的最后一位改变)</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">192.168.5.2                # 网关为192.168.5.2 (子网前三位固定后的最后一位为 2)</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">255.255.255.0              # 子网掩码为255.255.255.0</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">192.168.5.129                 # DNS服务器1为192.168.5.129</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="string">114.114.114.114               # DNS服务器2为114.114.114.114</span></span><br><span class="line"><span class="attr">DNS3</span>=<span class="string">8.8.8.8                       # DNS服务器3为8.8.8.8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>    <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart network</span></span><br><span class="line"><span class="comment"># 验证网络是否已经重启</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status network</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="开关机命令"><a href="#开关机命令" class="headerlink" title="开关机命令"></a>开关机命令</h4><ul><li><p>正确流程</p><blockquote><p>一般<code>Linux</code>不会经常进行关机操作,正确的关机流程为<code>sync &gt; shutdown &gt; reboot &gt; poweroff</code></p></blockquote></li><li><p>基本语法</p><ul><li><code>sync</code>: 将内存中的数据同步到硬盘中</li><li><code>poweroff</code> 关闭系统,等同于<code>shutdown -h now</code></li><li><code>reboot</code> 重启系统,等同于<code>shutdown -r now</code></li><li><code>shutdown</code> [选项] 时间</li></ul></li></ul><h4 id="服务类命令"><a href="#服务类命令" class="headerlink" title="服务类命令"></a>服务类命令</h4><ul><li><p>临时开关服务命令</p><ul><li><p>开启服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">start 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>关闭服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">stop 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>重启服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">restart 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>查看服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">status 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>查看正在运行的服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">systemctl</span> <span class="string">--type service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">+</span> <span class="string">永久开关服务命令</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">+</span> <span class="string">打开服务</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">```properties</span></span><br><span class="line">    <span class="attr">systemctl</span> <span class="string">enable 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>关闭自启</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">disable 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>查看服务是否自启</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">is-enabled 服务名</span></span><br></pre></td></tr></table></figure></li><li><p>查看所有服务自启配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">list-unit-files </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="链接和软连接"><a href="#链接和软连接" class="headerlink" title="链接和软连接"></a>链接和软连接</h4><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">链接表示目标资源的另外的访问方式,表示一种路径</span></span><br><span class="line"><span class="attr">软链接也称为符号链接,类似于</span> <span class="string">windows 里的快捷方式,有自己的数据块,主要存放看链接其他文件的路径</span></span><br><span class="line"><span class="attr">ln</span> <span class="string">[-s] [原文件或目录] [链接名] (功能描述: 给原文件创建一个链接)</span></span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>软连接有自己的<code>i</code>节点,所以软连接也就有自己的数据块</li><li>软连接中只存放源文件的文件名,并没有实际的文件数据</li><li>修稿任何一个文件,另一个文件都改变</li><li>修改源文件的名字或者删除源文件,软链接都无法使用。如果再创建回源文件,软链接就可以使用</li><li>软连接的文件类型为<code>L</code></li><li>创建软链接的时候,建议使用绝对路径(<code>硬链接没有这个要求</code>)</li></ul></li></ul></li><li><p>选项说明</p><ul><li><code>-S</code>: 创建的链接为<code>软连接</code></li></ul></li><li><p>技巧</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">删除软链接</span>: <span class="string">rm -rf 软链接名.而不是 rm -rf 软链接名/</span></span><br><span class="line"><span class="attr">查询</span>: <span class="string">通过 ll 就可以查看,列表属性第一位是l,尾部会有位置指向</span></span><br></pre></td></tr></table></figure></li><li><p>进入软链接的目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">-P 软连接路径</span></span><br></pre></td></tr></table></figure></li><li><p>硬链接</p><ul><li><p>创建语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ln</span> <span class="string">&lt;源文件&gt; &lt;目标文件&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>硬链接与源文件拥有相同的<code>i</code>节点和存储<code>block</code>块，是同一个文件的不同名字而已</li><li>具有相同<code>i</code>节点的文件,互相称之为硬链接文件</li><li>修改源文件或者硬链接文件,其实修改的是同一个文件</li><li>硬链接文件不能针对目录使用</li><li>删除源文件后,还是能根据硬链接找到文件内容的</li><li>只有把文件的所有硬链接都删除,系统才会删除该文件</li><li>一个文件名只能有一个<code>i</code>节点,一个<code>i</code>节点可以有多个文件名指向它</li></ul></li></ul></li><li><p>软连接和硬链接的区别</p><ul><li>硬链接与源文件具有相同的<code>i</code>节点,软连接有自己的<code>i</code>节点(<code>相当于windows的快捷方式</code>)</li><li>不能对目录创建硬链接,但可以对目录创建软连接</li><li>删除源文件以后,对硬链接没有任何影响,而软连接则无法使用了</li></ul></li></ul><h4 id="Vim-一般模式"><a href="#Vim-一般模式" class="headerlink" title="Vim 一般模式"></a>Vim 一般模式</h4><ul><li><p>删除和复制操作</p><p><img src="https://img-blog.csdnimg.cn/direct/0683c41d94134a50a6719e7fd709aaf2.png" alt=""></p></li><li><p>光标移动操作</p><p><img src="https://img-blog.csdnimg.cn/direct/f47a60596f96460996815f0991293d0a.png" alt=""> </p></li><li><p>编辑模式</p><p><img src="https://img-blog.csdnimg.cn/direct/f9c8fd78308147409c7b431c943797f8.png" alt=""></p></li><li><p>命令模式</p><p><img src="https://img-blog.csdnimg.cn/direct/1092561e99284fd3b7ca09d0c3d4d652.png" alt=""></p></li><li><p>可视模式</p><ul><li><code>v/ctrl + v</code>选择</li><li><code>d</code>删除</li><li><code>y</code>复制</li></ul></li></ul><h4 id="主机名修改"><a href="#主机名修改" class="headerlink" title="主机名修改"></a>主机名修改</h4><ul><li><p>查看主机名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname</span></span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/hostname</span></span><br></pre></td></tr></table></figure></li><li><p><code>host</code>与主机名映射</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/hosts</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="时间日期类命令"><a href="#时间日期类命令" class="headerlink" title="时间日期类命令"></a>时间日期类命令</h4><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">date</span> <span class="string"># 显示当前时间</span></span><br><span class="line"><span class="attr">date</span> <span class="string">+%Y # 显示当前年份</span></span><br><span class="line"><span class="attr">date</span> <span class="string">+%m # 显示当前月份</span></span><br><span class="line"><span class="attr">date</span> <span class="string">+%d # 显示当前是那一天</span></span><br><span class="line"><span class="attr">date</span> <span class="string">&quot;+%Y-%m-%d %H: %M: %S&quot; # 显示年月日时分秒 </span></span><br></pre></td></tr></table></figure></li><li><p>时间同步</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install -y ntp</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start ntpd</span></span><br><span class="line"><span class="comment"># 设置为开机自启</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable ntpd</span></span><br><span class="line"><span class="comment"># 同步时间</span></span><br><span class="line"><span class="attr">ntpdate</span> <span class="string">-u cn.ntp.org.cn  / ntp.aliyun.com</span></span><br></pre></td></tr></table></figure></li><li><p>时间修改的注意点</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时查看 硬件时钟、系统本地时钟、协调世界时，date 只修改了本地时间,如果使用了 date 修改时间,需要使用 hwclock -w 来同步时间</span></span><br><span class="line"><span class="attr">timedatectl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date</span> <span class="string">-s &quot;2023-02-06 00:00:00&quot; &amp;&amp; hwclock -w</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h4><ul><li><p>添加新用户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">用户名 # 添加新用户</span></span><br><span class="line"><span class="attr">useradd</span> <span class="string">-g 组名 用户名 # 添加新的用户到某个组</span></span><br></pre></td></tr></table></figure></li><li><p>设置用户密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">passwd</span> <span class="string">用户名 # 设置用户密码</span></span><br></pre></td></tr></table></figure></li><li><p>查看用户是否存在</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id</span> <span class="string">用户名</span></span><br></pre></td></tr></table></figure></li><li><p>切换用户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">su</span> <span class="string">用户名称 # 切换用户,只能获取用户的执行权限,不能获得环境变量</span></span><br><span class="line"><span class="attr">su</span> <span class="string">- 用户名称 # 切换到用户并获得该用户的环境变量以及执行权限</span></span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userdel</span> <span class="string">用户名 # 删除用户但保存用户主目录</span></span><br><span class="line"><span class="attr">userdel</span> <span class="string">-r 用户名 # 用户和用户主目录都删除 </span></span><br></pre></td></tr></table></figure></li><li><p>查看登录用户信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">whoami</span> <span class="string"># 显示自身用户名称</span></span><br><span class="line"><span class="attr">who</span> <span class="string">am i # 显示登录用户的用户名</span></span><br></pre></td></tr></table></figure></li><li><p>实战练习</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">coderitl</span></span><br><span class="line"><span class="attr">passwd</span> <span class="string">coderitl</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/sudoers</span></span><br><span class="line"><span class="attr">coderitl</span> <span class="string">ALL=(ALL) NOPASSWD:ALL</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="组管理类命令"><a href="#组管理类命令" class="headerlink" title="组管理类命令"></a>组管理类命令</h4><ul><li><p>添加组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groupadd</span> <span class="string">组名</span></span><br></pre></td></tr></table></figure></li><li><p>删除组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groupdel</span> <span class="string">组名</span></span><br></pre></td></tr></table></figure></li><li><p>查看组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cat</span> <span class="string">/etc/group</span></span><br></pre></td></tr></table></figure></li><li><p>修改用户所属组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">usermod</span> <span class="string">-g 用户组 用户名</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件权限类命令"><a href="#文件权限类命令" class="headerlink" title="文件权限类命令"></a>文件权限类命令</h4><ul><li><p>改变文件的权限</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r:4 w:2 x:1 (所有者 所属组 所属用户)</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">777 文件 # 所有权限</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">755 文件 # 创建的人有所有权限</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f5c24948890f46758535fe9200444c8a.png" alt=""></p></li><li><p>改变所有者</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chown</span> <span class="string">[选项] [最终用户] [文件或目录]</span></span><br></pre></td></tr></table></figure></li><li><p>改变文件所属组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chgrp</span> <span class="string">[最终用户组] [文件或目录]</span></span><br></pre></td></tr></table></figure></li><li><p>实战演练</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在 opt 目录下创建 java 目录,用于安装 java 框架.所有者为 java 部门的领导张总,所属组为 java部门,张总有全部的权限,部门其他开发有读和执行的权限,其他人只有读的权限</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">useradd zhangzong</span></span><br><span class="line"><span class="attr">passwd</span> <span class="string">zhangzong </span></span><br><span class="line"><span class="attr">(password</span>: <span class="string">zz)</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/etc/sudoers</span></span><br><span class="line"><span class="attr">zhangzong</span> <span class="string">ALL=(ALL) PASSWD:ALL</span></span><br><span class="line"><span class="attr">su</span> <span class="string">- zhangzong</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/opt</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">mkdir java</span></span><br><span class="line"><span class="comment"># 修改所有者</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">chown zhangzong java/</span></span><br><span class="line"><span class="comment"># 创建组</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">group java</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">chgrp java java</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">chmod 754 java</span></span><br><span class="line"><span class="comment"># 2. 在 opt 目录下创建 vue 目录,用户前端框架的安装。所有者为大数据部门的王总,所属组为 vue 部门,王总有全部的权限,部门的其他人有读写执行权限,去他人没有权限</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">3.</span> <span class="string">使用 root 用户在 opt 目录下创建 mysql 文件夹,用于安装 mysql,赋予其他用户读的权限</span></span><br><span class="line"><span class="attr">4.</span> <span class="string">使用 root 用户在 opt 目录下创建 redis 文件夹,用于安装 redis,赋予其他用户读和执行的权限</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="搜索查找类命令"><a href="#搜索查找类命令" class="headerlink" title="搜索查找类命令"></a>搜索查找类命令</h4><ul><li><p><code>find</code>查找文件或目录</p></li><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">find</span> <span class="string">指将从指定目录向下递归的遍历其各个子目录,将满足条件的文件显示在终端</span></span><br><span class="line"><span class="attr">find</span> <span class="string">[搜索范围] [选项]</span></span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><p><img src="https://img-blog.csdnimg.cn/direct/8f8c491e16884932bf8a1329df30afec.png" alt=""></p></li><li><p><code>grep</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">grep</span> <span class="string">[-n] 关键字 文件路径</span></span><br></pre></td></tr></table></figure></li><li><p><code>wc</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wc</span> <span class="string">[-c -m -l -w] 文件路径</span></span><br></pre></td></tr></table></figure><ul><li><code>-c</code>: 统计<code>bytes</code>数量</li><li><code>-m</code>: 统计字符数量</li><li><code>-l</code>: 统计行数</li><li><code>-w</code>: 统计单词数量</li></ul></li></ul></li><li><p><code>tail</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail [-f -num] Linux路径</span></span><br><span class="line"><span class="attr">tail</span> <span class="string">-f -10 /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure></li><li><p>选项</p><ul><li><code>-f</code>: 表示持续跟踪</li><li><code>-num</code>: 查看尾部多少行,不填默认<code>10</code>行</li></ul></li></ul></li></ul><h4 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h4><ul><li><p><code>gzip/gunzip</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gzip</span> <span class="string">文件 # 压缩文件,只能将文件压缩为 *.gz 文件</span></span><br></pre></td></tr></table></figure></li><li><p>经验</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1.</span> <span class="string">只能压缩文件,不能压缩目录</span></span><br><span class="line"><span class="attr">2.</span> <span class="string">不能保留原来的文件</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>zip/unzip</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zip</span> <span class="string">[选项] xxx.zip 将要压缩的文件 # 压缩文件和目录的命令</span></span><br><span class="line"><span class="attr">unzip</span> <span class="string">[选项] xxx.zip # 解压缩文件</span></span><br></pre></td></tr></table></figure></li><li><p>经验</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zip</span> <span class="string">压缩命令在 windows/linux 都通用,可以压缩目录且保留源文件</span></span><br></pre></td></tr></table></figure></li><li><p>选项</p><ul><li><code>-r</code>：递归地将目录及其下属文件一并压缩。</li><li><code>-q</code>：安静模式，不显示压缩过程的输出。</li><li><code>-9</code>：使用最高的压缩级别（压缩比最高，但耗费时间较长）。</li><li><code>-u</code>：仅更新现有的压缩文件中的新文件或已更改的文件。</li></ul></li></ul></li><li><p><code>tar</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">[选项] xxx.tar.gz 将要打包进去的内容</span></span><br></pre></td></tr></table></figure></li><li><p>压缩选项</p><ul><li><code>-c</code>：创建一个新的归档文件。</li><li><code>-f &lt;file&gt;</code>：指定归档文件的名称。</li><li><code>-v</code>：显示压缩/解压缩的过程。</li><li><code>-z</code>：使用gzip进行压缩/解压缩，常用于创建<code>.tar.gz</code>文件。</li><li><code>-j</code>：使用bzip2进行压缩/解压缩，常用于创建<code>.tar.bz2</code>文件。</li><li><code>-J</code>：使用xz进行压缩/解压缩，常用于创建<code>.tar.xz</code>文件。</li><li><code>-p</code>：保留文件的原有权限和属性。</li><li><code>--exclude=&lt;pattern&gt;</code>：排除指定模式的文件或目录。</li><li><code>-T &lt;file&gt;</code>：从文件中读取要压缩的文件或目录列表。</li></ul></li><li><p>解压缩选项</p><ul><li><code>-x</code>：从归档文件中提取文件。</li><li><code>-f &lt;file&gt;</code>：指定要提取的归档文件的名称。</li><li><code>-v</code>：显示解压缩过程。</li><li><code>-z</code>：对gzip格式的归档文件进行解压缩。</li><li><code>-j</code>：对bzip2格式的归档文件进行解压缩。</li><li><code>-J</code>：对xz格式的归档文件进行解压缩。</li><li><code>-p</code>：保留文件的原有权限和属性。</li><li><code>-C &lt;dir&gt;</code>：在指定的目录中解压缩文件。</li><li><code>--strip-components=&lt;number&gt;</code>：指定提取文件时要跳过的目录层级数。</li></ul></li><li><p>压缩多个文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">-zcvf xxx.tar.gz a.txt b.txt </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="磁盘分区类命令"><a href="#磁盘分区类命令" class="headerlink" title="磁盘分区类命令"></a>磁盘分区类命令</h4><ul><li><p><code>df</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">df</span> <span class="string">[选项] # 列出文件系统的整体磁盘使用量,检查文件系统的磁盘空间占用情况</span></span><br></pre></td></tr></table></figure><ul><li><p>选项说明</p><ul><li><code>-h</code>: 以人们比较容易阅读的<code>GBytes,MBytes,KBytes</code>等格式自行显示</li></ul></li><li><p>查看磁盘使用情况</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">df</span> <span class="string">-h</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><code>fdisk</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdisk</span> <span class="string">-l # 查看磁盘分区详情</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>mount/umount</code></p><ul><li><p>什么是挂载卸载</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>对于<code>Linux</code>用户来讲,不论有几个分区,分别分给哪一个目录使用,他总归就是一个根目录,一个独立且唯一的文件结构</p><p><code>Linux</code>中每个分区都是用来组成整个文件系统的一部分,他在用一种叫做<code>挂载</code>的处理方法,它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来,要载入的那个分区将使它的存储空间在这个目录下获得</p></div></li><li><p>实操</p><ul><li><p>挂载光盘镜像文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">/mnt/cdrom # 建立挂载点</span></span><br><span class="line"><span class="attr">mount</span> <span class="string">/dev/sr0 /mnt/cdrom </span></span><br></pre></td></tr></table></figure></li><li><p>卸载光盘镜像文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">umount</span> <span class="string">/mnt/cdrom</span></span><br></pre></td></tr></table></figure></li><li><p>设置开机自动挂载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/fstab</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="软件镜像源更换"><a href="#软件镜像源更换" class="headerlink" title="软件镜像源更换"></a>软件镜像源更换</h4><ul><li><p>更换镜像源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意权限问题</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install -y wget</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bk</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/etc/yum.repos.d</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">-nc http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">Centos-7.repo CentOS-Base.repo</span></span><br><span class="line"><span class="comment"># 全部清除</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">clean all</span></span><br><span class="line"><span class="comment"># 更新列表</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">list</span></span><br><span class="line"><span class="comment"># 缓存yum包信息到本机，提高搜索速度</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">makecache</span></span><br><span class="line"><span class="comment"># 更新 yum</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">update -y</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="进程线程类命令"><a href="#进程线程类命令" class="headerlink" title="进程线程类命令"></a>进程线程类命令</h4><ul><li><p><code>ps</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ps</span> <span class="string">-aux | grep xxx # 查看系统中所有进程</span></span><br><span class="line"><span class="attr">ps</span> <span class="string">-ef | grep xx # 可以查看父子进程之间的关系</span></span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><ul><li><code>-a</code>: 选择所有进程</li><li><code>-u</code>: 显示所有用户的所有进程</li><li><code>-x</code>: 显示没有终端的进程</li></ul></li><li><p>结果说明</p><p><img src="https://img-blog.csdnimg.cn/direct/e76d0f17eaee4591ae52322575f6b005.png" alt=""></p></li></ul></li></ul><ul><li><p>关闭进程</p><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kill</span> <span class="string">[-9] 进程 id</span></span><br></pre></td></tr></table></figure></li><li><p>选项</p><ul><li><code>-9</code>: 表示强制关闭进程.不使用此选项会向进程发送信号要求其关闭,但是否关闭看进程自身的处理机制</li></ul></li></ul></li></ul><h4 id="端口占用情况"><a href="#端口占用情况" class="headerlink" title="端口占用情况"></a>端口占用情况</h4><ul><li><p>下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">-y install nmap</span></span><br></pre></td></tr></table></figure><ul><li><p>使用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nmap</span> <span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>netstat</code></p><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">-y install net-tools </span></span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netstat</span> <span class="string">-anp | grep 8080</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ul><li><p>临时设置</p><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">变量名 = 变量值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>永久生效</p><ul><li>针对当前用户生效,配置在当前用户的<code>~/.bashrc</code>文件中</li><li>针对所有用户生效,配置在系统的<code>/etc/profile</code>文件中<ul><li>并通过语法<code>source 配置文件生效</code>,进行立刻生效,或重新登录</li></ul></li></ul></li></ul><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul><li><p>解释</p><p><img src="https://img-blog.csdnimg.cn/direct/ad4edebe1dac4536b4a09d26d323bd56.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/direct/0c1ee8400260496db45995387de59b69.png" alt=""></p></li><li><p><code>sed</code></p><ul><li><p>基本语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">[选项] [sed内置命令字符] [输入文件]</span></span><br></pre></td></tr></table></figure><ul><li><p>选项</p><p><img src="https://img-blog.csdnimg.cn/direct/e3a2fc8435e74041bde2b0305244c76f.png" alt=""></p></li><li><p>内置字符命令</p><p><img src="https://img-blog.csdnimg.cn/direct/3ba83209626b49b895d473b90bf93f7a.png" alt=""></p></li><li><p>实战练习</p><ul><li><p>准备测试数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cat</span> <span class="string">/etc/passwd &gt; passwd.txt</span></span><br></pre></td></tr></table></figure></li><li><p>只输出<code>2,3</code>行数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">&quot;2,3p&quot; passwd.txt -n</span></span><br></pre></td></tr></table></figure></li><li><p>过滤出含有<code>root</code>的行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">-n &quot;/root/p&quot; passwd.txt</span></span><br></pre></td></tr></table></figure></li><li><p>删除带有<code>root</code>的行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">&quot;/root/d&quot; passwd.txt -i</span></span><br></pre></td></tr></table></figure></li><li><p>将<code>:</code>替换为<code>@</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">-e &quot;s/:/@/g&quot; passwd.txt -i</span></span><br></pre></td></tr></table></figure></li><li><p>在文件第二行追加内容<code>a</code>字符功能,写入到文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">&quot;2a append text&quot; -i passwd.txt</span></span><br></pre></td></tr></table></figure></li><li><p>在第<code>4</code>行上面加入<code>aaaa</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sed</span> <span class="string">&quot;2i aaaaaaaaaaaaaaaa&quot; -i passwd.txt</span></span><br></pre></td></tr></table></figure></li><li><p>取出<code>ip</code>地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备测试数据</span></span><br><span class="line"><span class="attr">ip</span> <span class="string">addr &gt; ip.txt</span></span><br><span class="line"><span class="attr">ifconfig</span> <span class="string">ens33 | sed &quot;2p&quot; -n | sed &quot;s/^.*inet//g&quot; | sed &quot;s/net.*$//g&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h4 id="Nohub"><a href="#Nohub" class="headerlink" title="Nohub"></a>Nohub</h4><ul><li><p>后台启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nohup</span> <span class="string">ping www.baoidu.com &gt; baidu.out &amp;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="网卡消失不见的解决方案"><a href="#网卡消失不见的解决方案" class="headerlink" title="网卡消失不见的解决方案"></a>网卡消失不见的解决方案</h4><ul><li><p><code>centos6</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chkconfig</span> <span class="string">NetworkManager off</span></span><br><span class="line"><span class="attr">chkconfig</span> <span class="string">network on</span></span><br><span class="line"><span class="attr">service</span> <span class="string">NetworkManager stop</span></span><br><span class="line"><span class="attr">service</span> <span class="string">network start</span></span><br><span class="line"><span class="attr">ifup</span> <span class="string">ens33</span></span><br></pre></td></tr></table></figure></li><li><p><code>centos7</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 NetworkManager 服务并禁止其在系统启动时自动启动</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl stop NetworkManager</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl disable NetworkManager</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 启用网络服务并确保其在系统启动时自动启动</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl enable network</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl start network</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用 ifup 命令启用 ens33 接口</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ifup ens33</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="神奇命令"><a href="#神奇命令" class="headerlink" title="神奇命令"></a>神奇命令</h4><ul><li><p>养鱼</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">asciiquarium</span></span><br></pre></td></tr></table></figure></li><li><p>黑客帝国</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cmatrix</span></span><br><span class="line"><span class="comment"># 添加颜色</span></span><br><span class="line"><span class="attr">cmatrix</span> <span class="string">-C red</span></span><br></pre></td></tr></table></figure></li><li><p>会说话的牛</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cowsay</span> <span class="string">&quot;say Hello&quot;</span></span><br><span class="line"><span class="comment"># 查看有哪些动物</span></span><br><span class="line"><span class="attr">cowsay</span> <span class="string">-l</span></span><br><span class="line"><span class="comment"># 使用龙</span></span><br><span class="line"><span class="attr">cowsay</span> <span class="string">-f dragon &quot;say Hello &quot; | lolcat</span></span><br></pre></td></tr></table></figure></li><li><p>动力火车</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sl</span></span><br></pre></td></tr></table></figure></li><li><p>假装在忙碌</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hllowood</span></span><br></pre></td></tr></table></figure></li><li><p>俄罗斯方块</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bastet</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-数据结构</title>
      <link href="/2023/12/28/8cc9bc38/"/>
      <url>/2023/12/28/8cc9bc38/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><ul><li><p>遍历、查找节点</p><p><img src="https://img-blog.csdnimg.cn/direct/e412fd5b6fb84bf7bb82887ad6dcb394.png" alt=""></p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>更新节点</p><p><img src="https://img-blog.csdnimg.cn/direct/31fe49f4a38a479397e2d3e17b2b340f.png" alt=""></p></li><li><p>插入节点(<code>分别在头部、中间、尾部插入，此处在节点2后插入新节点</code>)</p><p><img src="https://img-blog.csdnimg.cn/direct/920f21a7dc22445890a79188783aca31.png" alt=""></p></li><li><p>删除节点</p><p><img src="https://img-blog.csdnimg.cn/direct/77ecbf366f4247d49b62f76c2e926c1e.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/direct/b7f4f982b61843539298d9df6cf3049d.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL-强化练习</title>
      <link href="/2023/12/26/9f8814ba/"/>
      <url>/2023/12/26/9f8814ba/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SQL-强化练习"><a href="#SQL-强化练习" class="headerlink" title="SQL-强化练习"></a>SQL-强化练习</h3><ul><li><p>关联关系</p><p><img src="https://img-blog.csdnimg.cn/direct/8c5ec17de7404400bdb41f2c62b452a5.png" alt=""></p></li><li><p>添加测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;喜剧&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;动作&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;悬疑&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;恐怖&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;科幻&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;战争&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;爱情&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;灾难&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;天下无贼&#x27;</span>,<span class="string">&#x27;冯小刚&#x27;</span>,<span class="number">50</span>,<span class="string">&#x27;2008-12-12&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;功夫&#x27;</span>,<span class="string">&#x27;周星驰&#x27;</span>,<span class="number">150</span>,<span class="string">&#x27;2009-12-12&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;大话西游&#x27;</span>,<span class="string">&#x27;周星驰&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;2012-3-12&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;我不是潘金莲&#x27;</span>,<span class="string">&#x27;冯小刚&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;2007-5-31&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;道士下山&#x27;</span>,<span class="string">&#x27;陈凯歌&#x27;</span>,<span class="number">40</span>,<span class="string">&#x27;2004-8-9&#x27;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;火锅英雄&#x27;</span>,<span class="string">&#x27;陈凯歌&#x27;</span>,<span class="number">60</span>,<span class="string">&#x27;2011-11-11&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;寻龙诀&#x27;</span>,<span class="string">&#x27;冯小刚&#x27;</span>,<span class="number">100</span>,<span class="string">&#x27;2007-7-7&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;老炮儿&#x27;</span>,<span class="string">&#x27;陈凯歌&#x27;</span>,<span class="number">80</span>,<span class="string">&#x27;2005-9-2&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;我是证人&#x27;</span>,<span class="string">&#x27;周星驰&#x27;</span>,<span class="number">90</span>,<span class="string">&#x27;2010-10-5&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> film <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;叶问&#x27;</span>,<span class="string">&#x27;冯小刚&#x27;</span>,<span class="number">120</span>,<span class="string">&#x27;2012-6-3&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;刘欢&#x27;</span>,<span class="string">&#x27;1950-1-1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北大街&#x27;</span>,<span class="string">&#x27;13312345678&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;1955-2-3&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;南大街&#x27;</span>,<span class="string">&#x27;13312345676&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;刘嘉玲&#x27;</span>,<span class="string">&#x27;1970-11-21&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北大街&#x27;</span>,<span class="string">&#x27;13312345675&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;李嘉欣&#x27;</span>,<span class="string">&#x27;1988-9-3&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;南大街&#x27;</span>,<span class="string">&#x27;13312345673&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;1953-2-11&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北大街&#x27;</span>,<span class="string">&#x27;13312345672&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;张国立&#x27;</span>,<span class="string">&#x27;1999-12-31&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;东大街&#x27;</span>,<span class="string">&#x27;13312345671&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;张国荣&#x27;</span>,<span class="string">&#x27;1988-3-23&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;西大街&#x27;</span>,<span class="string">&#x27;13312345670&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;刘建国&#x27;</span>,<span class="string">&#x27;1970-6-22&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;西大街&#x27;</span>,<span class="string">&#x27;13312345679&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_category <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;郭靖&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2002-2-3&#x27;</span>,<span class="number">2500</span>,<span class="string">&#x27;东大街&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;黄蓉&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2003-12-3&#x27;</span>,<span class="number">5500</span>,<span class="string">&#x27;东大街&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;杨幂&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2002-2-8&#x27;</span>,<span class="number">8500</span>,<span class="string">&#x27;西大街&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;刘诗诗&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2004-4-12&#x27;</span>,<span class="number">6500</span>,<span class="string">&#x27;南大街&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_grade <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">1000</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_grade <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">2001</span>, <span class="number">4000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_grade <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">4001</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_grade <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">5001</span>, <span class="number">7000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_grade <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">7001</span>, <span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="string">&#x27;2016-11-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="string">&#x27;2016-2-21&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="string">&#x27;2016-3-21&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="string">&#x27;2016-10-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-2-17&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-5-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-5-7&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-5-9&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-11-10&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="string">&#x27;2016-5-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-7-12&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;2016-7-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;2016-7-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="string">&#x27;2016-8-19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="string">&#x27;2016-8-4&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;2016-8-6&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="string">&#x27;2016-1-22&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-1-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-2-17&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="string">&#x27;2016-3-12&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询一共有多少部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询一共有多少部电影</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(fname)</span><br><span class="line"><span class="keyword">FROM</span> film;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> film;</span><br></pre></td></tr></table></figure></li><li><p>查询每种类型各有多少部电影</p></li><li><p>查询每个用户多少岁.</p></li><li><p>查询历年来每个月份各多少订单</p></li><li><p>查询2016年每个月的订单数</p></li><li><p>查询每个会员，各买过多少种电影(不算数量，如果买1号电影，买了10盘DVD，算1个)</p></li><li><p>查询每个会员，各买过多少盘DVD</p></li><li><p>查询价格大于所有电影平均价的电影</p></li><li><p>查询价格大于‘喜剧’平均价的电影</p></li><li><p>查询价格大于所属类型平均价的电影</p></li><li><p>查询销售额最高的员工</p></li><li><p>查询有回头客的员工</p></li><li><p>查询回头客最多的员工</p></li><li><p>查询喜欢的类型，与‘刘德华’完全一样的用户</p></li><li><p>查询每种类型的最低价</p></li><li><p>查询所有电影的名称，价格，以及按价格从高到底的名次</p></li><li><p>查询不喜欢‘喜剧’类型的用户中，每个住址个多少人</p></li><li><p>查询每种类型中，价格在前2位的电影</p></li><li><p>查询喜欢了所有类型的用户</p></li><li><p>查询没有喜欢任何类型的用户</p></li><li><p>查询‘刘德华’喜欢的类型下，都有哪些电影</p></li><li><p>查询购买‘喜剧’电影的数量比购买‘动作’电影数量多的用户</p></li><li><p>查询与‘刘德华’喜欢类型，完全不同的用户</p></li><li><p>查询订单最多的类型</p></li><li><p>查询所有用户，按照用户的总消费降序排列结果</p></li><li><p>查询被喜欢次数最多的类型</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT-总结详解</title>
      <link href="/2023/12/25/8dfc61fb/"/>
      <url>/2023/12/25/8dfc61fb/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Git-总结详解"><a href="#Git-总结详解" class="headerlink" title="Git-总结详解"></a>Git-总结详解</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>简介</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>GIT</code> 是一个开源的<code>分布式</code>版本控制系统,用于敏捷高效地处理任何或小或大的项目</p><p><code>GIT</code> 是<code>Linux Torvalds</code> 为了帮助管理<code>Linux</code> 内核开发二开发地一个开放源码地版本控制软件</p><p>官网: <code>https://git-scm.com</code></p></div></li><li><p>下载</p><ul><li><p>镜像下载</p><div class="tag link"><a class="link-card" title="镜像地址" href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.35.1.windows.2/"><div class="left"><img src="https://git-scm.com/favicon.ico"/></div><div class="right"><p class="text">镜像地址</p><p class="url">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.35.1.windows.2/</p></div></a></div></li><li><p>官网下载</p><div class="tag link"><a class="link-card" title="官网" href="https://git-scm.com/download/win"><div class="left"><img src="https://git-scm.com/favicon.ico"/></div><div class="right"><p class="text">官网</p><p class="url">https://git-scm.com/download/win</p></div></a></div></li></ul></li><li><p>安装流程</p><ul><li><p>推荐选择,未出现则为默认选择</p><p><img src="https://img-blog.csdnimg.cn/d458efe3ebb54f748070b19df7636364.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_18,color_FFFFFF,t_70,g_se,x_16" alt="使用命令行" style="zoom:80%;" /></p></li><li><p>注意环境变量添加或选择</p><p><img src="https://img-blog.csdnimg.cn/8ef280d5a7244ac284c067b04116965c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="检测环境是否正常"></p></li></ul></li></ul><h4 id="账户信息配置"><a href="#账户信息配置" class="headerlink" title="账户信息配置"></a>账户信息配置</h4><ul><li><p>添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下信息会在提交代码时使用，记录在你的每次提交中,以后才知道那次提交是谁地</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global user.name &quot;Your Name&quot; # gitee | github 用户名</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global user.email &quot;Your Email&quot; # gitee | github 邮箱</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 查看信息 [小写L]</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config -l </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>config</code>作用域</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">config --local # local 只对某个仓库有效</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global # global 对当前用户所有仓库有效</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --system # system 对系统所欲登录的用户有效</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>测试提交</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;测试提交&quot;</span></span><br><span class="line"><span class="comment"># 可以在提交后通过如下命令查看</span></span><br><span class="line"><span class="attr">git</span> <span class="string">log</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8dee2402d7ab465996373c9bfa86c0c8.png" alt="提交信息"></p></li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li><p>版本库</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>工作区中有一个隐藏目录<code>.git</code>，这个目录不属于工作区，而是<code>git</code> 的<code>版本库</code>,是<code>git</code> 管理的所有内容</p></div></li><li><p>暂存区</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>版本库中包含一个临时区域,保存下一步要提交的文件</p></div></li><li><p>分支</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>版本库中包含若干分支,提交的文件存储在分支中</p></div><p><img src="https://img-blog.csdnimg.cn/f5629c55f12342128a76fb7087a008fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="架构图"></p></li></ul><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><div class="tabs" id="仓库"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#仓库-1">什么是仓库</button></li><li class="tab"><button type="button" data-href="#仓库-2">新建仓库</button></li><li class="tab"><button type="button" data-href="#仓库-3">查看仓库状态</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="仓库-1"><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>对应的就是一个<strong>目录</strong>,这个目录中的所有文件被<code>git</code>管理起来，以后会将一个<code>项目的根目录</code>,作为仓库，仓库中的每个文件的改动,都是由<code>git</code>跟踪</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="仓库-2"><ul><li><p>执行指令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择一个目录,执行该指令</span></span><br><span class="line"><span class="attr">git</span> <span class="string">init</span></span><br></pre></td></tr></table></figure></li><li><p>初始化仓库后查看</p><p><img src="https://img-blog.csdnimg.cn/20c018c86f664dbcbcec2bdb4bf34580.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="初始化仓库"></p></li><li><p>仓库添加文件</p><p><img src="https://img-blog.csdnimg.cn/fdab395b4e6c4f768f8edd184420d64e.png" alt="文件添加"></p></li><li><p>查看提交日志</p><ul><li><p>简便查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log</span></span><br></pre></td></tr></table></figure></li><li><p>详细查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看某个人的提交</span></span><br><span class="line"><span class="attr">git</span> <span class="string">log --author=&#x27;coder-itl&#x27;</span></span><br><span class="line"><span class="comment"># 查看所有人的提交记录</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a915bf718542451baf18956e5741f9a2.png" alt=""></p></li><li><p>简洁详细查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log --oneline</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6bc93d003b414056b395982f0cb71357.png" alt=""></p></li><li><p>图形化</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有分支的提交</span></span><br><span class="line"><span class="attr">git</span> <span class="string">log --all --graph</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>commit</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交点内的文件</span></span><br><span class="line"><span class="attr">git</span> <span class="string">cat-file -p commit-id</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9088867b242a453da799ca3d96495584.png" alt=""></p><ul><li><code>Blob</code>: 文件夹</li><li><code>file</code>: 文件</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="仓库-3"><ul><li><p>查看状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br></pre></td></tr></table></figure></li><li><p>未记录</p><p><img src="https://img-blog.csdnimg.cn/4fb16d1e3c0c4d5e8c55a01747851158.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="未记录过的文件,是未跟踪状态"></p><blockquote><p><code>Untracked files</code>翻译为: 未跟踪的文件</p></blockquote></li><li><p>暂存文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将仓库中所有文件添加在暂存区中</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br></pre></td></tr></table></figure><ul><li><p>添加在暂存区状态</p><p><img src="https://img-blog.csdnimg.cn/e0a46c6b249045bfb2a87d9408077c6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="添加在暂存区状态"></p></li></ul></li><li><p>文件提交</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>执行<code>git commit -m &quot;这里填写提交的描述信息&quot;</code>,作用是将暂存区的文件存入分支,形成一个版本</p></div></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><div class="tabs" id="远程仓库"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#远程仓库-1">远程仓库工作模式</button></li><li class="tab"><button type="button" data-href="#远程仓库-2">远程仓库选择</button></li><li class="tab"><button type="button" data-href="#远程仓库-3">实现完整提交记录</button></li><li class="tab"><button type="button" data-href="#远程仓库-4">克隆共享</button></li><li class="tab"><button type="button" data-href="#远程仓库-5">分支</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="远程仓库-1"><ul><li><p>远程仓库工作模式</p><p><img src="https://img-blog.csdnimg.cn/087d71d1d4434cb1b572ad2ff3b30445.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="远程仓库工作模式" style="zoom:80%;" /></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="远程仓库-2"><ul><li><p>选择<code>gitee | github</code></p><ul><li><p>以<code>gitee</code>为例</p></li><li><p>注册账户</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>注意<strong>用户名</strong>名称,在<code>github</code>可以使用<code>git pages</code>做静态网站部署,但是必须使用和用户名同名,为了后续使用,建议为英文并且名称尽量合理为主,<code>gitee</code>目前也采用此方式</p></div></li><li><p>新建仓库</p><ul><li><p>新建仓库</p><p><img src="https://img-blog.csdnimg.cn/47013c7b33564cb38f7522ee4cb0b595.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="新建仓库"></p></li><li><p>修改仓库默认分支为<code>main(个人习惯)</code></p><p><img src="https://img-blog.csdnimg.cn/306cfbd33043439697e299cd385b2d5b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="修改默认分支名"></p></li></ul></li><li><p>本地仓库关联远程仓库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地仓库中执行 origin 是为后面的链接地址起的别名</span></span><br><span class="line"><span class="attr">git</span> <span class="string">remote add origin https://gitee.com/coder-itl/repo-test.git</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="attr">git</span> <span class="string">remote -v</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 后续也可以修改链接地址</span></span><br><span class="line"><span class="attr">git</span> <span class="string">remote set-url origin https://gitee.com/coder-itl/repo-test.git</span></span><br></pre></td></tr></table></figure></li><li><p>地址获取</p><p><img src="https://img-blog.csdnimg.cn/4e13961d4a6240fe87a09a521dbf3932.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="远程仓库地址获取"></p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="远程仓库-3"><ul><li><p>提交流程</p><ol><li>初始化本地仓库</li><li>关联远程仓库</li><li>添加文件至暂存区</li><li>提交至远程仓库</li></ol></li><li><p>提交命令(<code>理想状态提交</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line"><span class="attr">git</span> <span class="string">init</span></span><br><span class="line"><span class="comment"># 关联远程仓库</span></span><br><span class="line"><span class="attr">git</span> <span class="string">remote add origin 远程仓库地址</span></span><br><span class="line"><span class="comment"># 添加文件至暂存区</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="comment"># 添加提交描述,必不可少</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 推送至远程仓库，注意分支名称,如果为设置,则为 master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin main</span></span><br></pre></td></tr></table></figure></li><li><p>完整提交</p><p><img src="https://img-blog.csdnimg.cn/5c2e29de17074431853fbae6032818bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="弹窗填写为gitee账户名与密码"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="远程仓库-4"><ul><li><p>克隆</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取默认分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone https://gitee.com/coder-itl/repo-test.git</span></span><br><span class="line"><span class="comment"># 拉取指定分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone -b branche-name link-address</span></span><br></pre></td></tr></table></figure></li><li><p>拉取远程仓库</p><p><img src="https://img-blog.csdnimg.cn/51e5d99d0aa84ad795f59462b18e9b1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p></li><li><p>拉取远程分支时创建新的文件夹存储</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取名称为 api 的分支,并将文件放在名为 product-api 的文件夹内,不指定名称时会以 .git 前的名称作为文件夹名称</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone -b api git@gitee.com:coderitl/product-sms.git product-api</span></span><br></pre></td></tr></table></figure></li><li><p>协同开发</p><p><img src="https://img-blog.csdnimg.cn/14d1e74f79ab4e18b36881b3a7ed6462.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="协同开发"></p><ul><li><p>分析如何协同的</p><p><img src="https://img-blog.csdnimg.cn/474d4727f9de45d1931ede16416e4e26.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="分析是如何协同的"></p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="远程仓库-5"><ul><li><p>创建分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支并切换到该分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout -b new-branch-name</span></span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -D branch-name</span></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin --delete branch-name</span></span><br></pre></td></tr></table></figure></li><li><p>变化本地仓库信息,进行提交</p></li><li><p>测试</p><ul><li><p>测试分支</p><p><img src="https://img-blog.csdnimg.cn/a7063f792160416495bd71b4c6376ec2.png" alt="测试分支"></p></li><li><p>远程库状态</p><p><img src="https://img-blog.csdnimg.cn/d5531bd66a154daab394bc1a9eda7309.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p></li></ul></li></ul><ul><li><p>格式化提交日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log --oneline --graph --decorate --all</span></span><br></pre></td></tr></table></figure></li><li><p>问题</p><div class="tip error"><p>新建的分支必须推送至远程仓库</p></div></li><li><p>推送分支到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测本地分支信息</span></span><br><span class="line">git branch -av</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到需要推送至远程的分支上</span></span><br><span class="line">git checkout branch-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送至远程仓库 fix:fix =&gt; 本地分支名:远程分支名(自定义名称)</span></span><br><span class="line">git push origin fix:fix </span><br></pre></td></tr></table></figure><ul><li><p>添加到远程仓库</p><p><img src="https://img-blog.csdnimg.cn/4f2ed0f7267d42169ae112fdbf865fcd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="将本地分支推送至远程仓库"></p></li></ul></li><li><p>分支内容</p><div class="tip error"><p>新建分支上的内容可以删除,并不会影响另一个分支信息</p><p><img src="https://img-blog.csdnimg.cn/b55a239935264742b10b0dc178bf5fa8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p></div><ul><li><p>使用方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到新分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout new-branch-name</span></span><br><span class="line"><span class="comment"># 删除所有文件</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">-r *.txt</span></span><br><span class="line"><span class="comment"># 添加至暂存区</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="comment"># 添加日志</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;feat:clear all txt file&quot;</span></span><br><span class="line"><span class="comment"># 推送至远程,注意推送分支 （fix改变变更不会影响 main 分支内容) </span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin fix</span></span><br></pre></td></tr></table></figure><ul><li><p>查看</p><p><img src="https://img-blog.csdnimg.cn/a87a7b39d41246599267614d957536c6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="分支使用"></p></li></ul></li></ul></li><li><p>分支合并</p><p><img src="https://img-blog.csdnimg.cn/f2a7304b99ac4bf7ae6130bf2d797bc9.gif#pic_center" alt="分支合并"></p></li><li><p>版本回退</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log</span></span><br><span class="line"><span class="comment"># 一个文件还原到最后一次提交时的状态【checkout 文件未加入暂存区】</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout -- 在具体位置的文件</span></span><br><span class="line"><span class="comment"># 取消文件的追踪(取消暂存区的添加)</span></span><br><span class="line"><span class="attr">git</span> <span class="string">reset HERD 文件</span></span><br><span class="line"><span class="comment"># 回到指定版本</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><div class="tabs" id="合并冲突"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#合并冲突-1">起因</button></li><li class="tab"><button type="button" data-href="#合并冲突-2">模拟冲突</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="合并冲突-1"><div class="tip cogs"><p>两个分支进行合并,但他们含有对同一个文件的修改,则在合并时出现冲突,<code>git</code>无法决断该保留</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="合并冲突-2"><ul><li><p>本地仓库文件内容</p><p><img src="https://img-blog.csdnimg.cn/cb965235748c4406b066b4408bafe076.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZXItaXRs,size_20,color_FFFFFF,t_70,g_se,x_16" alt="当前仓库文件信息"></p></li><li><p><code>main</code>分支修改<code>fix.txt</code>并提交</p></li><li><p><code>fix</code>分支同样修改<code>fix.txx</code>并提交</p></li><li><p>在<code>main</code>上合并<code>fix</code></p><p><img src="https://img-blog.csdnimg.cn/a99472bba0ec464cb6aa1b96411d1476.gif#pic_center" alt="复现冲突"></p><ul><li><p>查看文件</p><p><img src="https://img-blog.csdnimg.cn/489a62b2eed04cec83135f0e2be9ee21.png" alt="冲突文件"></p></li><li><p>解决方案</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout main</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge host-fix</span></span><br></pre></td></tr></table></figure><blockquote><p>删除文件中特殊符号<code>&lt;&lt;&lt;&lt;</code>，保留自己所需要内容信息,<code>再次提交</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/b7f962371d8a418e8ab1f6cc2a320dbc.png" alt="说明b.txt文件没有合并,该文件中存在冲突"></p><p><img src="https://img-blog.csdnimg.cn/direct/e4e96b8b31d649f783d230dab200e515.png" alt=""></p><blockquote><p><code>both modified</code>两个都对<code>b.txt</code>文件进行了修改</p></blockquote><ul><li><p>解决方案</p><ul><li><p>删除特殊符号,根据自己意愿修改并保留最终文件</p><p><img src="https://img-blog.csdnimg.cn/direct/1541dd07bd5e4b6a9cacfffcf38b06e8.png" alt=""></p></li></ul></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="提交-Message"><a href="#提交-Message" class="headerlink" title="提交-Message"></a>提交-<code>Message</code></h4><ul><li><p>修改最新一次提交的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请注意，如果你已经推送（push）了这个提交，修改提交消息后再次推送可能会导致问题，因为提交的 SHA 值已经改变了。在这种情况下，你可能需要使用 --force【-f】 选项来强制推送，但要小心使用强制推送，因为它可能导致其他协作者的问题</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit --amend -m &quot;new commit message&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/15bea9ae90a34aff964998b70bcd6e07.png" alt=""></p></li><li><p>修改历史的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">rebase -i 要修改信息的父级</span></span><br></pre></td></tr></table></figure><ul><li><p>交互式变基</p><p><img src="https://img-blog.csdnimg.cn/ae5bb84e1af94556ae877090e5a70c38.png" alt=""></p></li><li><p>编辑</p><p><img src="https://img-blog.csdnimg.cn/9e8daafd388242088c118e03b1437f03.png" alt=""></p></li></ul></li><li><p>在上述命令后进入如下</p><p><img src="https://img-blog.csdnimg.cn/aa41719b937b44758c1d8bc883f71226.png" alt="将pick修改为r(reword)，值后保存退出"></p><blockquote><p>在保存退出后会<code>主动进入需要修改的信息界面</code>,修改后再次保存退出即可,在完成提交推送至远程仓库</p></blockquote></li></ul><h4 id="将连续的Message合并"><a href="#将连续的Message合并" class="headerlink" title="将连续的Message合并"></a>将连续的<code>Message</code>合并</h4><ul><li><p>当前提交情况</p><p><img src="https://img-blog.csdnimg.cn/d532f321f8fe47a7b3ab6a4f310832dc.png" alt=""></p></li><li><p>需求: 合并后三个提交</p><p><img src="https://img-blog.csdnimg.cn/1427450c8f7342f1a9fbe110b4c9ba1d.png" alt="选则父级"></p><ul><li><p>修改状态,保存退出</p><p><img src="https://img-blog.csdnimg.cn/1fda6b1d19d543919c8b8555b8eabe69.png" alt=""></p></li><li><p>在上一步后,会进入本次合并的最终信息填写</p><p><img src="https://img-blog.csdnimg.cn/0de60453d77a47bfa946a9d9a2219225.png" alt=""></p></li><li><p>当前状态</p><p><img src="https://img-blog.csdnimg.cn/ebde1d96bed04dcda10f72d5cc0288f5.png" alt=""></p></li></ul></li></ul><h4 id="将间隔的Message合并"><a href="#将间隔的Message合并" class="headerlink" title="将间隔的Message合并"></a>将间隔的Message合并</h4><ul><li><p>当前提交状态</p><p><img src="https://img-blog.csdnimg.cn/341cb949e1c0476b96ddc6fca6074d55.png" alt=""></p></li><li><p>需求: 将添加<code>A、B、C</code>文件提交的<code>message</code>修改为<code>添加文件文本文件</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">rebase -i 59f75ec(添加A文件的commitId)</span></span><br></pre></td></tr></table></figure><ul><li><p>进入后,修正</p><p><img src="https://img-blog.csdnimg.cn/1a6d6fd199964c3bbf7bea3a3abd599d.png" alt=""></p></li><li><p>将存在间隔需要合并的放在一起，需要存在<code>pick</code></p><p><img src="https://img-blog.csdnimg.cn/d3d468fce7734a8e9b2b860552ab27b0.png" alt=""></p></li><li><p>最后要显示的信息</p><p><img src="https://img-blog.csdnimg.cn/08ca2812a5ef46549d72a38153c7c0e9.png" alt=""></p></li><li><p>查看是否成功</p><p><img src="https://img-blog.csdnimg.cn/b45a7e025a394afa98744b2c43a9b737.png" alt=""></p><blockquote><p>将最古老的放在第一个(<code>添加A文件</code>),其他需要合并的紧挨</p></blockquote></li></ul></li></ul><h4 id="Message内添加文件"><a href="#Message内添加文件" class="headerlink" title="Message内添加文件"></a>Message内添加文件</h4><ul><li><p><code>Message</code>信息内添加文件,不修改信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一些变更到最近的提交而不修改提交消息</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit --amend --no-edit</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="暂存区与HEAD比较"><a href="#暂存区与HEAD比较" class="headerlink" title="暂存区与HEAD比较"></a>暂存区与HEAD比较</h4><ul><li><p>比较</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存区与HEAD比较</span></span><br><span class="line"><span class="attr">git</span> <span class="string">diff --cached</span></span><br><span class="line"><span class="comment"># 工作区与暂存区的比较</span></span><br><span class="line"><span class="attr">git</span> <span class="string">diff</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="暂存区恢复到HEAD一致"><a href="#暂存区恢复到HEAD一致" class="headerlink" title="暂存区恢复到HEAD一致"></a>暂存区恢复到HEAD一致</h4><ul><li><p>恢复</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意所使用的终端,比如 IDEA,执行后,应该关闭当前,重新打开文件</span></span><br><span class="line"><span class="attr">git</span> <span class="string">reset HEAD</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="工作区的文件恢复和暂存区一致"><a href="#工作区的文件恢复和暂存区一致" class="headerlink" title="工作区的文件恢复和暂存区一致"></a>工作区的文件恢复和暂存区一致</h4><ul><li><p>工作区和暂存区区分</p><p><img src="https://img-blog.csdnimg.cn/direct/13a49d87bd7548e59f0c80cb47cf18ea.png" alt=""></p></li><li><p>恢复</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout -- 文件名.后缀名</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout -- index.html</span></span><br></pre></td></tr></table></figure><ul><li><p>工作区内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>暂存区内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>恢复后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="取消暂存区部分文件的更改"><a href="#取消暂存区部分文件的更改" class="headerlink" title="取消暂存区部分文件的更改"></a>取消暂存区部分文件的更改</h4><ul><li><p>操作</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">reset HEAD 文件名.后缀名</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="消除最近几次提交"><a href="#消除最近几次提交" class="headerlink" title="消除最近几次提交"></a>消除最近几次提交</h4><ul><li><p>版本回退</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">reset --hard commitId</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="开发中临时加塞紧急任务的处理"><a href="#开发中临时加塞紧急任务的处理" class="headerlink" title="开发中临时加塞紧急任务的处理"></a>开发中临时加塞紧急任务的处理</h4><ul><li><p>查看当前仓库状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/eb630a86d575402792972b33209ea3e6.png" alt=""></p></li><li><p>加入堆栈区域</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">stash</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/71d8ca2532964707b4656890520526c5.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 【紧急的任务】 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>回到紧急任务之前的操作,<code>会保留紧急任务在当前文件的修改</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop 会删除</span></span><br><span class="line"><span class="attr">git</span> <span class="string">stasg apply</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 【紧急任务内容 - 被保留下来了 】*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    git stash</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    正在开发..........</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="公钥添加"><a href="#公钥添加" class="headerlink" title="公钥添加"></a>公钥添加</h4><ul><li><p>公钥配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ed25519</span></span><br><span class="line"><span class="attr">ssh-keygen</span> <span class="string">-t ed25519 -C &quot;xxxxx@xxxxx.com&quot;  </span></span><br><span class="line"><span class="comment"># 查看 ~ 指 windows: c://user/xx/</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">~/.ssh/id_ed25519.pub </span></span><br><span class="line"><span class="comment"># 添加在 gitee | github</span></span><br><span class="line"><span class="comment"># 测试连通性</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">-T git@gitee.com</span></span><br><span class="line"><span class="comment"># 出现用户名提示为成功</span></span><br><span class="line"><span class="attr">Hi</span> <span class="string">coder-itl(@coderitl)! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 失败执行此处</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">-R 755 ~/.ssh/</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">-R 755 ~/.ssh/id_ed25519.pub </span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">-R 755 ~/.ssh/id_ed25519</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 这个命令用于将指定的SSH私钥（在这种情况下，是~/.ssh/id_ed25519）添加到SSH代理中。私钥是用于身份验证的密钥，通过将其添加到代理，可以避免每次连接时都输入密码或者密钥的繁琐过程</span></span><br><span class="line"><span class="attr">eval</span> <span class="string">`ssh-agent -s`</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b9ee3e81efb1454eb247f8b35673c65f.png" alt=""></p></li></ul><h4 id="gitignore-文件失效问题解决"><a href="#gitignore-文件失效问题解决" class="headerlink" title=".gitignore 文件失效问题解决"></a><code>.gitignore</code> 文件失效问题解决</h4><ul><li><p>忽略文件失效解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">  # 清理暂存区</span></span><br><span class="line">  <span class="attr">git</span> <span class="string">rm -r --cached .</span></span><br><span class="line">  <span class="attr">git</span> <span class="string">add .</span></span><br><span class="line">  <span class="attr">git</span> <span class="string">commit -m &#x27;update .gitignore&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">####  `GIT`浏览器插件安装</span></span><br><span class="line"></span><br><span class="line"><span class="attr">+</span> <span class="string">浏览器插件推荐</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">```properties</span></span><br><span class="line">  <span class="attr">1.</span> <span class="string">Octotree - GitHub code tree(作用: 列出目录结构)</span></span><br><span class="line">  <span class="attr">2.</span> <span class="string">Enhanced Github(作用: 直接显示文件大小)</span></span><br><span class="line">  <span class="attr">3.</span> <span class="string">GitZip for github(作用: 双击可以下载单独文件)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h4><ul><li><p>简单输出</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log</span></span><br></pre></td></tr></table></figure></li><li><p>优化</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log --pretty=oneline</span></span><br></pre></td></tr></table></figure></li><li><p>详细信息并配置别名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git lg</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git llg</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global alias.llg  &quot;log --graph --after=&#x27;1 week ago&#x27; --oneline --date=format:&#x27;%Y-%m-%d %H:%M:%S&#x27; --pretty=format:&#x27;%Cred%h%Creset - %Cgreen(%ad) %C(yellow)%d%Creset %s &#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>图形化显示</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">log --oneline --graph</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul><li><p>本地分支查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">branch -v</span></span><br></pre></td></tr></table></figure></li><li><p>远程分支查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v 会携带详细信息</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -rv</span></span><br></pre></td></tr></table></figure></li><li><p>远程和本地分支同时查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -av</span></span><br></pre></td></tr></table></figure></li><li><p>删除本地分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果分支有未合并的更改，该命令可能会失败</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d branch_name</span></span><br><span class="line"><span class="comment"># 如果你确定要强制删除分支并丢弃未合并的更改，可以使用 -D 选项</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -D branch_name</span></span><br></pre></td></tr></table></figure></li><li><p>删除远程分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">push origin --delete branch_name</span></span><br></pre></td></tr></table></figure></li><li><p>分支合并</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 b 分支的内容合并到 a 分支上时,我们要站在 a 分支上,把 b 叫过来</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout a</span></span><br><span class="line"><span class="comment"># 把 b 分支上的内容合并到 a 分支上</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge b</span></span><br></pre></td></tr></table></figure></li><li><p>合并分支时的冲突</p><ul><li><p>忽略合并</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">merge --abort</span></span><br></pre></td></tr></table></figure></li><li><p>手动更改冲突的文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 手动更改冲突的文件</span></span><br><span class="line"><span class="comment"># 2. 执行 git add .</span></span><br><span class="line"><span class="comment"># 3. 执行 git commit 【进入后,可编辑 输入相关信息】</span></span><br><span class="line"><span class="comment"># 4. 执行 git  commit -m &quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建本地分支并于远程分支关联</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout -b test remotes/origin/test</span></span><br></pre></td></tr></table></figure></li><li><p>创建有基点的分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的分支temp,并且这个分支的内容是基于 fd7ec006 这个 commit 的</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout -b temp fd7ec006</span></span><br></pre></td></tr></table></figure></li><li><p>分支重命名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">branch -m [new-name]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="将指定文件回退到指定版本"><a href="#将指定文件回退到指定版本" class="headerlink" title="将指定文件回退到指定版本"></a>将指定文件回退到指定版本</h4><ul><li><p>文件回退</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout 回退的版本id -- 文件.后缀名</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="版本标签"><a href="#版本标签" class="headerlink" title="版本标签"></a>版本标签</h4><ul><li><p>未最新的提交文件打标签</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建标签</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag v1.0</span></span><br><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag</span></span><br><span class="line"><span class="comment"># 为某一个指定的 commitId 添加标签</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag v0.5 commitId</span></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag -d v0.5</span></span><br><span class="line"><span class="comment"># 推送标签到远程</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin v1.0</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="不同人修改了不同文件如何解决"><a href="#不同人修改了不同文件如何解决" class="headerlink" title="不同人修改了不同文件如何解决"></a>不同人修改了不同文件如何解决</h4><ul><li><p>查看修改的分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">branch -av</span></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge origin/xxx</span></span><br><span class="line"><span class="comment"># 进入后输入合并的记录信息</span></span><br><span class="line"><span class="comment"># 保存后退出</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="GIT-Rebase"><a href="#GIT-Rebase" class="headerlink" title="GIT Rebase"></a>GIT Rebase</h4><ul><li><p>概念</p><blockquote><p><code>git rebase</code> 的目标是创建一个更线性、清晰的提交历史</p><p><code>git rebase master</code> 用于将当前分支的(<code>在bugFix</code>)提交整合到 <code>master</code> 分支上，创建一个更为整洁的提交历史。这个操作通常在你希望保持提交历史清晰、避免不必要的合并提交的情况下使用。</p></blockquote></li><li><p>目标</p><p><img src="https://img-blog.csdnimg.cn/direct/5992cef22aa943a8877fc9a428ab0b8b.png" alt=""></p></li><li><p>基点</p><p><img src="https://img-blog.csdnimg.cn/direct/4d50ebc5a07d4c2d9b7a7f93fc54237a.png" alt=""></p></li></ul><ul><li><p>新建并切换到该分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout -b bugFix</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2981cd7986b04311879e2c0397c6e757.png" alt=""></p></li><li><p>在<code>bugFix</code>上提交一次</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;bugFix commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/975954597cc443e8b88382aee4cb6600.png" alt=""></p></li><li><p>切回到<code>main</code>分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout main</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/45a2677d2a0844529c15e3ac0a631451.png" alt=""></p></li><li><p>在<code>main</code>分支上提交一次</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;go back main commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/ab0d3caa1fdf4f828f868c2afeeb0e98.png" alt=""></p></li><li><p>切回到<code>bugFix</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout bugFix</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/50f2b733cc0a4dd0900dfc3127a2fa91.png" alt=""></p></li><li><p><code>rebase</code>到<code>main</code>上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">rebase main</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="分离头指针"><a href="#分离头指针" class="headerlink" title="分离头指针"></a>分离头指针</h4><ul><li><p>分离头指针模型</p><p><img src="https://img-blog.csdnimg.cn/direct/9688968f07b14ea495653472e9fd4575.png" alt=""></p><blockquote><p>在<code>Git</code>中，”分离头指针”是指你正在查看历史提交，而不是在分支上进行工作。这种情况下，你不能进行提交，因为没有分支指向你的新提交。如果你想保存你的更改，你应该创建一个新的分支。</p></blockquote></li></ul><h4 id="分支主题"><a href="#分支主题" class="headerlink" title="分支主题"></a>分支主题</h4><ul><li><p><code>dev</code>开发分支</p></li><li><p><code>hot-fix</code>修复<code>bug</code></p></li><li><p><code>main</code>是合并而来的<code>提交点</code></p><p><img src="https://img-blog.csdnimg.cn/direct/f2d8190fb9a44de0b7672716f97160ed.png" alt=""></p></li></ul><h4 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h4><ul><li><p>分支是如何分叉的</p><p><img src="https://img-blog.csdnimg.cn/direct/c8f2bd7f82d44012882dfe1fbc89efc1.gif" alt=""></p></li><li><p>创建分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout -b bugFix</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/488fe73c88484a2cbcbadf46bcbbdcc7.png" alt=""></p></li><li><p>创建、切换、分支合并</p><p><img src="https://img-blog.csdnimg.cn/direct/19d7c9b8833f4518945b3f0dabef6d75.png" alt=""></p><ul><li><p>用<code>git checkout bugFix</code>切换到该分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout -b bugFix(紫色代表创建,粉色代表提交)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b9cea88728544a898d039759edf67d4f.png" alt=""></p></li><li><p>提交一次</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;bugFix commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/a64a56433a094ec096d8ef3f82397e83.png" alt="在bugFix上提交一次"></p></li><li><p>用<code>git checkout main</code>切回到<code>main</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout main</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/04b7c091a7984016add0981bf2214c4e.png" alt=""></p></li><li><p>再提交一次</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">commit -m &quot;main commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2c906a8358f14c179119f473db242179.png" alt=""></p></li></ul></li></ul><ul><li><p>用<code>git merge</code>把<code>bugFix</code>合并到<code>main</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">merge bugFix</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/cba95d74e43340afa2e7a31677fab1f8.png" alt="还原效果图"></p></li></ul><ul><li>可视化窗口的重要命令<ul><li><code>objective</code></li><li><code>reset</code></li></ul></li></ul><h4 id="致命：拒绝合并不相关的历史记录”Git-错误"><a href="#致命：拒绝合并不相关的历史记录”Git-错误" class="headerlink" title="致命：拒绝合并不相关的历史记录”Git 错误"></a>致命：拒绝合并不相关的历史记录”Git 错误</h4><ul><li><p>当两个<em>不相关的</em>项目（即不知道彼此存在且提交历史记录不匹配的项目）合并时，会出现“致命：拒绝合并不相关的历史记录” <strong>Git</strong></p><p><img src="https://img-blog.csdnimg.cn/direct/5041e64a15484c308e2c183e0a3d4860.png" alt=""></p><ul><li>考虑以下两种引发此错误的情况：<ul><li>您克隆了一个项目，但不知何故，<code>.git</code>目录被删除或损坏。<em>这会导致 Git 不知道您的本地历史记录，因此当您尝试推送到</em>远程存储库或<em>从</em>远程存储库拉取时，会导致它抛出此错误。</li><li>您已经创建了一个新存储库，并向其中添加了一些<em>提交</em>，现在您正尝试从已经有自己的一些提交的远程存储库中<em>提取数据。</em>在这种情况下，Git 也会抛出错误，因为它不知道这两个项目是如何关联的。</li></ul></li></ul></li><li><p>解决方案</p><blockquote><p><em>通过切换允许无关历史记录</em>开关可以解决该错误。在<code>git pull</code>or<code>git merge</code>命令后添加以下标记</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">pull origin master --allow-unrelated-histories</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/12/21/3a42db2d/"/>
      <url>/2023/12/21/3a42db2d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h3><h4 id="基于Vite项目创建"><a href="#基于Vite项目创建" class="headerlink" title="基于Vite项目创建"></a>基于Vite项目创建</h4><ul><li><p>什么是<code>Vite</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Vite</code>是新一代前端构建工具,Vite优势如下:</p><ul><li>轻量快速的热重载,能实现极速的服务启动</li><li>对<code>TypeScript、JSX、CSS</code>等支持开箱即用</li><li>真正的按需编译,不再等待整个应用编译完成</li></ul></div></li><li><p>使用<code>Vite</code>创建项目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">create vue@latest</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PS</span> <span class="string">E:\Code\vue3&gt; npm create vue@latest</span></span><br><span class="line"><span class="attr">Need</span> <span class="string">to install the following packages:</span></span><br><span class="line"><span class="attr">create-vue@3.9.1</span></span><br><span class="line"><span class="attr">Ok</span> <span class="string">to proceed? (y)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Vue.js</span> <span class="string">- The Progressive JavaScript Framework</span></span><br><span class="line"></span><br><span class="line"><span class="attr">√</span> <span class="string">Project name: ... vue3_hello # 项目创建的名称[vue3_hello]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add TypeScript? ... No / Yes # 是否添加TypeScript[yes]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add JSX Support? ... No / Yes # [no]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add Vue Router for Single Page Application development? ... No / Yes [no]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add Pinia for state management? ... No / Yes [no]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add Vitest for Unit Testing? ... No / Yes [no]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add an End-to-End Testing Solution? » No [no]</span></span><br><span class="line"><span class="attr">√</span> <span class="string">Add ESLint for code quality? ... No / Yes [no]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Scaffolding</span> <span class="string">project in E:\Code\vue3\vue3_hello...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Done.</span> <span class="string">Now run:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cd</span> <span class="string">vue3_hello</span></span><br><span class="line">  <span class="attr">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">npm</span> <span class="string">run dev</span></span><br></pre></td></tr></table></figure></li><li><p>总结</p><ul><li><code>Vite</code>项目中,<code>index.html</code>是项目的入口文件,在项目最外层</li><li>加载<code>index.html</code>后,<code>Vite</code>解析<code>&lt;script type=&quot;model&quot; src=&quot;xxx&quot;&gt;</code>指向的<code>JavaScript</code></li><li><code>Vue3</code>中是通过<code>createApp</code>函数创建一个应用实例</li></ul></li></ul><h4 id="OptionsAPI-与-CompositionAPI"><a href="#OptionsAPI-与-CompositionAPI" class="headerlink" title="OptionsAPI 与 CompositionAPI"></a>OptionsAPI 与 CompositionAPI</h4><ul><li><p><code>Vue2</code> 的 <code>API</code> 设计是 <code>Options</code>(配置)风格的</p><ul><li><p><code>Options API</code>的弊端</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Options</code>类型的<code>API</code>，数据、方法、计算属性等,是分散在:<code>data、methods、cpmputed</code>中的,若是新增或者修改一个需求,就需要分别修改:<code>data、methods、computed</code>不便于维护和复用</p></div></li></ul></li><li><p><code>Vue3</code> 的 <code>API</code>设计是<code>Composition</code>(组合)风格的</p></li></ul><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><ul><li><p>概述</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>setup</code>是<code>Vue3</code>中一个新的配置项,值是一个函数,它是<code>Componsition API</code>,组件中所用到的:<code>数据、方法、计算属性、监视</code>等,均配置在<code>setup</code>中</p></div></li><li><p><code>setup</code>的特点</p><ul><li><code>setup</code> 函数返回的对象中的内容,可以直接在模板中使用</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code></li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用,它是<code>领先</code>所有钩子执行的</li></ul></li><li><p>基本了解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>username:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>修改年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setup 中的 this 是 undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 此时定义的数据不是响应式数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username = <span class="string">&quot;zs&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      age++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 返回值: 将数据、方法交出去,模板中才可以使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      username,</span></span><br><span class="line"><span class="language-javascript">      age,</span></span><br><span class="line"><span class="language-javascript">      changeAge</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>data、methods、setup</code>允许同时存在</li><li><code>data</code>可以读取<code>setup</code>中定义的数据,而<code>setup</code>中不允许读取<code>data</code>中的数据</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/b053cbeb0b8b4078be277f1eaa9989a1.png" alt=""></p></li></ul><h4 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h4><ul><li><p>下载插件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i vite-plugin-vue-setup-extend -D</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>vite.config</code>中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入下载的插件</span></span><br><span class="line"><span class="keyword">import</span> vueSetupExtend <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">      <span class="comment">// 调用该插件</span></span><br><span class="line">    <span class="title function_">vueSetupExtend</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决如下问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App123&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">name</span>=<span class="string">&quot;App123&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> name = <span class="string">&#x27;zd&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8377672220554f86955ae4383b97cbab.png" alt=""></p></li></ul><h4 id="Ref-创建基本类型的响应式数据"><a href="#Ref-创建基本类型的响应式数据" class="headerlink" title="Ref-创建基本类型的响应式数据"></a>Ref-创建基本类型的响应式数据</h4><ul><li><p>作用: 定义响应式变量</p></li><li><p>语法<code>let xxx = ref(初始值)</code></p></li><li><p>返回值:一个<code>RefImpl</code>的实例对象,简称<code>ref</code>对象,<code>ref</code>对象的<code>value</code>属性是响应式的</p></li><li><p>注意点</p><ul><li><code>js</code>中操作数据需要<code>属性名.value</code>，但模板中不需要<code>.value</code>，直接使用即可</li><li>对于<code>let name=ref(&#39;aaa&#39;)</code>来说,<code>name</code>不是响应式的,<code>name.value</code>是响应式的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>修改年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">name</span>=<span class="string">&quot;App123&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 响应式数据定义</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> username = <span class="title function_">ref</span>(<span class="string">&#x27;coder-itl&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  username.<span class="property">value</span> = <span class="string">&#x27;aaa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Reactive-和-Ref-对比"><a href="#Reactive-和-Ref-对比" class="headerlink" title="Reactive 和 Ref 对比"></a>Reactive 和 Ref 对比</h4><ul><li><p>宏观角度</p><ul><li><code>ref</code>:可以定义：基本类型、对象类型的<code>响应式数据</code></li><li><code>reactive 只能</code>定义：对象类型的<code>响应式数据</code></li></ul></li><li><p>区别</p><ul><li><p><code>ref</code>创建的变量必须使用<code>.value(可以使用 volar 插件自动添加 .value)</code></p></li><li><p><code>reactive</code>重新分配一个新对象,会<code>失去</code>响应式(<code>可以使用Object.assign</code>去整体替换)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> goods = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeGoods</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// 失去响应式,页面无法刷新</span></span></span><br><span class="line"><span class="language-javascript">  goods = &#123; <span class="attr">id</span>: <span class="number">1005</span>, <span class="attr">name</span>: <span class="string">&quot;aaaa&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      &#123;&#123; goods.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeGoods&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> goods = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeGoods</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 响应式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(goods, &#123; <span class="attr">id</span>: <span class="number">1002</span>, <span class="attr">name</span>: <span class="string">&#x27;罗卜&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>使用原则</p><ul><li>若需要一个基本类型的响应式数据,必须使用<code>ref</code></li><li>若需要一个响应式对象,层级不深,<code>ref、reactive</code>都可以</li><li>若需要一个响应式对象,且层级较深,推荐使用 <code>reactive</code></li></ul></li><li><p>数组修改练习</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> goods = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1002</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1003</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1004</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  goods.<span class="property">value</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;aaa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="toRrefs-和-toRef"><a href="#toRrefs-和-toRef" class="headerlink" title="toRrefs 和 toRef"></a>toRrefs 和 toRef</h4><ul><li><p>将对象解构并获得响应式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 简化书写 --&gt;</span></span><br><span class="line">      &#123;&#123; name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeGoods&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> goods = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;白菜&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; id, name &#125; = <span class="title function_">toRefs</span>(goods)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeGoods</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// toRefs 通过 .value </span></span></span><br><span class="line"><span class="language-javascript">  name.<span class="property">value</span> += <span class="string">`....`</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id, name);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><ul><li><p>读取时没有参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 只读</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> firstName.<span class="property">value</span> + <span class="string">&quot; - &quot;</span> + lastName.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改时才会有参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  全名: &#123;&#123; fullName &#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;z&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;s&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 可读可写</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> updateName = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> firstName.<span class="property">value</span> + <span class="string">&quot; - &quot;</span> + lastName.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变 firstName.value = val</span></span></span><br><span class="line"><span class="language-javascript">    firstName.<span class="property">value</span> = val</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 做修改的逻辑</span></span></span><br><span class="line"><span class="language-javascript">    firstName.<span class="property">value</span> + <span class="string">&quot; - &quot;</span> + lastName.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  updateName.<span class="property">value</span> = <span class="string">&#x27;aaa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><ul><li><p>作用: 监视数据的变化(和<code>Vue2</code>中的<code>watch</code>作用一致)</p></li><li><p>特点: <code>Vue3</code>中的<code>watch</code>只能监视以下<code>四种数据</code></p><ul><li><code>ref</code>定义的数据</li><li><code>reactive</code>定义的数据</li><li>函数返回一个值</li><li>一个包含上述内容的数组</li></ul></li><li><p>情况一</p><blockquote><p>监视<code>ref</code>定义的<code>【基本类型】</code>数据：直接写数据名即可，监视的是其<code>value</code>值的改变</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  num.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> stopWatch = <span class="title function_">watch</span>(num, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (newVal &gt;= <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解除监视,页面数据变化,不在监视</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">stopWatch</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>情况二</p><blockquote><p>监视<code>ref</code>定义的<code>【对象类型】</code>数据：直接写数据名,监视的是对象的<code>【地址值】</code>,若想监视对象内部的数据,要手动开启深度监视</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>修改年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changePerson&quot;</span>&gt;</span>修改整个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">value</span>.<span class="property">name</span> += <span class="string">&#x27;....&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">value</span>.<span class="property">age</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changePerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">value</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;lis&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">&#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性,<code>newVal</code>和<code>oldVal</code>都是新值，因为他们都是同一个对象</p><p><img src="https://img-blog.csdnimg.cn/direct/36d7e2847e224f048b95fb952df77112.png" alt=""></p></li><li><p>若修改整个<code>ref</code>定义的对象,<code>newVal</code>是新值，<code>oldVal</code>是旧值，因为不是同一个对象了</p><p><img src="https://img-blog.csdnimg.cn/direct/9ad9967f183d400c9fa2d42fd526eae9.png" alt=""></p></li></ul></li><li><p>情况三</p><blockquote><p>监视<code>reactive</code>定义的<code>【对象类型】</code>数据,且默认开启了深度监视</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; person &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>修改年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changePerson&quot;</span>&gt;</span>修改整个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">name</span> += <span class="string">&#x27;~~~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">age</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changePerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(person, &#123; <span class="attr">name</span>: <span class="string">&quot;lis&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>情况四</p><blockquote><p>监视<code>ref</code>或<code>reactive</code>定义的<code>【对象类型】</code>数据中的<code>某个属性</code>,注意点如下</p></blockquote><ol><li><p>若该属性值<code>不是【对象类型】</code>,需要写成函数形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>品牌&#123;&#123; person.car.brand &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>价格&#123;&#123; person.car.price &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>监视姓名改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref, reactive, watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">brand</span>: <span class="string">&quot;bm&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>: <span class="string">&quot;50W&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 监视</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需要写成函数形式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 只监视 name 属性的变化</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> person.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>若该属性值是<code>依然是【对象类型】</code>,可直接编,也可写成函数,不过建议写成函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>品牌&#123;&#123; person.car.brand &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>价格&#123;&#123; person.car.price &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeCar&quot;</span>&gt;</span>监视姓名改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">brand</span>: <span class="string">&quot;bm&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>: <span class="string">&quot;50W&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeCar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">car</span> = &#123;<span class="attr">brand</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;10w&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 推荐写法</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> person.<span class="property">car</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">&#125;, &#123;<span class="attr">deep</span>: <span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>情况五：监视多个指定值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 姓名: &#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 年龄: &#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 品牌: &#123;&#123; person.car.brand &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changePersonInfo&quot;</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">brand</span>: <span class="string">&quot;bn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>: <span class="string">&quot;10w&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changePersonInfo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;lz&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  person.<span class="property">value</span>.<span class="property">car</span>.<span class="property">brand</span> = <span class="string">&#x27;bm&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>([<span class="function">() =&gt;</span> person.<span class="property">value</span>.<span class="property">name</span>, <span class="function">() =&gt;</span> person.<span class="property">value</span>.<span class="property">car</span>.<span class="property">brand</span>], <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><ul><li><p>官网: 立即运行一个函数,同时响应式的追踪其依赖,并在依赖更改时重新执行该函数</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><ol><li>都能监听响应式数据的变化,不同的是监听数据变化的方式不同</li><li><code>watch</code>: 要明确指出监视的数据</li><li><code>watchEffect</code>不用明确指出监视的数据(<code>函数中用到那些属性,那就监视那些属性</code>)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>水温: &#123;&#123; temp &#125;&#125;℃<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>水位: &#123;&#123; height &#125;&#125;cm<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>修改水温水位<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> temp = <span class="title function_">ref</span>(<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> height = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  temp.<span class="property">value</span> += <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  height.<span class="property">value</span> += <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (temp.<span class="property">value</span> &gt;= <span class="number">60</span> || height.<span class="property">value</span> &gt;= <span class="number">50</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发送网络请求....&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="标签的-ref-属性"><a href="#标签的-ref-属性" class="headerlink" title="标签的 ref 属性"></a>标签的 ref 属性</h4><ul><li><p>作用: 用于注册模板引用</p></li><li><p>用在普通<code>dom</code>标签上,获取的就是<code>DOM</code>节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;h1rRef&quot;</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showLog&quot;</span>&gt;</span>showLog<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建一个 h1rRef 用于存储 ref 标记的内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> h1rRef = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">showLog</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(h1rRef.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>用在组件标签上,获取的是组件实例对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  son</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, defineExpose &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 用于暴露可以被父组件查看的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123; num &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="父子组件通信-父传子"><a href="#父子组件通信-父传子" class="headerlink" title="父子组件通信-父传子"></a>父子组件通信-父传子</h4><ul><li><p>基本思想</p><ul><li><p>父组件中给子组件绑定数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Son.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        App</span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">message</span>=<span class="string">&quot;App data to Son component.........&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.app</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>子组件内部通过<code>props</code>选项接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Son View<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span> &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// script 可以通过返回值获取到传递的数据 Proxy(Object) &#123;message: &#x27;App data to Son component.........&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="父子组件通信-子传父"><a href="#父子组件通信-子传父" class="headerlink" title="父子组件通信-子传父"></a>父子组件通信-子传父</h4><ul><li><p>基本思想</p><ul><li><p>父组件中给<code>子组件标签通过 @绑定事件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入子组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Son.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getMessage</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 绑定自定义事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> @<span class="attr">get-message</span>=<span class="string">&quot;getMessage&quot;</span> /&gt;</span></span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.app</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>子组件内部通过<code>$emit</code> 方法触发事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 通过</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;get-message&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">sendMsg</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 自定义事件名 数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;get-message&#x27;</span>, <span class="string">&#x27;this is son msg data&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span> sendMsg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h4><ul><li>作用: <code>顶层组件</code>向任意的<code>底层组件传递数据和方法</code>,实现<code>跨组件通信</code></li></ul><h4 id="集成Element-UI-Plus"><a href="#集成Element-UI-Plus" class="headerlink" title="集成Element-UI-Plus"></a>集成Element-UI-Plus</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NPM</span></span><br><span class="line"><span class="attr">$</span> <span class="string">npm install element-plus @element-plus/icons-vue -S</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>main.ts</code>中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore 忽略当前文件 ts 类型检测否则有红色提示(打包会失败)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="line"><span class="comment">// 主题切换</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/theme-chalk/dark/css-vars.css&#x27;</span>;</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123;</span><br><span class="line">  <span class="attr">locale</span>: zhCn,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>volar</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果您使用 Volar，请在 tsconfig.json 中通过 compilerOptions.type 指定全局组件类型。</span></span><br><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;element-plus/global&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="VueUse"><a href="#VueUse" class="headerlink" title="VueUse"></a>VueUse</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i @vueuse/core </span></span><br></pre></td></tr></table></figure></li><li><p>主题切换使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useDark, useToggle &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isDark = <span class="title function_">useDark</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> toggleDark = <span class="title function_">useToggle</span>(isDark)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleDark()&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;ElementPlus&quot;</span>&gt;</span></span><br><span class="line">        主题切换</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span>  <span class="string">i eslint -D</span></span><br></pre></td></tr></table></figure></li><li><p>生成<code>.eslint.cjs</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npx</span> <span class="string">eslint --init</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/df891b8d89eb42f5a907d00a18675060.png" alt="重要选项"></p></li><li><p>配置文件详解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="comment">//运行环境</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123; </span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,<span class="comment">//浏览器端</span></span><br><span class="line">        <span class="string">&quot;es2021&quot;</span>: <span class="literal">true</span>,<span class="comment">//es2021</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//规则继承</span></span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [ </span><br><span class="line">       <span class="comment">//全部规则默认是关闭的,这个配置项开启推荐规则,推荐规则参照文档</span></span><br><span class="line">       <span class="comment">//比如:函数不能重名、对象不能出现重复key</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="comment">//vue3语法规则</span></span><br><span class="line">        <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line">        <span class="comment">//ts语法规则</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//要为特定类型的文件指定处理器</span></span><br><span class="line">    <span class="string">&quot;overrides&quot;</span>: [</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//指定解析器:解析器</span></span><br><span class="line">    <span class="comment">//Esprima 默认解析器</span></span><br><span class="line">    <span class="comment">//Babel-ESLint babel解析器</span></span><br><span class="line">    <span class="comment">//@typescript-eslint/parser ts解析器</span></span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">    <span class="comment">//指定解析器选项</span></span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="string">&quot;latest&quot;</span>,<span class="comment">//校验ECMA最新版本</span></span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span><span class="comment">//设置为&quot;script&quot;（默认），或者&quot;module&quot;代码在ECMAScript模块中</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//ESLint支持使用第三方插件。在使用插件之前，您必须使用npm安装它</span></span><br><span class="line">    <span class="comment">//该eslint-plugin-前缀可以从插件名称被省略</span></span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//eslint规则</span></span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue3-环境校验"><a href="#Vue3-环境校验" class="headerlink" title="Vue3 环境校验"></a>Vue3 环境校验</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-node eslint-plugin-prettier eslint-config-prettier eslint-plugin-node @babel/eslint-parser</span></span><br></pre></td></tr></table></figure></li><li><p>更改配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @see https://eslint.bootcss.com/docs/rules/</span></span><br><span class="line"><span class="comment">// 更换 .eslintrc.cjs 文件内容</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">jest</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 指定如何解析语法 */</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="comment">/** 优先级低于 parse 的语法解析配置 */</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="attr">jsxPragma</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">      <span class="attr">jsx</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 继承已有的规则 */</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * &quot;off&quot; 或 0    ==&gt;  关闭规则</span></span><br><span class="line"><span class="comment">   * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）</span></span><br><span class="line"><span class="comment">   * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// eslint（https://eslint.bootcss.com/docs/rules/）</span></span><br><span class="line">    <span class="string">&#x27;no-var&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 要求使用 let 或 const 而不是 var</span></span><br><span class="line">    <span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="string">&#x27;warn&#x27;</span>, &#123; <span class="attr">max</span>: <span class="number">1</span> &#125;], <span class="comment">// 不允许多个空行</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 禁止空余的多行</span></span><br><span class="line">    <span class="string">&#x27;no-useless-escape&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止不必要的转义字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// typeScript (https://typescript-eslint.io/rules)</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 禁止定义未使用的变量</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/prefer-ts-expect-error&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 禁止使用 @ts-ignore</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用 any 类型</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-non-null-assertion&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-namespace&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用自定义 TypeScript 模块和命名空间。</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/semi&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint-plugin-vue (https://eslint.vuejs.org/rules/)</span></span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求组件名称始终为 “-” 链接的单词</span></span><br><span class="line">    <span class="string">&#x27;vue/script-setup-uses-vars&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用</span></span><br><span class="line">    <span class="string">&#x27;vue/no-mutating-props&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 不允许组件 prop的改变</span></span><br><span class="line">    <span class="string">&#x27;vue/attribute-hyphenation&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 对模板中的自定义组件强制执行属性命名样式</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>根目录</code>创建忽略校验<code>.eslintignore</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure></li><li><p>运行脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json新增两个运行脚本</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置prettier"><a href="#配置prettier" class="headerlink" title="配置prettier"></a>配置prettier</h4><ul><li><p>安装依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -D eslint-plugin-prettier prettier eslint-config-prettier</span></span><br></pre></td></tr></table></figure></li><li><p><code>prettierrc.json</code>添加规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 是否引用单引号</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 末尾是否加分号</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span> <span class="comment">// 对象最后一项是否加逗号</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>.prettierignore</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/dist/*</span></span><br><span class="line"><span class="attr">/html/*</span></span><br><span class="line"><span class="attr">.local</span></span><br><span class="line"><span class="attr">/node_modules/**</span></span><br><span class="line"><span class="attr">**/*.svg</span></span><br><span class="line"><span class="attr">**/*.sh</span></span><br><span class="line"><span class="attr">/public/*</span></span><br></pre></td></tr></table></figure></li><li><p>运行</p><blockquote><p>通过<code>npm run lint</code>去检测语法，如果出现不规范格式,通过<code>npm run fix</code>修改</p></blockquote></li></ul><h4 id="配置stylelint"><a href="#配置stylelint" class="headerlink" title="配置stylelint"></a>配置stylelint</h4><ul><li><p>下载依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">add sass sass-loader stylelint postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-standard stylelint-config-standard-vue stylelint-scss stylelint-order stylelint-config-standard-scss -D</span></span><br></pre></td></tr></table></figure></li><li><p><code>.stylelintrc.cjs</code>配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @see https://stylelint.bootcss.com/</span></span><br><span class="line"></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">  extends<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    &#x27;stylelint-config-standard&#x27;<span class="punctuation">,</span> <span class="comment">// 配置stylelint拓展插件</span></span><br><span class="line">    &#x27;stylelint-config-html/vue&#x27;<span class="punctuation">,</span> <span class="comment">// 配置 vue 中 template 样式格式化</span></span><br><span class="line">    &#x27;stylelint-config-standard-scss&#x27;<span class="punctuation">,</span> <span class="comment">// 配置stylelint scss插件</span></span><br><span class="line">    &#x27;stylelint-config-recommended-vue/scss&#x27;<span class="punctuation">,</span> <span class="comment">// 配置 vue 中 scss 样式格式化</span></span><br><span class="line">    &#x27;stylelint-config-recess-order&#x27;<span class="punctuation">,</span> <span class="comment">// 配置stylelint css属性书写顺序插件,</span></span><br><span class="line">    &#x27;stylelint-config-prettier&#x27;<span class="punctuation">,</span> <span class="comment">// 配置stylelint和prettier兼容</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  overrides<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      files<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;**<span class="comment">/*.(scss|css|vue|html)&#x27;],</span></span><br><span class="line"><span class="comment">      customSyntax: &#x27;postcss-scss&#x27;,</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      files: [&#x27;**/</span>*.(html|vue)&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      customSyntax<span class="punctuation">:</span> &#x27;postcss-html&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  ignoreFiles<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    &#x27;**<span class="comment">/*.js&#x27;,</span></span><br><span class="line"><span class="comment">    &#x27;**/</span>*.jsx&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;**<span class="comment">/*.tsx&#x27;,</span></span><br><span class="line"><span class="comment">    &#x27;**/</span>*.ts&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;**<span class="comment">/*.json&#x27;,</span></span><br><span class="line"><span class="comment">    &#x27;**/</span>*.md&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;**<span class="comment">/*.yaml&#x27;,</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  /**</span></span><br><span class="line"><span class="comment">   * null  =&gt; 关闭该规则</span></span><br><span class="line"><span class="comment">   * always =&gt; 必须</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  rules<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;value-keyword-case&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 在 css 中使用 v-bind，不报错</span></span><br><span class="line">    &#x27;no-descending-specificity&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器</span></span><br><span class="line">    &#x27;function-url-quotes&#x27;<span class="punctuation">:</span> &#x27;always&#x27;<span class="punctuation">,</span> <span class="comment">// 要求或禁止 URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;</span></span><br><span class="line">    &#x27;no-empty-source&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 关闭禁止空源码</span></span><br><span class="line">    &#x27;selector-class-pattern&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 关闭强制选择器类名的格式</span></span><br><span class="line">    &#x27;property-no-unknown&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 禁止未知的属性(true 为不允许)</span></span><br><span class="line">    &#x27;block-opening-brace-space-before&#x27;<span class="punctuation">:</span> &#x27;always&#x27;<span class="punctuation">,</span> <span class="comment">//大括号之前必须有一个空格或不能有空白符</span></span><br><span class="line">    &#x27;value-no-vendor-prefix&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 关闭 属性值前缀 --webkit-box</span></span><br><span class="line">    &#x27;property-no-vendor-prefix&#x27;<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 关闭 属性前缀 -webkit-mask</span></span><br><span class="line">    &#x27;selector-pseudo-class-no-unknown&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="comment">// 不允许未知的选择器</span></span><br><span class="line">      <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        ignorePseudoClasses<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;global&#x27;<span class="punctuation">,</span> &#x27;v-deep&#x27;<span class="punctuation">,</span> &#x27;deep&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 忽略属性，修改element默认样式的时候能使用到</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>.stylelintignore忽略文件</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/node_modules/*</span></span><br><span class="line"><span class="attr">/dist/*</span></span><br><span class="line"><span class="attr">/html/*</span></span><br><span class="line"><span class="attr">/public/*</span></span><br></pre></td></tr></table></figure></li><li><p>统一配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;./**/*.&#123;html,vue,ts,js,json,md&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;lint:eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src/**/*.&#123;ts,vue&#125; --cache --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;lint:style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置husky"><a href="#配置husky" class="headerlink" title="配置husky"></a>配置husky</h4><ul><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p><p>要做到这件事情，就需要利用<code>husky</code>在代码提交之前触发<code>git hook(git在客户端的钩子)</code>，然后执行<code>npm run format</code>来自动的格式化我们的代码。</p></div></li><li><p>下载依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -D husky</span></span><br></pre></td></tr></table></figure></li><li><p>执行如下命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npx</span> <span class="string">husky-init</span></span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>会在根目录下生成个一个<code>.husky</code>目录，在这个目录下面会有一个<code>pre-commit</code>文件，这个文件里面的命令在我们执行<code>commit</code>的时候就会执行</p></div></li><li><p>在<code>.husky/pre-commit</code>文件添加如下命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sh</span></span><br><span class="line"><span class="attr">.</span> <span class="string">&quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">run format</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们对代码进行<code>commit</code>操作的时候，就会执行命令，对代码进行格式化，然后再提交</p></blockquote></li></ul><h4 id="配置commitlint"><a href="#配置commitlint" class="headerlink" title="配置commitlint"></a>配置commitlint</h4><ul><li><p>作用</p><blockquote><p>对于我们的<code>commit</code>信息，也是有统一规范的，不能随便写,要让每个人都按照统一的标准来执行，我们可以利用<code>commitlint</code>来实现</p></blockquote></li><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">add @commitlint/config-conventional @commitlint/cli -D</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件，新建<code>commitlint.config.cjs</code>(注意是<code>cjs</code>)</p><figure class="highlight cjs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="comment">// 校验规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;feat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fix&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;docs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;refactor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;perf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;revert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;type-case&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;scope-empty&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;scope-case&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;subject-full-stop&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;header-max-length&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>, <span class="number">72</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>package.json</code>中配置<code>scripts</code>命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在scrips中添加下面的代码</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitlint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置结束，现在当我们填写<code>commit</code>信息的时候，前面就需要带着下面的<code>subject</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x27;feat&#x27;<span class="punctuation">,</span><span class="comment">//新特性、新功能</span></span><br><span class="line">&#x27;fix&#x27;<span class="punctuation">,</span><span class="comment">//修改bug</span></span><br><span class="line">&#x27;docs&#x27;<span class="punctuation">,</span><span class="comment">//文档修改</span></span><br><span class="line">&#x27;style&#x27;<span class="punctuation">,</span><span class="comment">//代码格式修改, 注意不是 css 修改</span></span><br><span class="line">&#x27;refactor&#x27;<span class="punctuation">,</span><span class="comment">//代码重构</span></span><br><span class="line">&#x27;perf&#x27;<span class="punctuation">,</span><span class="comment">//优化相关，比如提升性能、体验</span></span><br><span class="line">&#x27;test&#x27;<span class="punctuation">,</span><span class="comment">//测试用例修改</span></span><br><span class="line">&#x27;chore&#x27;<span class="punctuation">,</span><span class="comment">//其他修改, 比如改变构建流程、或者增加依赖库、工具等</span></span><br><span class="line">&#x27;revert&#x27;<span class="punctuation">,</span><span class="comment">//回滚到上一个版本</span></span><br><span class="line">&#x27;build&#x27;<span class="punctuation">,</span><span class="comment">//编译相关的修改，例如发布版本、对项目构建或者依赖的改动</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>husky</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npx</span> <span class="string">husky add .husky/commit-msg </span></span><br></pre></td></tr></table></figure></li><li><p>在生成的<code>commit-msg</code>文件中添加下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line">pnpm commitlint</span><br></pre></td></tr></table></figure><blockquote><p>当我们<code>commit</code>提交信息时，就不能再随意写了，必须是 <code>git commit -m &#39;fix: xxx&#39;</code>符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p></blockquote></li></ul><h4 id="强制使用npm包管理器工具"><a href="#强制使用npm包管理器工具" class="headerlink" title="强制使用npm包管理器工具"></a>强制使用npm包管理器工具</h4><ul><li><p>团队开发项目的时候，需要统一包管理器工具,因为不同包管理器工具下载同一个依赖,可能版本不一样，导致项目出现<code>bug</code>问题,因此包管理器工具需要统一管理</p></li><li><p>在根目录创建<code>scritps/preinstall.js</code>文件，添加下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (!/pnpm/.test(process.env.npm_execpath || &#x27;&#x27;)) &#123;</span><br><span class="line">  console.warn(</span><br><span class="line">    `\u001b[33mThis repository must using pnpm as the package manager ` +</span><br><span class="line">    ` for scripts to work properly.\u001b[39m\n`,</span><br><span class="line">  )</span><br><span class="line">  process.exit(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们使用<code>pnpm</code>或者<code>yarn</code>来安装包的时候，就会报错了。原理就是在<code>install</code>的时候会触发<code>preinstall</code>（<code>npm</code>提供的生命周期钩子）这个文件里面的代码</p></blockquote></li></ul><h4 id="Axios二次封装"><a href="#Axios二次封装" class="headerlink" title="Axios二次封装"></a>Axios二次封装</h4><ul><li><p>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">let</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_BASE_API</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//处理网络错误</span></span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> status = error.<span class="property">response</span>.<span class="property">status</span>;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            msg = <span class="string">&quot;token过期&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            msg = <span class="string">&#x27;无权访问&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            msg = <span class="string">&quot;请求地址错误&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            msg = <span class="string">&quot;服务器出现问题&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            msg = <span class="string">&quot;无网络&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: msg</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure></li><li><p>接口统一管理(<code>TS</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一管理咱们项目用户相关的接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="comment">// type是 ts 规范 https://gitee.com/jch1011/vue3_admin_template-bj1.git</span></span><br><span class="line"><span class="keyword">import</span> type &#123;</span><br><span class="line"></span><br><span class="line"> loginFormData,</span><br><span class="line"></span><br><span class="line"> loginResponseData,</span><br><span class="line"></span><br><span class="line"> userInfoReponseData,</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./type&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//项目用户相关的请求地址</span></span><br><span class="line"></span><br><span class="line">enum <span class="variable constant_">API</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="variable constant_">LOGIN_URL</span> = <span class="string">&#x27;/admin/acl/index/login&#x27;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="variable constant_">USERINFO_URL</span> = <span class="string">&#x27;/admin/acl/index/info&#x27;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="variable constant_">LOGOUT_URL</span> = <span class="string">&#x27;/admin/acl/index/logout&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqLogin</span> = (<span class="params">data: loginFormData</span>) =&gt;</span><br><span class="line"> request.<span class="property">post</span>&lt;any, loginResponseData&gt;(<span class="variable constant_">API</span>.<span class="property">LOGIN_URL</span>, data)</span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqUserInfo</span> = (<span class="params"></span>) =&gt;</span><br><span class="line"></span><br><span class="line"> request.<span class="property">get</span>&lt;any, userInfoReponseData&gt;(<span class="variable constant_">API</span>.<span class="property">USERINFO_URL</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqLogout</span> = (<span class="params"></span>) =&gt; request.<span class="property">post</span>&lt;any, any&gt;(<span class="variable constant_">API</span>.<span class="property">LOGOUT_URL</span>)</span><br></pre></td></tr></table></figure></li><li><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/request/request.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showAllHandler</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/book/all&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...args &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateHandler</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/book/update&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...args &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">saveHandler</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/book/save&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...args &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delHandler</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/book/delete/<span class="subst">$&#123;args&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  showAllHandler,</span><br><span class="line">  updateHandler,</span><br><span class="line">  saveHandler,</span><br><span class="line">  delHandler,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@/api/book&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">showAllHandler</span>(pageVO).<span class="title function_">then</span>(<span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span><br><span class="line">    bookList.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">list</span>;</span><br><span class="line">    total.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Z-Tree"><a href="#Z-Tree" class="headerlink" title="Z-Tree"></a>Z-Tree</h4><ul><li><p>下载依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i ztree -s</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h4><ul><li><p>是什么</p><blockquote><p><code>Pinia</code> 是<code>Vue</code>的专属的最新的<code>状态管理库</code>,是<code>Vuex</code>状态管理工具的替代品</p></blockquote></li><li><p>下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">instal pinia</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><p><code>main.ts</code>中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></table></figure></li><li><p>在<code>src/stores/xxx.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 数据 (state)</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改数据的方法 (action)</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 的定义</span></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 以对象形式返回</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在任意组件使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counter&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript">counterStore.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; counterStore.count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>异步的<code>action</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 准备数据 (state)</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="title function_">ref</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步 action</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = axios.<span class="title function_">get</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">      list.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以对象形式返回</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list</span><br><span class="line">    loadList,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用<code>storeToRefs</code>函数可以辅助保持数据(<code>state + getter</code>)的响应式<code>解构</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 丢失响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123;count,doubleCount&#125; = counterStore</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决 storeToRefs =&gt; pinia 中的</span></span><br><span class="line"><span class="keyword">const</span> &#123;count,doubleCount&#125; = <span class="title function_">storeToRefs</span>(counterStore)</span><br><span class="line"><span class="comment">// 方法直接从原来的 store 中解构赋值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数据持久化插件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方文档 https://prazdevs.github.io/pinia-plugin-persistedstate/guide/</span></span><br><span class="line"><span class="attr">pnpm</span> <span class="string">i pinia-plugin-persistedstate</span></span><br></pre></td></tr></table></figure><ul><li><p>在<code>main.ts</code>中将插件添加到您的 <code>pinia</code>实例中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure></li><li><p>定义一个<code>store</code>时,将<code>persist</code>设置为<code>true</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(</span><br><span class="line">  <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> someState = <span class="title function_">ref</span>(<span class="string">&#x27;hello pinia&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; someState &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>运行机制: 在设置<code>state</code>的时候会自动把数据同步给<code>localstorage</code>，在获取<code>state</code>数据的时候会优先从<code>localstorage</code>中取</li></ul></li></ul></li></ul><h4 id="别名联想设置"><a href="#别名联想设置" class="headerlink" title="别名联想设置"></a>别名联想设置</h4><ul><li><p>在项目的跟路径下,创建文件<code>jsconfig.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><p>下载依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install vue-router</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BookView</span> <span class="keyword">from</span> <span class="string">&quot;@/views/book/BookView.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// vue3 必须配置一个路由模式</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;book&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">BookView</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>main.ts</code>引入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br></pre></td></tr></table></figure></li><li><p>文件存放说明</p><ul><li>路由组件通常存放在<code>pages</code>或<code>views</code>文件夹,一般组件通常放在<code>components</code>文件夹</li><li>通过点击导航,视觉效果上<code>消失</code>了的路由组件,默认是被<code>销毁的</code>,需要的时候再去<code>挂载</code></li></ul></li><li><p>动态类样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;router-link  <span class="selector-tag">to</span>=&quot;/book&quot; active-class=&quot;active&quot;&gt; Book &lt;/router-link&gt; --&gt;</span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路由器工作模式</p><ul><li><p><code>history</code>模式</p><ul><li><p>优点:<code>URL</code>更加美观,不带有<code>#</code>,更接近传统的网站<code>URL</code></p></li><li><p>缺点: 后期项目上线,需要服务端配合处理路径问题,否则刷新就会有<code>404</code>错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>hash</code>模式</p><ul><li>优点: 兼容性更好,因为不需要服务器端处理路径</li><li>缺点:<code>URL</code>带有<code>#</code>不太美观,且在<code>SEO</code>优化方面相对较差</li></ul></li></ul></li><li><p>命名路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> 关于 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/about&#x27;&#125;&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> 关于 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;about&#x27;&#125;&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> 关于 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>路由传参</p><ul><li><p><code>query</code>参数</p><ul><li><p>传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    path:&#x27;/book&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      name:&#x27;zs&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      age:18</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> Book</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line">  <span class="comment">// 打印 query 参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><code>params</code>参数</p><ul><li><p>传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    name: &#x27;book&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      name:&#x27;zs&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      age:18</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> Book</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line">  <span class="comment">// 打印 query 参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>路由的<code>props</code>配置(简化书写)</p><ul><li><p>获取<code>params</code>参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    name:&#x27;book&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      name:&#x27;zs&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      age:18</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> Book</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router 组件中必须有占位符  ?代表可有可无</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/book/:name/:age?&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;book&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">BookView</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取 params 的值</span></span><br><span class="line"><span class="keyword">const</span> ap = <span class="title function_">defineProps</span>([<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]);</span><br><span class="line"><span class="comment">// 控制台打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面的使用</span></span><br><span class="line">&#123;&#123; name &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>props</code>获取<code>query</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&#x27;book&#x27;,</span></span><br><span class="line"><span class="string">    query:&#123;</span></span><br><span class="line"><span class="string">      name:&#x27;zs&#x27;,</span></span><br><span class="line"><span class="string">      age:18</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span>&gt; <span class="title class_">Book</span></span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要占位符了</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/book&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;book&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">BookView</span>,</span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>replace</code>属性</p><ul><li><p>作用: 控制路由跳转时操作浏览器历史纪录的模式</p></li><li><p>浏览器的历史记录有两种写入方式: 分别是<code>push</code>和<code>replace</code></p><ul><li><code>push</code>是追加历史记录(<code>默认值</code>)</li><li><code>replace</code>是替换当前记录</li></ul></li><li><p>开启<code>replace</code>模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编程式导航</p><blockquote><p>路由组建的两个重要属性:<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line">route.<span class="title function_">push</span>(<span class="string">&quot;/book&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义校验表单"><a href="#自定义校验表单" class="headerlink" title="自定义校验表单"></a>自定义校验表单</h4><ul><li><p>定义工具类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义表单校验</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params">rule, value, callback</span>) &#123;</span><br><span class="line">  <span class="comment">// rule: 校验规则对象</span></span><br><span class="line">  <span class="comment">//  value 即为表单元素文本内容</span></span><br><span class="line">  <span class="comment">//  函数: 如果符合条件 callback,放行通过</span></span><br><span class="line">  <span class="comment">// 如果不符合条件 callback 注入错误信息</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\S&#123;5,10&#125;&amp;/</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;用户名必须为5-10位的非空字符&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="集成Sass"><a href="#集成Sass" class="headerlink" title="集成Sass"></a>集成Sass</h4><ul><li><p>下载依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -D sass sass-loader</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.layout-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">  // 侧边栏布局</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.layout-aside</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>src/styles</code>目录下创建一个<code>index.scss</code>文件,当然项目中需要用到清除默认样式,因此在<code>index.scss</code>引入<code>reset.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.npmjs.com/package/reset.scss?activeTab=code (复制)</span></span><br><span class="line"><span class="keyword">@import</span> reset.scss</span><br></pre></td></tr></table></figure></li><li><p>在入口文件引入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;@/styles/index.scss<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure></li><li><p>给项目中引入全局变量<code>$</code>,在<code>styles/variable.scss</code></p></li><li><p>在<code>vite.config.ts</code>中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">css</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">preprocessorOptions</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">scss</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">javascriptEnabled</span>: <span class="string">true,</span></span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">&#x27;@import &quot;./src/styles/variable.scss&quot;;&#x27;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h4><ul><li><p>在<code>components/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入自定义全局插件</span></span><br><span class="line"><span class="keyword">import</span> globalPlugin <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(globalPlugin);</span><br></pre></td></tr></table></figure></li><li><p>全局注册<code>ElementPlus</code>的<code>Icon</code></p></li></ul><h4 id="组件间的动画"><a href="#组件间的动画" class="headerlink" title="组件间的动画"></a>组件间的动画</h4><ul><li><p>需要添加模式来改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">安装了动画库 animate.css </span></span><br><span class="line"><span class="comment"> leave-active-class=&quot;animate__animated animate__bounceOutRight&quot;</span></span><br><span class="line"><span class="comment"> enter-active-class=&quot;animate__animated animate__fadeInRight&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由组件出口位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__fadeInRight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 layout 以及路组件的子路由出口 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Token-问题"><a href="#Token-问题" class="headerlink" title="Token 问题"></a>Token 问题</h4><ul><li><p><code>Token</code>作为用户标识,在很多个接口中都需要携带<code>Token</code>才可以正确获取数据,所以需要在接口调用时携带<code>Token</code>，为了<code>统一控制</code>采取请求拦截器携带的方案</p></li><li><p>配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>();</span><br><span class="line">  <span class="keyword">const</span> token = userStore.<span class="property">token</span>;</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">e</span> =&gt;</span><span class="title class_">Promise</span>.<span class="title function_">reject</span>(e);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Token</code>失效<code>401</code>拦截</p><ul><li><p>解决方案</p><ul><li><p>失败回调中拦截<code>401</code></p></li><li><p>清除掉过期的用户信息</p></li><li><p>跳转到登录页</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义管理用户数据的 state</span></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// 2.定义获取接口数据的 action 函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getuserInfo</span> = <span class="keyword">async</span> (<span class="params">&#123; account, password &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">loginAPI</span>(&#123; account, password &#125;)</span><br><span class="line">    userInfo.<span class="property">value</span> = res.<span class="property">result</span></span><br><span class="line">    <span class="comment">// 退出时清除用户信息</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clearUserInfo</span> = (<span class="params"></span>) =&gt; userInfo.<span class="property">value</span> = &#123;&#125;</span><br><span class="line">    <span class="comment">// 3.以对象的格式把state和action </span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="keyword">return</span> userInfo, getUserInfo, clearUserInfo3 &#125;, &#123; <span class="attr">persist</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="暗黑模式的切换"><a href="#暗黑模式的切换" class="headerlink" title="暗黑模式的切换"></a>暗黑模式的切换</h4><ul><li><p>在项目的入口文件引入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="comment">// 如果只想导入css变量</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/theme-chalk/dark/css-vars.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>事件发生后执行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeDark</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取 HTML 根节点</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">    <span class="comment">// 判断 HTML 标签是否有类名 dark</span></span><br><span class="line">    dark.<span class="property">value</span>?html.<span class="property">className</span>=<span class="string">&#x27;dark&#x27;</span>:html.<span class="property">className</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="主题颜色切换"><a href="#主题颜色切换" class="headerlink" title="主题颜色切换"></a>主题颜色切换</h4><ul><li><p><code>js</code>进行切换</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"><span class="comment">// red 通过取色器 @change 事件改变</span></span><br><span class="line">html.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--el-color-primary&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h4><ul><li><p>配置<code>vite.config.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fileURLToPath, <span class="variable constant_">URL</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="comment">// 跨域请求的目标地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否改变请求来源</span></span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 重写请求路径，去掉前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">vue</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/12/19/6f2612a2/"/>
      <url>/2023/12/19/6f2612a2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SpringBoot</code>是目前流行的微服务框架,倡导<code>约定优先于配置</code>,其目的是<code>用来简化 Spring</code>初始化搭建以及开发过程,<code>SpringBoot</code>提供了很多核心的功能,比如自动化配置(<code>starter【启动器】</code>)简化<code>maven</code>配置,内嵌<code>Servlet</code>容器,应用监控等功能</p></div></li><li><p>特性</p><ol><li>创建独立的<code>spring</code>应用程序</li><li>嵌入式<code>Tomcat、Jetty、Undertow容器( jar )</code></li><li>提供的<code>starters</code>简化构建配置(<code>简化依赖管理和版本控制</code>)</li><li>尽可能自动配置<code>spring</code>应用和第三方库</li><li>没有代码生成,无需<code>XML</code>配置</li></ol></li><li><p>开箱即用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring Boot</code>应用无需从<code>0</code>开始,使用脚手架创建项目,基础配置已经完成。集成大部分第三方库对象,无需配置就能使用</p></div></li><li><p>约定优于配置</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring Boot</code>定义了常用类,包的位置和结构,默认的位置。代码不需要做调整,项目能够按照预期运行。比如启动类在根包的路径下,是用了<code>@SpringBootApplication</code>注解。创建了默认的测试类。<code>controller,service,dao</code>应该放在根包的子包中。<code>application</code>为默认的配置文件</p></div></li></ul><h4 id="入门项目"><a href="#入门项目" class="headerlink" title="入门项目"></a>入门项目</h4><ul><li><p><code>starter</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SpringBoot</code>中常见项目名称,定义了当前项目使用的所有依赖坐标,以达到<code>减少依赖配置</code>的目的</p></div></li><li><p><code>parent</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>所有<code>SpringBoot</code>项目要继承的项目,定义了若干个坐标版本号(<code>依赖管理,而非依赖</code>),以达到<code>减少依赖冲突</code>的目的</li><li><code>spring-boot-starter-parent</code>各版本之间存在着诸多坐标版本不同</li></ul></div></li><li><p>实际开发</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>使用任意坐标时,仅书写<code>GAV</code>中的<code>G</code>和<code>A</code>,<code>V</code>由<code>SpringBoot</code>提供,除非<code>SpringBoot</code>未提供对应版本的<code>V</code></li><li>如发生坐标错误,在指定<code>Version</code></li></ul></div></li></ul><h4 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h4><ul><li><p>引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringBoot 工程运行后初始化 Spring 容器,扫描引导类所在包加载 Bean</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Application</span> &#123;</span><br><span class="line">    <span class="comment">// SpringBoot 的引导类是 Boot 工程的执行入口,运行 main 方法就可以启动项目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication注解</h4><ul><li><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootConfiguration =&gt; @Configuration 意味着可以当配置文件使用,可以使用 Bean 声明对象,该 Bean 可以注入到容器中</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @EnableAutoConfiguration 启用自动配置,把 Java 对象配置好,注入到 spring 容器中</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ComponentScan 扫描器,找到注解,根据注解的功能创建对象,给属性赋值等【默认扫描所在类以及子包中所有的类】</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li><p><code>application.properties</code></p></li><li><p><code>application.yml 【推荐】</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span> <span class="comment"># 配置启动的端口号,默认 8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/app</span> <span class="comment"># 上下文应用路径 【context-path】</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e5192ffccd8d4f1daf719a92a029a21c.png" alt=""></p></li><li><p>多环境配置</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>使用多环境配置文件,可以方便的切换不同的配置</p><p>使用方式: 创建多个配置文件,名称规则:<code>application-环境名称.yml</code></p></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境(application-dev.yml)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/dev</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试环境(application-test.yml)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/test</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 核心配置文件(启动时自动读取的配置文件中激活开启的环境)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/app</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="comment"># 激活使用的环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 自动拼接为 application-dev.yml </span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/fd2c41a1b85342e2becd2ed7f55debc5.png" alt=""></p></li><li><p>配置文件的优先级</p><blockquote><p><code>applciation.properties &gt; applciation.yml &gt; applciation.yaml</code></p><p>不同配置文件中相同配置按照加载优先级相互覆盖,不同配置文件中不同配置全部保留</p></blockquote></li><li><p>属性引用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path:</span> <span class="string">c://</span></span><br><span class="line"><span class="attr">tempPath:</span> <span class="string">$&#123;path&#125;/temp</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件数据映射为Java对象"><a href="#配置文件数据映射为Java对象" class="headerlink" title="配置文件数据映射为Java对象"></a>配置文件数据映射为Java对象</h4><ul><li><p>在<code>application.yml</code>中自定义<code>key=value</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">coder-itl</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">&#x27;12345678@qq.com&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>Java</code>对象读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userConfig.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3ca3b5b09dd248deb6708987c940e2ac.png" alt=""></p></li></ul><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--- 启用 @ConfigurationProperties 注解,进行自定义配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demospringbootdemo.domain.User;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;security.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtSecurityConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> exp;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新令牌过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> refreshExp;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 令牌过期的时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TimeUnit unit;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; phons;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">exp:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">refresh-exp:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">coder-itl</span></span><br><span class="line">    <span class="attr">unit:</span> <span class="string">minutes</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">coder-itl</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">map:</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">19</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">phons:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1234567&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;986567899&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1213&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c7007cf008d340acba6310bddf259884.png" alt=""></p></li><li><p>使用控制器访问测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtConfigController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtSecurityConfig jwtSecurityConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JwtSecurityConfig <span class="title function_">jsy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecurityConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/7ad723a83ff048fdb6e4711300a0fb47.png" alt=""></p></li><li><p>启动类上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JwtSecurityConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemospringbootDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemospringbootDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义配置的作用:<code>快速注入一个配置到配置类中,不需要单独使用 @Value 一个一个字段进行赋值</code></p></blockquote></li></ul><h4 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a>整合Junit</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo01ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Demo01Application.class)</span></span><br></pre></td></tr></table></figure><ul><li>测试类如果存在于引导类所在包或者子包中无需指定引导类</li><li>测试类如果不存在于引导类所在的包或子包中需要通过<code>classes</code>属性指定引导类</li></ul></li></ul><h4 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h4><ul><li><p>添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring_tx?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>数据库<code>SQL</code>映射需要添加<code>@Mapper</code>被容器识别到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 告诉 Mybatis 这是 dao 接口,创建此接口的代理对象</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM goods&quot;)</span></span><br><span class="line">    List&lt;Goods&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    <span class="keyword">private</span> Float pricce;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsMapper goodsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">showAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.showAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4b738dab77434d0291728615a564cd75.png" alt=""></p></li><li><p><code>dao</code>和<code>mapper</code>文件分开</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/example/mapper/*.xml</span> <span class="comment"># 指定 mapper 所在路径【类路径下】</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment"># 【sql 日志】</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT * FROM goods</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, amount, price</span><br><span class="line">&lt;==        Row: 1001, 笔记本, 20, 15.0</span><br><span class="line">&lt;==        Row: 1002, 手机, 100, 3000.0</span><br><span class="line">&lt;==      Total: 2</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@21d1085a]</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="整合数据源"><a href="#整合数据源" class="headerlink" title="整合数据源"></a>整合数据源</h4><ul><li><p>添加<code>druid</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot3 版本依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改连接数据库的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># druid 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring_tx?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot-Web配置"><a href="#SpringBoot-Web配置" class="headerlink" title="SpringBoot Web配置"></a>SpringBoot Web配置</h4><ul><li><p>作为<code>springboot web</code>环境的配置类，必须要实现<code>WebMvcConfigurer</code>接口，且必须将<code>@Configuration</code>注解添加到类配置类上</p></li><li><p>实现拦截器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析 token</span></span><br><span class="line">            Map&lt;String, Object&gt; claim = JWTUtils.parseToken(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>配置拦截规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                <span class="comment">// 放行的资源路径：login,register,code</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        log.error(<span class="string">&quot;into GlobalEncodingFilter......&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器与拦截器的区别<ul><li>过滤器可以拦截任何请求，拦截器只能拦截<code>Controller</code>和在<code>static</code>目录下的资源</li><li>执行时机：<code>Filter、Servlet、拦截器</code></li></ul></li></ul></li><li><p>监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener.requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener.requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入过滤器和拦截器需要在启动类上添加<code>@ServletComponentScan</code>注解</p></blockquote></li><li><p>配置<code>Converter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符串到日期的类型转换器【对表单的日期处理,键值对格式】</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数据：&quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.convert;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToDateConvert</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dateFormatPattern;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringToDateConvert</span><span class="params">(<span class="meta">@Value(&quot;$&#123;demo.pattern&#125;&quot;)</span> String dateFormatPattern)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;into StringToDateConvert convert: &#123;&#125;&quot;</span>, dateFormatPattern);</span><br><span class="line">        <span class="built_in">this</span>.dateFormatPattern = dateFormatPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String sourceDate)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;into Date convert: &#123;&#125;&quot;</span>, dateFormatPattern);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleDateFormat.parse(sourceDate);</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注册转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> <span class="comment">// 自定义的日期转换器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringToDateConverter stringToDateConverter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverter(stringToDateConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo.pattern&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String globalTimePattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">    registry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToDateConvert</span>(globalTimePattern));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置<code>HttpMessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要自己配置了MappingJackson2HttpMessageConverter，则SpringBoot就不会再创建并配置MappingJackson2HttpMessageConverter，此时我们可以自己指定客户端发来的json中的日期数据的日期格式【json中的日期数据】</span></span><br><span class="line"><span class="comment">// 在 WebMvcConfigurer 中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpMessageConverter <span class="title function_">httpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    mc.getObjectMapper().setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> mc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注解-AOP"><a href="#注解-AOP" class="headerlink" title="注解-AOP"></a>注解-AOP</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(logController)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordOper</span><span class="params">(JoinPoint jp, Log logController)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">RequestAttributes</span> <span class="variable">ra</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">sra</span> <span class="operator">=</span> (ServletRequestAttributes) ra;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> sra.getRequest();</span><br><span class="line">        log.error(<span class="string">&quot;logController: &#123;&#125;&quot;</span>,logController);</span><br><span class="line">        <span class="comment">// 获取方法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line">        <span class="comment">// 获取类名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> jp.getTarget().getClass().getName();</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">// 获取请求路径</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">requestURL</span> <span class="operator">=</span> request.getRequestURL();</span><br><span class="line">        <span class="comment">// 获取 IP 地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">clientIpAddress</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        log.error(<span class="string">&quot;方法名: &#123;&#125;&quot;</span>, methodName);</span><br><span class="line">        log.error(<span class="string">&quot;类名称: &#123;&#125;&quot;</span>, className);</span><br><span class="line">        log.error(<span class="string">&quot;请求方式: &#123;&#125;&quot;</span>, method);</span><br><span class="line">        log.error(<span class="string">&quot;请求路径: &#123;&#125;&quot;</span>, requestURL);</span><br><span class="line">        log.error(<span class="string">&quot;请求IP: &#123;&#125;&quot;</span>, clientIpAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/28d007cd9f5f4910a8e3e82c524464db.png" alt=""></p></li><li><p>自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Constraint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.PARAMETER&#125;)</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">title</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;记录日志........&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>定义具体的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对一个 String 字段进行 Log 校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLog</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Log, String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足条件返回 true</span></span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;coder-itl&quot;</span>) || s.equals(<span class="string">&quot;记录日志&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他情况全部返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="JSR303数据数据规范"><a href="#JSR303数据数据规范" class="headerlink" title="JSR303数据数据规范"></a>JSR303数据数据规范</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>常用校验注解</p><p><img src="https://img-blog.csdnimg.cn/direct/8697addb7afb4f56affcc136448b0eea.png" alt=""></p></li><li><p>空与非空检查</p><p><img src="https://img-blog.csdnimg.cn/direct/ea398ed278b14e08a56a3587254e09d6.png" alt=""></p></li><li><p><code>boolean</code>检查</p><p><img src="https://img-blog.csdnimg.cn/direct/c3917448c80745d6865fb954341658cb.png" alt=""></p></li><li><p>日期检查</p></li><li><p>数值检查</p><p><img src="https://img-blog.csdnimg.cn/direct/d0e4584c8c7e4707abe18aff8a1a4460.png" alt=""></p></li></ul></li></ul><ul><li><p>对控制器的实体参数校验顺序</p><ol><li><p>实体类的字段添加相关验证注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@NotNull</span> <span class="comment">// 该字段内容不允许为空</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Digits(integer = 1, fraction = 0)</span> <span class="comment">// 1 位整数,0位小数</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>随后在接收的时候添加<code>@Valid</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/valid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Result <span class="title function_">useValid</span><span class="params">(<span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;通过数据校验!&quot;</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果未使用实体,直接对控制器内的参数校验时的使用步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/valid2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Result <span class="title function_">useValid2</span><span class="params">(<span class="meta">@NotBlank</span> <span class="meta">@Length(min = 2, max = 5)</span> String username, <span class="meta">@Digits(integer = 1, fraction = 0)</span> Integer age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;通过数据校验!&quot;</span>, username + <span class="string">&quot; &quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>自定义注解</p><ul><li><p>提供<code>message、groups、payload</code></p></li><li><p>自定义校验数据的类<code>xxxValidation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;MyLog.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">// 提供校验时</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123; 记录日志 &#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在需要校验的地方使用自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log(message = &quot;coder-itl&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义数据层接口与映射配置,继承<code>BaseMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Goods&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.domain.Goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsService</span>  <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Goods&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.GoodsMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;GoodsMapper, Goods&gt; <span class="keyword">implements</span> <span class="title class_">GoodsService</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器调用<code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.GoodsMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">showAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Goods&gt; list = goodsService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意:<code>mybatis-plus</code>中引入了<code>mybatis</code>的依赖,所以需要删除掉单独的引用</p></li></ul><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ul><li><p>添加日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// 日志记录</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">showAll</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into showAll method .....................&quot;</span>);</span><br><span class="line">        List&lt;Goods&gt; list = goodsService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>@Slf4J</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">12</span>-19T23:<span class="number">12</span>:<span class="number">13.886</span>+08:<span class="number">00</span>  INFO <span class="number">11344</span> --- [nio-<span class="number">8081</span>-exec-<span class="number">1</span>] c.e.s.controller.GoodsController         : into showAll method .....................</span><br></pre></td></tr></table></figure></li><li><p>日志信息</p><p><img src="https://img-blog.csdnimg.cn/direct/be4cd3c7786e437f8ddbb3013990a907.png" alt=""></p><ul><li><code>PID</code>: 进程<code>ID</code>,用于表明当前操作所处的进程,当多服务同时记录日志时,该值可用于协助程序员调试程序</li><li>所属类/接口名： 当前显示信息为<code>SpringBoot</code>重写后的信息,名称过长时,简化包名书写为首字母,甚至直接删除</li></ul></li><li><p>设置日志输出格式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d - %m%n&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>%d</code>: 日期</li><li><code>%m</code>: 消息</li><li><code>%n</code>: 换行</li></ul></li><li><p>分组配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span> <span class="comment"># 设置项目级别的日志输出</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">debug</span> <span class="comment"># 设置分组,对某个组设置日志级别</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">com.example.mapper,com.example.controller</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="comment"># 输出的模板格式定义</span></span><br></pre></td></tr></table></figure></li><li><p>设置日志文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span> <span class="comment"># 文件名</span></span><br></pre></td></tr></table></figure></li><li><p>设置滚动日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span> <span class="comment"># 文件名</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="attr">rollingpolicy:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">1KB</span> <span class="comment"># 日志文件最大大小</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-MM-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="热部署配置"><a href="#热部署配置" class="headerlink" title="热部署配置"></a>热部署配置</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/dbad4c5a30f047f18c8ba9e2fa6a7675.png" alt=""></p></li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>在业务方法的上面添加<code>@Transactional</code>，加入注解后,方法有事务功能了</li><li>明确的在<code>主启动类</code>的上面,加入<code>@EnableTransactionManager</code></li></ul><h4 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端使用的是<code>lettuce</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-data-redis 依赖中使用的是 lettuce 客户端</span><br><span class="line">在程序中使用 RedisTemplate 类的方法,操作 redis 数据,实际就是调用 lettuce 客户端中的方法 </span><br></pre></td></tr></table></figure></li><li><p>配置服务器信息</p></li><li><p><code>RedisTemplate</code>序列化</p></li></ul><h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><ul><li><p>定义统一返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">R</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">success</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        r.setCode(<span class="number">200</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        r.setData(data);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        r.setCode(<span class="number">500</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">        r.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">success</span><span class="params">(Integer code, String message, Object data)</span> &#123;</span><br><span class="line">        r.setCode(code);</span><br><span class="line">        r.setMessage(message);</span><br><span class="line">        r.setData(data);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        r.setCode(<span class="number">500</span>);</span><br><span class="line">        r.setMessage(message);</span><br><span class="line">        r.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义全局异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GolbalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">globalExceprionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error(StringUtils.hasLength(e.getMessage()) ? e.getMessage() : <span class="string">&quot;操作失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3be0176c33c749748d76f23646f17bcb.png" alt=""></p></li></ul><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><ul><li><p>全称:<code>JSON Web Token</code></p></li><li><p>定义了一种简洁的,自包含的格式,用于通信双方以<code>json</code>数据格式<code>安全</code>的传输信息</p></li><li><p>组成</p><p><img src="https://img-blog.csdnimg.cn/direct/7311bc2626744485a85e3eb2c5b68f95.png" alt="在这里插入图片描述"></p><ul><li><p>第一部分:<code>Header(头)</code>,记录令牌类型,签名算法等。例如<code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;type&quot;:&quot;JWT&quot;&#125;</code></p></li><li><p>第二部分:<code>Payload(有效载荷)</code>,携带一些自定义信息,默认信息等,例如:<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;Tom&quot;&#125;</code></p></li><li><p>第三部分:<code>Signature(签名)</code>,防止<code>Token</code>被篡改,确保安全性,将<code>header,payload</code>，并加入指定密钥,通过指定签名算法计算而来</p><blockquote><p><code>Base64</code>: 是一种基于<code>64</code>个可以打印字符(<code>A-Z a-z 0-9 + /</code>)来表示二进制数据的编码方式</p></blockquote></li></ul></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试基础使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Demo01Application.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo01ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">generateToken</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claim = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claim.put(<span class="string">&quot;id&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">        claim.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;coder-itl&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;userInfo&quot;</span>, claim) <span class="comment">// 有效载荷</span></span><br><span class="line">                <span class="comment">// System.currentTimeMillis(): 当前时间</span></span><br><span class="line">                <span class="comment">// + 1000 s(在当前时间往后延迟 1s)</span></span><br><span class="line">                <span class="comment">// *60: min(+1000*60: 往后延迟一分钟)</span></span><br><span class="line">                <span class="comment">// *60*60: h (+1000*60*60: 往后延迟一小时)</span></span><br><span class="line">                <span class="comment">// +1000*60*60*12 (有效时间为 12小时)</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>))<span class="comment">// 过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(<span class="string">&quot;coder-itl&quot;</span>)) <span class="comment">// 指定加密算法,配置密钥为 “coder-itl”</span></span><br><span class="line">                ;</span><br><span class="line">        <span class="comment">// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mbyI6eyJpZCI6MTAwMSwidXNlcm5hbWUiOiJjb2Rlci1pdGwifSwiZXhwIjoxNzAzMDg3MDEwfQ.oeELJ-7yre0R8XJ88YiwliE4zuaRCLtr51l9f5dadc4</span></span><br><span class="line">        System.out.println(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verfierToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mbyI6eyJpZCI6MTAwMSwidXNlcm5hbWUiOiJjb2Rlci1pdGwifSwiZXhwIjoxNzAzMDg3MDEwfQ.oeELJ-7yre0R8XJ88YiwliE4zuaRCLtr51l9f5dadc4&quot;</span>;</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;coder-itl&quot;</span>)).build();</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token); <span class="comment">// 验证 token,生成一个解析后的 JWT 对象</span></span><br><span class="line">        Map&lt;String, Claim&gt; claims = decodedJWT.getClaims();</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意事项<ul><li><code>JWT</code>校验时使用的签名密钥,必须和生成<code>JWT</code>令牌时使用的密钥是配套的</li><li>如果<code>JWT</code>令牌解析校验时报错,则说明<code>JWT</code>令牌被篡改或者失效了,令牌非法</li></ul></li></ul></li><li><p>创建工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;coder-itl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收业务数据,生成 token 并返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">genToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;claims&quot;</span>, claims)</span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>))</span><br><span class="line">                .sign(Algorithm.HMAC256(KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 token,验证 token,并返回业务数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">parseToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(KEY)).build().verify(token).getClaim(<span class="string">&quot;claims&quot;</span>).asMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用户登陆成功后,系统会自动下发<code>JWT</code>令牌.然后在后续的每次请求中,浏览器都需要在请求头<code>header</code>中携带到服务端,请求头的名称为<code>Authorization</code>，值为<code>登陆时下发的 JWT 令牌</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果检测到用户未登陆,则 http 响应状态码为 401 - 未授权</span></span><br></pre></td></tr></table></figure></li><li><p>令牌主动失效机制</p><ul><li>登录成功后,给浏览器响应令牌的同时,把该令牌存储到<code>redis</code>中</li><li><code>登陆拦截器</code>中,需要验证浏览器携带的令牌,并同时需要获取到<code>redis</code>中存储的与之相同的令牌</li><li>当用户修改密码成功后,删除<code>redis</code>中存储的旧令牌</li></ul></li></ul><h4 id="Knife4j"><a href="#Knife4j" class="headerlink" title="Knife4j"></a>Knife4j</h4><ul><li><p>是什么</p><blockquote><p><code>Knife4j</code>是一个集<code>Swagger2</code>和 <code>OpenAPI3</code>为一体的增强解决方案</p></blockquote></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入Knife4j的官方start包,该指南选择Spring Boot版本&lt;3.0,开发者需要注意--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;dockerBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">dockerBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定使用Swagger2规范</span></span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        <span class="comment">//描述字段支持Markdown语法</span></span><br><span class="line">                        .description(<span class="string">&quot;# Knife4j RESTful APIs&quot;</span>)</span><br><span class="line">                        .termsOfServiceUrl(<span class="string">&quot;https://itl-coder.github.io/&quot;</span>)</span><br><span class="line">                        .contact(<span class="string">&quot;ituninapp@gmail.com&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;用户服务&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demospringbootdemo.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>分组配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Bean public Docket deptDockerBean() &#123; 部门管理的配置 &#125; 匹配所有以 /dept 开头的请求</span></span><br><span class="line">.groupName(<span class="string">&quot;部门管理&quot;</span>).paths(PathSelectors.ant(<span class="string">&quot;/dept/**&quot;</span>))</span><br><span class="line"><span class="comment">// @Bean public Docket empDockerBean() &#123; 用户管理的配置 &#125;  匹配所有以 /emp 开头的请求</span></span><br><span class="line">.groupName(<span class="string">&quot;用户管理&quot;</span>).paths(PathSelectors.ant(<span class="string">&quot;/emp/**&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d65334f787d7496c8a3dc2a784881fb0.png" alt=""></p></li></ul></li><li><p>控制器的使用</p><ul><li><p>实体类参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;, description = &quot;提供用户信息的接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;对接口功能的说明&quot;, notes = &quot;根据用户传入的信息返回用户对象&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">sayUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3d8e033d0fd54feb9800cf97fc7971db.png" alt=""></p></li><li><p>普通字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;, description = &quot;提供用户信息的接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;对接口功能的说明&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(name = &quot;username&quot;, required = false, defaultValue = &quot;coder-itl&quot;)</span> String username,</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(name = &quot;password&quot;, required = true, defaultValue = &quot;123&quot;)</span> String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username + <span class="string">&quot; &quot;</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>实体类使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;用户实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;姓名&quot;,example=&quot;张飞&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;密码&quot;,example=&quot;123&quot;,required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0260a17d22c445e98ba69a84c878b6ed.png" alt=""></p></li><li><p>启动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/doc.html</span><br></pre></td></tr></table></figure></li><li><p>如何添加了拦截器,进行如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @EnableWebMvc 不启用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GlobalInterceptor globalInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(globalInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于SpingBoot2.7.12 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(<span class="literal">true</span>)</span><br><span class="line">                .groupName(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 过滤路径</span></span><br><span class="line">                <span class="comment">//.paths(PathSelectors.ant())</span></span><br><span class="line">                <span class="comment">// 指定扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demospringbootdemo.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*作者信息*/</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;coder-itl&quot;</span>, <span class="string">&quot;https://itl-coder.github.io/&quot;</span>, <span class="string">&quot;ituninapp@gmail.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;Swagger 测试接口文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Spring Boot 集成 Swagger 测试接口文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://itl-coder.github.io/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br></pre></td></tr></table></figure></li><li><p><code>SpringMvc</code>的配置中添加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;***************Configuring swagger resource handler***************&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动访问</p><blockquote><p><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/629fbe923d0344bbb8a68461284432ae.png" alt=""></p></li><li><p>分组配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">empDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(<span class="literal">true</span>)</span><br><span class="line">                .groupName(<span class="string">&quot;员工管理&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 过滤路径</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/emp/**&quot;</span>))</span><br><span class="line">                <span class="comment">// 指定扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demospringbootdemo.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">deptDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(<span class="literal">true</span>)</span><br><span class="line">                .groupName(<span class="string">&quot;部门管理&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 过滤路径</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/dept/**&quot;</span>))</span><br><span class="line">                <span class="comment">// 指定扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demospringbootdemo.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*作者信息*/</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;coder-itl&quot;</span>, <span class="string">&quot;https://itl-coder.github.io/&quot;</span>, <span class="string">&quot;ituninapp@gmail.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;Swagger 测试接口文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Spring Boot 集成 Swagger 测试接口文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://itl-coder.github.io/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>更换<code>UI</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dependency&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;groupId&gt;io.springfox&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;version&gt;2.10.0&lt;/version&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;/dependency&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更改<code>静态资源配置放行</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******************************Configuring swagger resource handler&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/doc.html</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="LocalDateTime的使用"><a href="#LocalDateTime的使用" class="headerlink" title="LocalDateTime的使用"></a>LocalDateTime的使用</h4><ul><li><p><code>yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure></li><li><p><code>序列化配置</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTimeSerializerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义日期时间格式模式，使用 @Value 注解从配置文件中获取，若未配置则使用默认值 &quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 LocalDateTime 类型的序列化器，使用指定的日期时间格式模式</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTimeSerializer <span class="title function_">localDateTimeSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Jackson2ObjectMapperBuilderCustomizer，用于自定义 Jackson 对象映射器的构建器</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title function_">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回一个 lambda 表达式，接受 Jackson2ObjectMapperBuilder 对象并进行自定义配置</span></span><br><span class="line">        <span class="keyword">return</span> builder -&gt; &#123;</span><br><span class="line">            <span class="comment">// 设置 LocalDateTime 类型的序列化器为前面定义的 localDateTimeSerializer()</span></span><br><span class="line">            builder.serializerByType(LocalDateTime.class, localDateTimeSerializer());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> <span class="comment">// 用于页面展示</span></span><br><span class="line">   <span class="keyword">private</span> LocalDateTime birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demospringbootdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTimeSerializerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从配置文件中读取日期时间格式的模式，默认为&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 LocalDateTimeSerializer 实例，使用指定的日期时间格式模式</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTimeSerializer <span class="title function_">localDateTimeSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 Jackson2ObjectMapperBuilder，指定 LocalDateTime 类型的序列化器为上述创建的实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title function_">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder -&gt; builder.serializerByType(LocalDateTime.class, localDateTimeSerializer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="日期问题注解"><a href="#日期问题注解" class="headerlink" title="日期问题注解"></a>日期问题注解</h4><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy/MM/dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span> <span class="comment">// 用于页面展示</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> <span class="comment">// 用于接收前端传递的字符串格式日期</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4ef241578daf4cb1b2a1bcb8ad5cab1c.png" alt=""></p></li><li><p>控制器(<code>接收表单类型,也就是键值对格式</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dept 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 新增结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Dept&gt; <span class="title function_">add</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="built_in">this</span>.deptService.insert(dept));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/cb85d406c4044fb7bd99e257b0129982.png" alt=""></p></li><li><p>传递<code>json</code>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Dept&gt; <span class="title function_">add</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="meta">@RequestBody</span> Dept dept)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="built_in">this</span>.deptService.insert(dept));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e5dc7d595fea48ed9d35cb2b3d1f07f2.png" alt=""></p></li></ul><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><ul><li><p>使用<code>Quartz</code>调度程序</p><blockquote><p><code>Quartz</code>使用<code>Trigger、Job</code>和<code>JobDetail</code>对象来实现各种作业的调度</p></blockquote></li><li><p>相关概念</p><ul><li><p>工作(<code>job</code>): 用于定义具体执行的工作</p></li><li><p>工作明细(<code>JobDetail</code>)： 用于描述定时工作相关的信息</p></li><li><p>触发器(<code>Trigger</code>): 用于描述触发工作的规则,通常使用<code>cron</code>表达式定义调度规则</p></li><li><p>调度器(<code>Scheduler</code>)：描述了工作明细与触发器的对应关系</p></li></ul></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RainbowJob</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cron</span></span><br><span class="line"><span class="comment">     * on the second, minute, hour, day of month, month, and day of week.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rainBowJob</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行任务............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c0b6a396c5b341419e0574a52ba48357.png" alt=""></p></li><li><p>启动类配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemospringbootDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemospringbootDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/52c8b44b90784d81a2877abe044d35ae.gif" alt=""></p></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><ul><li><p><code>Servlet</code>方式的<code>Filter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 Servlet 的 Filter</span></span><br></pre></td></tr></table></figure></li><li><p><code>springboot</code>独有的过滤器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// @WebFilter(&quot;/*&quot;)  注解有缺陷,会根据类名称首字母作为启动顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="comment">// 关于重写的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean&lt;TimeFilter&gt; <span class="title function_">tFrb</span><span class="params">()</span> &#123;</span><br><span class="line">    FilterRegistrationBean&lt;TimeFilter&gt; filterFilterRegistrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// TimeFilter 自定义的过滤器</span></span><br><span class="line">    filterFilterRegistrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">TimeFilter</span>());</span><br><span class="line">    filterFilterRegistrationBean.setUrlPatterns(List.of(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    filterFilterRegistrationBean.setDispatcherTypes(EnumSet.of(DispatcherType.FORWARD, DispatcherType.REQUEST, DispatcherType.INCLUDE, DispatcherType.ERROR));</span><br><span class="line">    <span class="keyword">return</span> filterFilterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><ul><li><p>静态资源的访问路径</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>静态资源访问路径默认被设置为<code>/**(private String staticPathPattern = &quot;/**&quot;;)</code>，代表从任何路径来的请求都将被识别为静态资源,当然,请求的路径需要先经过<code>Controller</code>的请求匹配，如果没有匹配的路径,则此请求将会被识别为静态资源进行处理</p></div></li><li><p>静态资源目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 信息在 WebMvcProperties 类中查看</span></span><br><span class="line">/META-INF/resources/<span class="number">4.</span>png</span><br><span class="line">/resources/<span class="number">3.</span>png</span><br><span class="line">/<span class="keyword">static</span>/<span class="number">1.</span>png</span><br><span class="line">/<span class="keyword">public</span>/<span class="number">2.</span>png</span><br><span class="line">http:<span class="comment">//localhost:8080/1.png</span></span><br><span class="line">http:<span class="comment">//localhost:8080/2.png</span></span><br><span class="line">http:<span class="comment">//localhost:8080/3.png</span></span><br><span class="line">http:<span class="comment">//localhost:8080/4.png</span></span><br></pre></td></tr></table></figure></li><li><p>自定义访问策略</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 yml 中做如下配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span> <span class="comment"># 配置静态资源匹配的路径</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/resources/**</span> <span class="comment"># 配置静态资源访问目录【过时】,resources可以自定义自己的目录名称</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>SpringBoot</code>中不启用<code>@EnableWebMvc</code>注解</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/561cecdbc23a480ba4dfd5c871e78394.png" alt="关闭注解@EnableWebMvc之后可访问资源"></p></li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><p>缓存是一种介于数据永久存储介质与数据应用之间的数据临时存储介质</p></li><li><p>使用缓存可以有效的减少低速数据读取过程的次数(<code>例如磁盘IO</code>),提高系统性能</p><p><img src="https://img-blog.csdnimg.cn/direct/1e6d4127823447d6bd3bd6682d38d8ca.gif" alt="第一次查询数据库,后续相同数据进入缓存,减少DB压力"></p></li><li><p>模拟缓存实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Integer, Dept&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Dept <span class="title function_">queryById</span><span class="params">(Integer deptId)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 如果当前缓存中没有本次要查询的数据,则进行查询,否则直接从缓存中获取数据返回</span></span><br><span class="line">    <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> cache.get(deptId);</span><br><span class="line">    <span class="keyword">if</span> (dept == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">queryDept</span> <span class="operator">=</span> deptMapper.queryById(deptId);</span><br><span class="line">        cache.put(deptId, queryDept);</span><br><span class="line">        <span class="keyword">return</span> queryDept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache.get(deptId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缓存使用<code>(SpringBoot的默认缓存是 Simple)</code></p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure></li><li><p>设置进入缓存的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;namespace&quot;,key = &quot;#deptId&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Dept <span class="title function_">queryById</span><span class="params">(Integer deptId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> deptMapper.queryById(deptId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="常见缓存整合"><a href="#常见缓存整合" class="headerlink" title="常见缓存整合"></a>常见缓存整合</h4><h5 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h5><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span> <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;E:\spring-boot&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        默认缓存策略</span></span><br><span class="line"><span class="comment">        eternal=&quot;false&quot; 是否永久存在,设置为 true 则不会被清除,此时与 timeout 冲突,通常设置为 false</span></span><br><span class="line"><span class="comment">        maxElementsInMemory=&quot;500&quot;  最大缓存数量</span></span><br><span class="line"><span class="comment">        overflowToDisk=&quot;false&quot; 超过最大缓存数量是否持久化到磁盘</span></span><br><span class="line"><span class="comment">        diskPersistent=&quot;false&quot; 是否启用磁盘持久化</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds=&quot;3600&quot; 最大不活动间隔,设置过长缓存容易溢出,设置过短无效果,可用于记录时效性数据,例如验证码</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds=&quot;3600&quot; 最大存活时间</span></span><br><span class="line"><span class="comment">        memoryStoreEvictionPolicy=&quot;LRU&quot; 缓存清除策略</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;selectById&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改启用该缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:ehcache.xml</span></span><br></pre></td></tr></table></figure></li><li><p>业务层需要缓存的方法上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;GoodsMapper, Goods&gt; <span class="keyword">implements</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line">    <span class="comment">// 会根据这个 Value 到 配置中找相关的缓存策略</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;selectById&quot;,key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">selectById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><ul><li><p>安装一个<code>windows</code>的<code>Redis</code></p><blockquote><p><a href="https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.msi">https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.msi</a></p></blockquote><ul><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个 cmd 窗口 使用 cd 命令切换到安装目录运行</span></span><br><span class="line"><span class="attr">redis-server.exe</span> <span class="string">redis.windows.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/20b2074773114aa38acc7e840fecd4a3.png" alt=""></p></li><li><p>没有可视化客户端的时候,另启一个 <code>cmd</code> 窗口，原来的不要关闭，不然就无法访问服务端了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis-cli.exe</span> <span class="string">-h 127.0.0.1 -p 6379</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加<code>redis</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>需要缓存的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;GoodsMapper, Goods&gt; <span class="keyword">implements</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;selectById&quot;,key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">selectById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/direct/0bf4b8acd226497a930a105b0e58b0b9.png" alt="实体类需要实现序列化接口"></p></li></ul><h5 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h5><ul><li><p>软件下载,放到合适的目录内,不要点击<code>exe</code>文件</p></li><li><p>使用管理员权限进入<code>cmd</code></p></li><li><p>执行安装命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">memcached.exe</span> <span class="string">-d install</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令启动服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">memcached.exe</span> <span class="string">-d start</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令停止服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">memcached.exe</span> <span class="string">-d stop</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>持久层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;goods&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM goods</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;keyWord!=null and keyWord!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            OR name like concat(&#x27;%&#x27;,#&#123;keyWord&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by name asc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示不合理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">selectAll</span><span class="params">(Integer currentPage, Integer pageSize, String keyWord)</span> &#123;</span><br><span class="line">    PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">    <span class="keyword">return</span> goodsMapper.selectAll(keyWord);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2e3033dd83f24623a6af8a2adff51c15.png" alt="这个数据虽然有结果,但是返回不够理想,需要改进"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合理做法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageInfo&lt;Goods&gt; <span class="title function_">selectAll</span><span class="params">(Integer currentPage, Integer pageSize, String keyWord)</span> &#123;</span><br><span class="line">    PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">    List&lt;Goods&gt; goods = <span class="built_in">this</span>.baseMapper.selectAll(keyWord);</span><br><span class="line">    PageInfo&lt;Goods&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(goods);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/80477f7f705a4df29b2ff738919c3c69.png" alt=""></p></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Goods&gt; <span class="title function_">showAll</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Integer currentPage,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Integer pageSize,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String keyWord)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;warn showAll method .....................&quot;</span>);</span><br><span class="line">        PageInfo&lt;Goods&gt; pageInfo = goodsService.selectAll(currentPage, pageSize, keyWord);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><ol><li>在<code>Spring Boot</code>项目中的引导类上有一个注解<code>@SpringBootApplication</code>，这个注解是对三个注解进行了封装,分别是<ul><li><code>@SpringBootConfiguration</code></li><li><code>@EnableAutoConfiguration</code></li><li><code>@ComponentScan</code></li></ul></li><li>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解.该注解通过<code>@Import</code>注解导入对应的配置选择器,内部就是读取了该项目和该项目引用的<code>jar</code>包的<code>classpath</code>路径下<code>META-INF/spring.factories</code>文件中所配置的类的全类名。在这些配置类中所定义的<code>Bean</code>会根据条件注解<code>所指定的条件来决定</code>是否将其导入到<code>Spring</code>容器中</li><li>条件判断会有像<code>@ConditionalOnClass</code>这样的注解,判断是否有对应的<code>class</code>文件,如果有则加载该类,把这个配置类的所有<code>Bean</code>放入到<code>Spring</code>容器中使用</li></ol><h4 id="自定义-starter-步骤"><a href="#自定义-starter-步骤" class="headerlink" title="自定义 starter 步骤"></a>自定义 starter 步骤</h4><ul><li><p>创建<code>maven</code>项目,需要两个核心依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-autoconfigure</span><br><span class="line">spring-boot-autoconfigure-processor</span><br></pre></td></tr></table></figure></li><li><p>在项目中创建一个自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配置类使用 <span class="meta">@Configuration</span> 注解标注</span><br><span class="line"><span class="meta">@Bean</span> 注解来声明需要自动装配的 bean</span><br></pre></td></tr></table></figure></li><li><p>创建<code>spring.factories</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.factories 文件是自动装配的核心文件,放置在 resources/META-INF 中</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把自动配置类的全路径名称写入</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.pdai.demospringbootstarter.DemoAutoConfiguration</span><br></pre></td></tr></table></figure></li><li><p>如果<code>starter</code>需要一些外部的配置属性,可以创建一个配置类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span> 注解标注</span><br></pre></td></tr></table></figure></li><li><p>点击<code>install</code>安装到<code>maven</code>仓库</p></li><li><p>在其他项目中引入<code>starter</code>组件,<code>Spring Boot</code>就会自动进行配置</p></li></ul><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CORS 资源共享配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//1.允许任何来源</span></span><br><span class="line">        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="comment">//2.允许任何请求头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(CorsConfiguration.ALL);</span><br><span class="line">        <span class="comment">//3.允许任何方法</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(CorsConfiguration.ALL);</span><br><span class="line">        <span class="comment">//4.允许凭证</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站资源收集</title>
      <link href="/2023/12/14/cd2e49b2/"/>
      <url>/2023/12/14/cd2e49b2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="网站资源收集"><a href="#网站资源收集" class="headerlink" title="网站资源收集"></a>网站资源收集</h3><h4 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h4><ul><li><p>编程字体</p><blockquote><p><a href="https://www.programmingfonts.org/#d2coding">https://www.programmingfonts.org/#d2coding</a></p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>相关问题总结</title>
      <link href="/2023/12/12/624a4e6d/"/>
      <url>/2023/12/12/624a4e6d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="相关问题总结"><a href="#相关问题总结" class="headerlink" title="相关问题总结"></a>相关问题总结</h3><h4 id="你对IOC的理解"><a href="#你对IOC的理解" class="headerlink" title="你对IOC的理解"></a>你对IOC的理解</h4><ul><li><p><code>IOC</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IOC是控制反转,就是把实例化对象的权利交给容器,而不是我们自己在程序中实例化</span><br><span class="line">IOC主要的作用就是解耦</span><br><span class="line">   举个例子: 控制器和业务层例子,UserServlet中使用UserService接口,不依赖于 UserService的实现类,然后当我们替换下层UserService实现的时候,只需要修改Spring配置,而不需要我们修改UserServlet的代码,这就是完全解耦</span><br></pre></td></tr></table></figure></li></ul><h4 id="UML是什么-UML中如何表示继承、关联、依赖、实现"><a href="#UML是什么-UML中如何表示继承、关联、依赖、实现" class="headerlink" title="UML是什么?UML中如何表示继承、关联、依赖、实现"></a>UML是什么?UML中如何表示继承、关联、依赖、实现</h4><ul><li><p><code>UML</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UML是 Unifeid Model Language 的缩写,中文是统一建模语言,是由一整套图表组成的标准化建模语言,通过使用 UML 使得在软件开发之前,对整个软件设计有更好的可读性,可理解性,从而降低开发风险,同时,也能方便各个开发人员之间的交流</span><br></pre></td></tr></table></figure></li><li><p>使用<code>UML</code> 的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 为用户提供现成的、有表现力的可视化建模语言,以便他们开发和交换有意义的模型</span><br><span class="line"><span class="number">2.</span> 为核心概念提供可扩展性和特殊化机制</span><br><span class="line"><span class="number">3.</span> 独立于特定的变成语言和开发过程</span><br></pre></td></tr></table></figure><blockquote><p> <a href="https://juejin.cn/post/7022154172686401572#heading-6">https://juejin.cn/post/7022154172686401572#heading-6</a></p></blockquote><ul><li><p>UML类图中继承关系使用空心三角形+实线表示。</p></li><li><p>UML类图中实现关系使用空心三角形+虚线表示。</p></li><li><p>UML类图中关联使用实线箭头表示。</p></li><li><p>UML类图中依赖关系使用虚线箭头表示。</p></li><li><p>UML类图中组合关系使用实心菱形+实线表示。</p></li></ul></li></ul><h4 id="依赖倒置的原则是什么"><a href="#依赖倒置的原则是什么" class="headerlink" title="依赖倒置的原则是什么"></a>依赖倒置的原则是什么</h4><p><img src="https://img-blog.csdnimg.cn/direct/e7d509db281745abb50b4ecd5406cacd.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserServlet:</span><br><span class="line"><span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>(); <span class="comment">// 耦合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserService service; <span class="comment">// 解耦</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnoationCo</span></span><br></pre></td></tr></table></figure><h4 id="接口和抽象类的区别是什么"><a href="#接口和抽象类的区别是什么" class="headerlink" title="接口和抽象类的区别是什么"></a>接口和抽象类的区别是什么</h4><ul><li><p>语法</p><ul><li>接口中,所有的方法都是抽象的,都被<code>public abstract</code>修饰,抽象类中,即可以有抽象方法,也可以有具体方法</li><li>接口中的所有字段,都默认必须被<code>public static final</code>修饰;抽象类中的字段没有任何限制</li><li>接口不能被实例化,抽象类也不能被实例化</li><li>接口中没有构造代码块,也没有构造器,抽象类啥都有</li></ul></li><li><p>作用</p><ul><li><p>接口的作用(<code>例子: UserService</code>)</p><ul><li>提高程序扩展性</li><li>统一访问</li><li>完全解耦</li></ul></li><li><p>抽象类的作用: 抽象类就是为了被子类继承,从而提高代码重用性(<code>List和AbstractList和ArrayList和LinkedList</code>)</p></li></ul></li></ul><h4 id="子类的实例化过程"><a href="#子类的实例化过程" class="headerlink" title="子类的实例化过程"></a>子类的实例化过程</h4><ul><li><p>调用父类静态块</p></li><li><p>调用子类静态块</p></li><li><p>调用父类构造代码块</p></li><li><p>普通字段属于代码快</p></li><li><p>调用父类构造器</p></li><li><p>调用子类构造代码块</p></li><li><p>调用子类构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/15 10:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">zi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> outputFu();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">outputFu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变量 a 的执行时机....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu 代码快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi() static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi() 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi() 代码快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/54d69f52d96a4106a0fdedebaa4dc808.png" alt=""></p></li></ul><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li><p>原子性: 事务中的多个步骤,要么都执行,要么都不执行</p><blockquote><p>比如转账,就是一个事务,张三给李四转账200,其中就有2个步骤,1.张三的余额减去200,2.李四的余额加上200,这两个步骤,要么都执行,要么都不执行。如果第一步执行成功,第二步执行失败，那么第一步的操作也需要回滚</p></blockquote></li><li><p>一致性: 在事务执行前后,数据在逻辑上保持一致</p><blockquote><p>比如转账:张三1000，李四1000，他们的总和2000,张三给李四转账200以后,张三800,李四1200，此时综合仍然是2000,转账前后的总和保持不变</p></blockquote></li><li><p>隔离型</p><blockquote><p>多个事务并发操作相同的数据时,一个事务对其他事务的影响。具体如何影响的,取决于隔离级别</p></blockquote><ul><li>隔离级别有四种<ul><li>读未提交</li><li>读已提交</li><li>不可重复读</li><li>串行化</li></ul></li></ul></li><li><p>持久性: 一个事务一旦结束(提交或者回滚),对数据库中数据的影响会一直保存下去,任何设备故障都不会影响存储的数据</p></li></ul><h4 id="脏读、幻读、不可重复读分别是什么"><a href="#脏读、幻读、不可重复读分别是什么" class="headerlink" title="脏读、幻读、不可重复读分别是什么"></a>脏读、幻读、不可重复读分别是什么</h4><ul><li><p>脏读</p><p>当一个事务读取到另一个事务尚未提交的数据时,发生了脏读,如果另一个事务回滚,读取到的数据就是无效的</p></li><li><p>幻读</p><p>当一个事务在读取某个范围内的数据时,另一个事务在该范围内插入了新的数据,导致第一个事务的读取结果发生了变化,就发生了幻读</p></li><li><p>不可重复读</p><p>当一个事务在读取某个数据后,另一个事务修改了该数据,导致第一个事务再次读取时得到不同的结果,就发生了不可重复读</p></li></ul><h4 id="事务的四个隔离级别分别是什么"><a href="#事务的四个隔离级别分别是什么" class="headerlink" title="事务的四个隔离级别分别是什么"></a>事务的四个隔离级别分别是什么</h4><ul><li>读未提交：允许一个事务读取另一个事务未提交的数据,最低的隔离级别,可能导致脏读、幻读、不可重复读</li><li>读已提交: 一个事务只能读取已提交的数据,解决了脏读问题,但仍可能出现幻读和不可重复读</li><li>可重复读: 保证在事务执行期间同一查询的结果时一致的,解决了脏读和不可重复读,但仍可能出现幻读</li><li>串行化: 最高的隔离级别,通过锁定事务涉及的数据,避免了脏读、不可重复读和幻读，但可能导致性能下降</li></ul><h4 id="ArrayList和linkedList的区别"><a href="#ArrayList和linkedList的区别" class="headerlink" title="ArrayList和linkedList的区别"></a>ArrayList和linkedList的区别</h4><ul><li><p>数组</p><blockquote><p>数组(<code>Array</code>)是一种用连续的内存空间存储相同数据类型数据的线性的数据结构</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/d99090dafdef44fe878959bac5426818.png" alt=""></p><ul><li><p>数组获取元素的寻址公式</p><blockquote><p><code>a[i] = baseAddress + i *(dataTypeSize)</code> </p></blockquote><ul><li><code>baseAddress</code>: 数组的首地址(<code>假设 10</code>)</li><li><code>dataTypeSize</code>： 代表数组中元素类型的大小,<code>int</code>型的数据,<code>dataTypeSize=4</code>字节</li></ul></li><li><p>为什么数组索引从<code>0</code>开始呢?假如从<code>1</code>开始不行吗</p><ul><li>在根据数组索引获取元素的时候，会用索引和寻址公式来计算内存所对应的元素数据,寻址公式是:数组的首地址 + 索引 * 存储数据的类型大小</li><li>如果数组的索引从 <code>1</code>开始,寻址公式中,就需要增加一次减法操作,对于<code>CPU</code>来说就多了一次指令,性能不高</li></ul></li><li><p>操作数组的时间复杂度(<code>查找</code>)</p><ul><li><p>知道索引查找的时间复杂度</p><blockquote><p>数组的元素的访问是通过下标来访问的,计算机通过数组的首地址和寻址公式能够快速的找到想要访问的元素,时间复杂度为<code>O(1)</code></p></blockquote></li><li><p>不知道索引的时间复杂度</p><ul><li><p>查找的元素未排序</p><blockquote><p>平均负载度是<code>O(n)</code></p></blockquote></li><li><p>查找的元素经过排序</p><blockquote><p>二分查找(<code>(O(log_n))</code>)</p></blockquote></li></ul></li></ul></li><li><p>数组元素的插入、删除的复杂度</p><ul><li>插入、删除的平均复杂度为<code>O(n)</code></li></ul></li></ul></li><li><p><code>ArrayList</code>底层的实现原理是什么</p><ul><li><code>ArrayList</code>底层是用动态数组实现的</li><li><code>ArrayList</code>初始容量为<code>0</code>，当第一次添加数据的时候才会初始化容量为<code>10</code></li><li><code>ArrayList</code>再进行扩容的时候是原来容量的<code>1.5</code>倍,每次扩容都需要拷贝数组</li><li><code>ArrayList</code>在添加数据的时候<ul><li>确保数组已使用长度(<code>size+1</code>)之后足够存下下一个数据</li><li>计算数组的容量,如果当前数组已使用<code>size（长度）+1</code>后大于当前的数组长度,则调用<code>grow</code>方法扩容(<code>扩容原来的 1.5 倍</code>)</li><li>确保新增的数据有地方存储后,则将新元素添加到位于<code>size</code>的位置上</li><li>返回添加成功布尔值</li></ul></li></ul></li><li><p><code>ArrayList list = new ArrayList(10)</code>中的<code>list</code>扩容几次</p><blockquote><p>该语句只是声明和实例了一个<code>ArrayList</code>，指定了容量为<code>10</code>，为扩容</p></blockquote></li><li><p>如何实现数组和<code>List</code>之间的转换</p><ul><li>数组转<code>List</code>，使用<code>JDK</code>中<code>java.util.Arrays</code>工具类的<code>asList</code>方法</li><li><code>List</code>转数组,使用<code>List</code>的<code>toArray</code>方法,无参<code>toArray</code>方法返回<code>Object</code>数组,传人初始化长度的数组对象,返回该对象数组</li></ul></li><li><p>用<code>Arrays.asList</code>转<code>List</code>后,如果修改了数组内容,list会受影响吗</p><blockquote><p>如果修改了数组的内容,list会受影响,因为他的底层使用了<code>Arrays</code>类中的内部类<code>ArrayList</code>来构造的集合,在这个集合的构造器中,把我们传入的这个集合进行了包装而已,最终指向的都是同一个内存地址</p></blockquote></li><li><p>List用toArray转数组后,如果修改了List内容,数组受影响吗</p><blockquote><p>如果修改了 list 内容,数组不会影响,当调用了 toArray 以后,在底层是它是进行了数组拷贝,跟原来的元素就没啥关系了,所以即使liet修改了以后,数组也不受影响</p></blockquote></li><li><p>ArrayList和LinkedList的区别</p><ul><li><p>底层数据结构层面</p><ul><li>ArrayList 是动态数组的数据结构实现的</li><li>LinkedList是双向链表的数据结构实现的</li></ul></li><li><p>操作效率</p><ul><li>ArrayList按照下标查询的时间复杂度是<code>O(1)</code>,LinkedList不支持下标查询</li><li>查找(未知索引):ArrayList需要遍历,链表也需要遍历,时间复杂度都是<code>O(1)</code></li><li>新增和删除<ul><li>ArrayList 尾部插入和删除,时间复杂度是<code>O(1)</code>，其他部分增删需要挪动数组,时间复杂度是<code>O(n)</code></li><li>LinkedList 头尾节点增加、删除时间复杂度是(<code>O(1)</code>)，其他都需要遍历链表,时间复杂度是(<code>O(n)</code>)</li></ul></li></ul></li><li><p>内存空间占用</p><ul><li>ArrayList底层是数组,内存连续,节省内存</li><li>LinkedList是双向链表需要存储数据,和两个指针,更占用内存</li></ul></li><li><p>线程安全</p><ul><li><p>ArrayList 和 LinkedList 都不是线程安全的</p></li><li><p>如果需要保证线程安全,有两种方案</p><ul><li><p>在方法内使用,局部变量则是线程安全的</p></li><li><p>使用线程安全的ArrayList和LinkedList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; syncArrayList = Collections.synchorizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">List&lt;Object&gt; syncLinkedList = Collections.synchorizedList(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h4 id="JDK动态代理和CGLIB动态代理的区别"><a href="#JDK动态代理和CGLIB动态代理的区别" class="headerlink" title="JDK动态代理和CGLIB动态代理的区别"></a>JDK动态代理和CGLIB动态代理的区别</h4><ul><li>JDK动态代理只提供接口的代理,不支持类的代理<ul><li>jdk会在运行时为目标类生成一个动态代理类<code>$proxy*.class</code></li><li>该代理类是实现了目标类接口,并且代理类会实现接口所有的方法增强代码</li><li>调用是通过代理类先调用处理类进行增强,再通过反射的方式进行调用目标方法,从而实现AOP</li></ul></li><li>如果代理类没有实现接口，那么<code>SpringAOP</code>会选择使用<code>Cglib</code> 来动态代理目标类<ul><li><code>cglib</code>的底层是通过 <code>ASM</code> 在运行时动态的生成目标类的一个子类,还有其他相关类,都是为增强调用时效率,并且会重写父类所有的方法增强代码</li><li>调用时<code>先通过代理类进行增强,再直接调用父类</code>对应的方法进行调用目标方法，从而实现<code>AOP</code><ul><li><code>Cglib</code> 是通过继承的方式做的动态代理,因此如果某个类被标记为 final,那么他是无法使用 <code>Cglib</code>做动态代理的</li><li><code>Cglib</code> 除了生成目标子类代理类,还有一个<code>FastClass</code>(路由类),可以让本类方法调用进行增强(不是必须的)，而不会像<code>jdk</code>代理那样本类方法调用增强会失效</li></ul></li></ul></li></ul><h4 id="Autowired和-Resource"><a href="#Autowired和-Resource" class="headerlink" title="@Autowired和@Resource"></a>@Autowired和@Resource</h4><ul><li>@Autowired 是spring提供的,@Resource是jdk内置的</li><li>@Autowired是优先按照类型查找<ul><li>找到一个就装配</li><li>找不到,就看<code>required</code>属性的取值,true就报错,false就不报错,而是注入null</li><li>找到多个: 就按照名称找,找到就注入,找不到就报错</li></ul></li><li>@Resource优先按照名称找<ul><li>找到一个就装配</li><li>找不到就报错</li><li>找到多个也报错</li></ul></li></ul><h4 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h4><ul><li><p>线程安全</p><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>线程安全是指在多线程环境中,一个函数或者一个程序的执行都能够按照设计的正确方式进行,而不会产生不确定的结果或者破坏数据的一致性,在并发编程中,多个线程可能同时访问共享的数据,如果不采取适当的措施，就可能导致数据竞争和不一致的状态。</p><p>一个线程安全的程序在多线程环境中的执行结果与在单线程环境中的执行结果是一致的,不会受到其他线程的影响</p></div><ul><li>实现线程安全的方法<ul><li>互斥锁</li><li>信号量</li><li>条件变量</li><li>原子操作</li><li>不可变对象</li></ul></li></ul></li></ul><h4 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h4><h4 id="你对AOP的理解"><a href="#你对AOP的理解" class="headerlink" title="你对AOP的理解"></a>你对AOP的理解</h4><ul><li><p>理解</p><p><code>AOP</code>面向切面编程.<code>AOP</code>是对传统<code>OOP(面向对象编程)</code>的补充。<code>AOP</code>的主要作用就是为了优雅的织入逻辑。也就是给一个现有类添加新的功能时,不用修改该类的源码,符合<code>开闭原则</code>,所谓的开闭原则就是<code>对修改关闭,对扩展开放</code></p><p>举个例子: 给某个业务类添加日志功能。只需要额外创建一个切面类，在该类上面添加<code>@Component,@Aspect</code>注解,在该切面类中编写通知,通知就是一个方法,该方法封装了：在什么时候，什么地方(切点),什么事情(方法体)。再从<code>IoC</code>容器中获取该业务类的对象时,获取到的就是一个织入了日志逻辑的代理对象。对代理对象的方法调用,就会执行切面逻辑</p><p>Spring切面的底层原理是:<code>JDK</code>的动态代理</p></li></ul><h4 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals 的区别"></a>== 和 equals 的区别</h4><ul><li><p>Integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认 byte 范围, (-128) - (+127)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">sout(i==i2) <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="String的常用方法有哪些-接收什么参数-返回什么值"><a href="#String的常用方法有哪些-接收什么参数-返回什么值" class="headerlink" title="String的常用方法有哪些?接收什么参数,返回什么值"></a>String的常用方法有哪些?接收什么参数,返回什么值</h4><h4 id="String和StringBuilder的区别"><a href="#String和StringBuilder的区别" class="headerlink" title="String和StringBuilder的区别"></a>String和StringBuilder的区别</h4><ul><li><p><code>String</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String 的不可变性</span></span><br><span class="line">String 对象是不可变的，一旦创建，其值就不能被修改。每次对 String 进行操作时，实际上都是创建了一个新的 String 对象。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么 String 是线程安全的</span></span><br><span class="line">String 是线程安全的，因为它是不可变的，多个线程可以同时访问一个 String 对象而不会导致问题。</span><br></pre></td></tr></table></figure></li></ul><h4 id="你知道SpringMVC常用的注解有哪些"><a href="#你知道SpringMVC常用的注解有哪些" class="headerlink" title="你知道SpringMVC常用的注解有哪些"></a>你知道SpringMVC常用的注解有哪些</h4><ul><li><p>@Component声明一个Bean</p></li><li><p>@Configuration 声明一个配置类</p></li><li><p>@Import导入配置类</p></li><li><p>@ImportResource导入外部的属性配置资源</p></li><li><p>@ComponentScan包扫描</p></li><li><p>@Repostory持久层代理Bean声明注解</p></li><li><p>@Service服务层代理Bean声明注解</p></li><li><p>@Controller控制层声明Bean注解</p></li><li><p>@RequestMapping请求映射</p></li><li><p>@RequestBody获取JSON参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体参数之前,用于接收前端传递的 json 格式的数据</span></span><br></pre></td></tr></table></figure></li><li><p>@RequestParam解决请求参数映射与不一致问题</p></li><li><p>@PathVariable 路径参数</p></li><li><p>@Bean 声明一个Bean</p></li><li><p>@Value 对基本类型注入值</p></li><li><p>@Cookie 获取cookie</p></li><li><p>@RequestHeader获取请求头</p></li><li><p>@EnableWebMVC启动MVC,JSON格式</p></li><li><p>@EnableAspectJAutoProxy开启AOP注解支持</p></li><li><p>@EnableTransactionManager开启事务注解支持</p></li><li><p>@DateTimeFormatter 时间格式化</p></li></ul><h4 id="StringBuilder和StringBuffer的区别"><a href="#StringBuilder和StringBuffer的区别" class="headerlink" title="StringBuilder和StringBuffer的区别"></a>StringBuilder和StringBuffer的区别</h4><ul><li><p>StringBuilder和StringBuffer类是可变的,他们可以直接在原始对象上进行修改而不创建新的对象,这种特性使得在频繁拼接或修改字符串时更高效</p></li><li><p>StringBuilder类是非线程安全的,他的方法没有进行同步处理,如果在多线程环境下使用StringBuilder，需要额外采取措施保证线程安全</p></li><li>StringBuffer类是线程安全的,他的方法进行了同步处理,因此可以在多线程环境下使用</li></ul><h4 id="Collection和Collections的区别"><a href="#Collection和Collections的区别" class="headerlink" title="Collection和Collections的区别"></a>Collection和Collections的区别</h4><ul><li>Collection是集合的父接口<ul><li><code>List</code> 是一个有序的集合，允许重复元素。它继承自 <code>Collection</code> 接口，且每个元素都有一个与之相关的索引。<ul><li><strong>特点：</strong><ul><li>可以通过索引访问元素，索引从0开始。</li><li>允许存储重复元素。</li><li>常见的实现类有 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。</li></ul></li><li><strong>常用方法：</strong><ul><li><code>add(E element)</code>：在列表末尾添加元素。</li><li><code>get(int index)</code>：获取指定索引位置的元素。</li><li><code>remove(int index)</code>：移除指定索引位置的元素。</li><li><code>size()</code>：返回列表中的元素数目。</li></ul></li></ul></li><li><ul><li><strong>定义：</strong> <code>Set</code> 是一个不允许包含重复元素的集合，不保证元素的顺序。它继承自 <code>Collection</code> 接口。</li><li>特点：<ul><li>不允许存储重复元素，即集合中的元素是唯一的。</li><li>不保证元素的顺序，即不可以通过索引访问元素。</li><li>常见的实现类有 <code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code>。</li></ul></li><li>常用方法：<ul><li><code>add(E element)</code>：向集合中添加元素。</li><li><code>remove(Object o)</code>：从集合中移除指定元素。</li><li><code>contains(Object o)</code>：判断集合是否包含指定元素。</li><li><code>size()</code>：返回集合中的元素数目。</li></ul></li></ul></li></ul></li><li>Collections它包含了一系列静态方法，用于对集合进行操作，例如排序、搜索、线程安全化等。<ul><li><code>Collections.synchronizedSet(Set&lt;T&gt; set)</code> 方法来获得一个线程安全的包装器</li><li>使用 <code>Collections.synchronizedList(List&lt;T&gt; list)</code> 方法可以获得一个线程安全的 <code>List</code> 包装器。</li></ul></li></ul><h4 id="你对代理模式的理解"><a href="#你对代理模式的理解" class="headerlink" title="你对代理模式的理解"></a>你对代理模式的理解</h4><ul><li>代理模式有三种<ul><li>静态代理模式</li><li>动态代理<ul><li>new ProxyInstance(classload,interface,handler)</li><li>handler -&gt; invoke 可以执行目标方法</li><li>AOP思想</li></ul></li><li>Cglib动态代理</li></ul></li></ul><h4 id="jdk和jre的区别？"><a href="#jdk和jre的区别？" class="headerlink" title="jdk和jre的区别？"></a>jdk和jre的区别？</h4><ul><li>jdk,java标准开发包,他提供了编译、运行java程序所需的各种工具和资源,包括java编译器,java运行时环境,以及常用的java类库</li><li>jre java 运行环境,用于运行 java的字节码文件,jre 中包含了jvm 以及 jvm 工作所需要的类库,普通用户只需要安装 jre 来运行 java 程序,而程序开发者必须安装 jdk 来编译，调试程序</li><li>jvm Java 虚拟机是 jre 的一部分,它是整个java实现跨平台的最核心的部分,负责运行字节码文件</li></ul><h4 id="HashMap和Hashtable的区别？"><a href="#HashMap和Hashtable的区别？" class="headerlink" title="HashMap和Hashtable的区别？"></a>HashMap和Hashtable的区别？</h4><ul><li>HashMap 是非线程安全的,HashTable 是线程安全的,因为 HashTable 内部的方法基本都经过 synchronzied 修饰,如果要保证线程安全就使用<code>ConcurrentHashMap</code></li><li>因为线程安全的问题,HashMap要比HashTable效率高一点</li><li>HashMap 可以存储null的key和value,但 null 作为键只能有一个,null作为值可以有多个,HashTable不允许有null键和null值,会抛出空指针异常</li><li>初始容量大小和每次扩容大小的不同<ul><li>创建时如果不执行初始容量值,HashTabke默认的初始大小为 11,之后每次扩充,容量变为原来的 2n+1,HashMap默认的初始值大小为 16，之后每次扩容，容量变为原来的2 倍</li><li>创建时如果给定了容量初始值,那么Hashtable会直接使用给定的大小，而HashMap会将其阔充为 2的幂次方大小</li></ul></li><li>jdk1.8 以后的HashMap 在解决哈希冲突时有了较大的变化,当链表长度大于阈值（默认为 8 ，会将链表转换成红黑树前会判断，如果当前数组的长度小于 64,那么会选择先进性数组扩容,而不是转换为红黑树）时，将链表转换为红黑树，以减少搜索时间,HashTable没有这样的机制</li></ul><h4 id="HashMap的put过程？"><a href="#HashMap的put过程？" class="headerlink" title="HashMap的put过程？"></a>HashMap的put过程？</h4><h4 id="HashMap1-7和HashMap1-8的区别？"><a href="#HashMap1-7和HashMap1-8的区别？" class="headerlink" title="HashMap1.7和HashMap1.8的区别？"></a>HashMap1.7和HashMap1.8的区别？</h4><h4 id="线程的状态有哪些？"><a href="#线程的状态有哪些？" class="headerlink" title="线程的状态有哪些？"></a>线程的状态有哪些？</h4><h4 id="要给一个List中添加元素，用什么方法？-从List中删除一个元素用什么方法？"><a href="#要给一个List中添加元素，用什么方法？-从List中删除一个元素用什么方法？" class="headerlink" title="要给一个List中添加元素，用什么方法？ 从List中删除一个元素用什么方法？"></a>要给一个List中添加元素，用什么方法？ 从List中删除一个元素用什么方法？</h4><ul><li><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 要给一个List中添加元素，我们可以使用add方法。这个方法接受一个参数，即我们想要添加到列表中的元素。例如，如果我们有一个String类型的ArrayList，我们可以这样添加一个元素：</span><br><span class="line">* 这段代码会在列表的末尾添加一个新元素</span><br><span class="line">* </span><br><span class="line">* 从List中删除一个元素，我们可以使用remove方法。这个方法可以接受一个对象作为参数，或者一个索引。</span><br><span class="line">* 如果我们传入一个对象，它会从列表中删除第一个匹配的元素。</span><br><span class="line">* 如果我们传入一个索引，它会删除在这个索引位置的元素。例如：</span><br><span class="line">* 这段代码会从列表中删除第一个匹配的<span class="string">&quot;element&quot;</span>。</span><br><span class="line">* 如果我们知道元素的索引，我们也可以这样删除元素代码会删除在索引<span class="number">0</span>位置的元素。</span><br></pre></td></tr></table></figure></li></ul><h4 id="判断Map中是否包含某个键值，用什么方法？Map中是否包含某个值，用什么方法？"><a href="#判断Map中是否包含某个键值，用什么方法？Map中是否包含某个值，用什么方法？" class="headerlink" title="判断Map中是否包含某个键值，用什么方法？Map中是否包含某个值，用什么方法？"></a>判断Map中是否包含某个键值，用什么方法？Map中是否包含某个值，用什么方法？</h4><ul><li><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断Map中是否包含某个键值，我们可以使用containsKey方法。这个方法接受一个对象作为参数，如果Map中包含一个与这个对象相等的键，那么这个方法就会返回<span class="literal">true</span></span><br><span class="line"> * 判断Map中是否包含某个值，我们可以使用containsValue方法。这个方法接受一个对象作为参数，如果Map中包含一个与这个对象相等的值，那么这个方法就会返回<span class="literal">true</span></span><br><span class="line"> * 这两个方法都是基于对象的equals方法来判断相等性的，所以在使用这些方法时，你需要确保你的键和值的类正确地覆盖了equals方法。</span><br></pre></td></tr></table></figure></li></ul><h4 id="如何计算两个集合的交集、差集、并集？"><a href="#如何计算两个集合的交集、差集、并集？" class="headerlink" title="如何计算两个集合的交集、差集、并集？"></a>如何计算两个集合的交集、差集、并集？</h4><ul><li><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 交集：我们可以使用 retainAll 方法来计算两个集合的交集。这个方法会修改调用它的集合，使其只包含同时存在于两个集合中的元素。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tretainAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        <span class="comment">// 现在set1包含的元素是3和4，这是set1和set2的交集</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 差集：我们可以使用removeAll方法来计算两个集合的差集。这个方法会修改调用它的集合，移除所有同时存在于两个集合中的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line">        set1.removeAll(set2);</span><br><span class="line">        <span class="comment">// 现在set1包含的元素是1和2，这是set1相对于set2的差集</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并集：我们可以使用addAll方法来计算两个集合的并集。这个方法会修改调用它的集合，添加所有存在于另一个集合中的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">        set1.addAll(set2);</span><br><span class="line">        <span class="comment">// 现在set1包含的元素是1, 2, 3, 4, 5, 6，这是set1和set2的并集</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 注意: 这些操作可能会修改调用它们的集合。如果你不想修改原始集合，你可以先创建一个新的集合，然后在新集合上进行操作 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ArrayList和LinkedList的区别？"><a href="#ArrayList和LinkedList的区别？" class="headerlink" title="ArrayList和LinkedList的区别？"></a>ArrayList和LinkedList的区别？</h4><ul><li><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* ArrayList和LinkedList都是Java中的List接口的实现，但它们在内部数据结构和性能上有一些重要的区别：</span><br><span class="line"> * </span><br><span class="line"> * <span class="number">1.</span> 内部数据结构：ArrayList内部使用动态数组来存储元素，而LinkedList内部使用双向链表来存储元素。</span><br><span class="line"> * </span><br><span class="line"> * <span class="number">2.</span> 性能：由于内部数据结构的差异，ArrayList和LinkedList在不同操作上的性能有所不同：</span><br><span class="line"> * -</span><br><span class="line"> * 获取元素：ArrayList通过索引直接访问元素，所以获取元素的速度很快，时间复杂度为O(<span class="number">1</span>)。而LinkedList需要从头（或尾）开始遍历到指定的索引，所以获取元素的速度较慢，时间复杂度为O(n)。</span><br><span class="line"> * -</span><br><span class="line"> * 添加/删除元素：ArrayList添加或删除元素时，可能需要移动数组中的其他元素来填补空位或创建空位，所以添加/删除元素的速度较慢。而LinkedList添加或删除元素只需要改变一些指针的指向，所以添加/删除元素的速度较快。但是，如果添加/删除的位置不是链表的头部或尾部，LinkedList仍然需要遍历到指定的位置，这会增加时间复杂度。</span><br><span class="line"> * </span><br><span class="line"> * <span class="number">3.</span> 内存占用：由于LinkedList需要额外的空间来存储节点之间的链接，所以它的内存占用比ArrayList更大。</span><br><span class="line"> * </span><br><span class="line"> * 总的来说，如果你的操作主要是随机访问元素，那么ArrayList可能是更好的选择。如果你的操作主要是在列表的头部或尾部添加或删除元素，那么LinkedList可能是更好的选择。</span><br></pre></td></tr></table></figure></li></ul><h4 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h4><ul><li><p>斐波那契</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foo(index - <span class="number">1</span>) + foo(index - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Mybatis中，-和-的区别？"><a href="#Mybatis中，-和-的区别？" class="headerlink" title="Mybatis中，#{}和${}的区别？"></a>Mybatis中，#{}和${}的区别？</h4><ul><li><p><code>SQL</code>注入是什么</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>#&#123;&#125;</code>会添加<code>单引号</code></p></li><li><p><code>$&#123;&#125;</code>不会添加单引号,可以用于动态表名</p></li></ul><h4 id="Mybatis中常用的动态sql标签包括"><a href="#Mybatis中常用的动态sql标签包括" class="headerlink" title="Mybatis中常用的动态sql标签包括"></a>Mybatis中常用的动态sql标签包括</h4><ul><li><p><code>if</code>：根据条件判断是否执行某个SQL片段。</p></li><li><p><code>where</code>：动态拼接<code>WHERE</code>条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;param !=null&quot;<span class="operator">&gt;</span></span><br><span class="line">name<span class="operator">=</span>#&#123;param&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>choose</code>：根据不同情况选择执行不同的<code>SQL</code>片段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectUsers&quot; parameterType<span class="operator">=</span>&quot;map&quot; resultType<span class="operator">=</span>&quot;User&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users</span><br><span class="line">  <span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>choose<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;searchName != null and searchAge != null&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">AND</span> name <span class="operator">=</span> #&#123;searchName&#125; <span class="keyword">AND</span> age <span class="operator">=</span> #&#123;searchAge&#125;</span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;searchName != null&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">AND</span> name <span class="operator">=</span> #&#123;searchName&#125;</span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;searchAge != null&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">AND</span> age <span class="operator">=</span> #&#123;searchAge&#125;</span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">AND</span> status <span class="operator">=</span> <span class="string">&#x27;ACTIVE&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>choose<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>foreach</code>：循环遍历集合并动态生成<code>SQL</code>片段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectUsersByIds&quot; resultType<span class="operator">=</span>&quot;User&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users</span><br><span class="line">  <span class="keyword">WHERE</span> id <span class="keyword">IN</span></span><br><span class="line">  <span class="operator">&lt;</span>foreach item<span class="operator">=</span>&quot;id&quot; collection<span class="operator">=</span>&quot;ids&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; separator<span class="operator">=</span>&quot;,&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>set</code>：动态设置列名和值。</p></li><li><p><code>sql</code>：直接包含SQL语句片段。</p></li></ul><h4 id="你对Mybatis缓存的理解？"><a href="#你对Mybatis缓存的理解？" class="headerlink" title="你对Mybatis缓存的理解？"></a>你对Mybatis缓存的理解？</h4><ul><li>一级缓存和二级缓存谁的性能更好<ul><li>一级缓存位于会话级别，即在同一个会话中，多次查询相同的数据时，可以直接从内存中获取，避免了重复查询数据库，因此在同一会话内，一级缓存的性能通常会比较好。</li><li>二级缓存位于整个应用程序的级别，可以被多个会话共享，因此可以在不同的会话之间共享缓存数据，从而减少数据库访问次数。但是由于它跨越了会话的边界，因此在并发访问较高时可能会出现缓存同步的问题，可能会影响性能</li></ul></li><li>一级缓存和二级缓存的存活时间<ul><li>一级缓存的存活时间通常是会话的生命周期。当会话关闭时，一级缓存也会被清空，数据不再可用。</li><li>二级缓存的存活时间通常由缓存策略和配置来确定，可以在较长时间内保留缓存数据，直到达到指定的过期时间或者手动清除缓存。</li></ul></li></ul><h4 id="项目中是如何进行分页的？"><a href="#项目中是如何进行分页的？" class="headerlink" title="项目中是如何进行分页的？"></a>项目中是如何进行分页的？</h4><ul><li><p>物理分页：通过数据库提供的分页功能进行分页，例如MySQL的LIMIT关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="keyword">offset</span>, limit;</span><br></pre></td></tr></table></figure><ul><li><p><code>table_name</code> 是你要查询的表名。</p></li><li><p><code>offset</code> 是起始位置，表示跳过的记录数。它表示从结果集中的第几行开始返回数据，是一个非负整数。</p></li><li><p><code>limit</code> 是要返回的记录数，它指定了从起始位置开始，要返回多少条记录。它也是一个非负整数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 例如，如果你想要查询第 <span class="number">3</span> 页，每页显示 <span class="number">10</span> 条记录，你可以使用如下 <span class="keyword">SQL</span> 语句：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">20</span>, <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 在这个示例中，<span class="number">20</span> 是偏移量，表示从结果集中的第 <span class="number">21</span> 条记录开始返回数据（因为 MySQL 中偏移量从 <span class="number">0</span> 开始），<span class="number">10</span> 是限制条件，表示返回 <span class="number">10</span> 条记录。这样就能实现获取第 <span class="number">3</span> 页的数据。</span><br><span class="line"></span><br><span class="line"># 需要注意的是，如果不指定 <span class="keyword">OFFSET</span>，则默认偏移量为 <span class="number">0</span>，即从第一条记录开始返回。另外，如果 <span class="keyword">OFFSET</span> 大于表中的记录数，将不会返回任何数据。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>逻辑分页：通过应用程序代码进行分页，例如自行计算分页偏移量和查询条数。</p><ul><li><strong>分页偏移量（Offset）</strong>：表示从数据库中哪一行开始获取数据。偏移量是根据页码和每页显示的记录数来计算的。公式为：<code>(页码 - 1) * 每页显示的记录数</code>。</li><li><strong>查询条数（Limit）</strong>：表示每页要查询的数据条数。通常就是每页显示的记录数。</li></ul></li><li><p>物理分页和逻辑分页的区别</p><ul><li>物理分页的优势在于效率高，但需要数据库支持分页功能。逻辑分页的优势在于通用性强，但效率相对较低。</li></ul></li><li><p>使用<code>PageHelper</code>插件</p><ul><li>引入依赖</li><li>在<code>service</code>层调用分页</li></ul></li><li><code>MybatisPlus</code>的分页插件<ul><li>配置拦截器</li><li>使用<code>service.selectPage()</code></li></ul></li></ul><h4 id="你知道的SpringBoot的注解有哪些？"><a href="#你知道的SpringBoot的注解有哪些？" class="headerlink" title="你知道的SpringBoot的注解有哪些？"></a>你知道的SpringBoot的注解有哪些？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. @SpringBootApplication:</span><br><span class="line"></span><br><span class="line">是 Spring Boot 的核心注解，用于开启 Spring Boot 自动配置。</span><br><span class="line">该注解组合了 @Configuration, @EnableAutoConfiguration 和 @ComponentScan 三个注解。</span><br><span class="line">可以通过 @SpringBootApplication(exclude = &#123;…&#125;) 来排除自动配置的类。</span><br><span class="line">2. @EnableAutoConfiguration:</span><br><span class="line"></span><br><span class="line">启用 Spring Boot 的自动配置功能，会自动根据类路径中的 jar 包来配置 Spring 容器。</span><br><span class="line">可以通过 @EnableAutoConfiguration(exclude = &#123;…&#125;) 来排除自动配置的类。</span><br><span class="line">3. @ComponentScan:</span><br><span class="line"></span><br><span class="line">用于扫描指定包路径下的类，并将其注册到 Spring 容器中。</span><br><span class="line">可以通过 @ComponentScan(basePackages = &#123;…&#125;) 来指定扫描的包路径。</span><br><span class="line">4. @ConfigurationProperties:</span><br><span class="line"></span><br><span class="line">用于将外部配置文件中的属性绑定到 Java bean 的属性上。</span><br><span class="line">可以通过 @ConfigurationProperties(prefix = &quot;…&quot;) 来指定属性的前缀。</span><br><span class="line">5. @ConditionalOnProperty:</span><br><span class="line"></span><br><span class="line">根据指定的条件判断是否加载该类或方法。</span><br><span class="line">可以通过 @ConditionalOnProperty(name = &quot;…&quot;, havingValue = &quot;…&quot;) 来指定条件。</span><br><span class="line">6. @ConditionalOnBean:</span><br><span class="line"></span><br><span class="line">根据指定的 bean 是否存在来判断是否加载该类或方法。</span><br><span class="line">可以通过 @ConditionalOnBean(type = &#123;…&#125;) 来指定 bean 的类型。</span><br><span class="line">7. @ConditionalOnClass:</span><br><span class="line"></span><br><span class="line">根据指定的类是否存在来判断是否加载该类或方法。</span><br><span class="line">可以通过 @ConditionalOnClass(name = &quot;…&quot;) 来指定类的名称。</span><br><span class="line">8. @ConditionalOnMissingBean:</span><br><span class="line"></span><br><span class="line">根据指定的 bean 是否不存在来判断是否加载该类或方法。</span><br><span class="line">可以通过 @ConditionalOnMissingBean(type = &#123;…&#125;) 来指定 bean 的类型。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc</title>
      <link href="/2023/12/12/e5918a/"/>
      <url>/2023/12/12/e5918a/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringMvc"><a href="#SpringMvc" class="headerlink" title="SpringMvc"></a>SpringMvc</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>介绍</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>它是基于<code>MVC</code>开发模式的框架,用来优化控制器,它是<code>spring</code>家族的一员</p></div><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>什么是<code>MVC</code></p><p>它是一种开发模式,它是模型视图控制器的简称,所有的<code>web</code>应用都是基于<code>MVC</code>开发</p><p><code>M</code>: 模型层,包含实体类,业务层逻辑,数据访问层</p><p><code>V</code>: 视图层,html,javascript,vue等都是视图层,用来显示数据</p><p><code>C</code>:控制器,它是用来接受客户端的请求,并返回响应到客户端的组件,<code>Servlet</code>就是组件</p></div></li></ul><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><ul><li><p>新建项目,选择<code>webapp</code>模板</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mvc-spring<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>中注册<code>springmvc</code>框架的核心对象<code>DispatcherServlet</code></p><ul><li><p>替换<code>web.xml</code>为<code>4</code>的版本</p></li><li><p><code>DispatcherServlet</code>叫做中央调度器,是一个<code>servlet</code>，它的父类继承<code>HttpServlet</code></p></li><li><p><code>DispatcherServlet</code>也叫做前端控制器</p></li><li><p><code>DispatcherServlet</code>负责接受用户提交的请求,调用其他的控制器对象,并把请求的处理结果显示给用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     DispatcherServlet: 是一个 Servlet</span></span><br><span class="line"><span class="comment">     声明,注册 springmvc 的核心对象 DispatcherServlet,需要在 tomcat 服务器启动后,创建 DispatcherServlet 对象的实例,</span></span><br><span class="line"><span class="comment">     为什么要创建 DispatcherServlet 对象的实例？</span></span><br><span class="line"><span class="comment">     因为 DispatcherServlet 在他的创建过程中,会同时创建 springmvc 容器对象</span></span><br><span class="line"><span class="comment">     读取 springmvc 的配置文件,把这个配置文件中的对象都创建好,当用户发起请求时就可以直接使用对象了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     servlet的初始化会执行 init() 方法, DispatcherServlet 在 init() 中&#123;</span></span><br><span class="line"><span class="comment">     // 创建容器,读取配置文件</span></span><br><span class="line"><span class="comment">     WebApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;springmvc.xml&quot;);</span></span><br><span class="line"><span class="comment">     // 把容器对象放入到 servletContext 中</span></span><br><span class="line"><span class="comment">     getServletContext().setAttribute(key,ctx);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        启动 tomcat 报错,读取这个文件, /WEB-INF/springmvc-servlet.xml</span></span><br><span class="line"><span class="comment">        springmvc 创建容器对象时,读取的配置文件默认是 /WEB-INF/&lt;servlet-name&gt;-servlet.xml</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springmvc 配置文件属性名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定 springmvc 的配置文件的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Tomcat 启动后,创建 Servlet 对象,</span></span><br><span class="line"><span class="comment">        load-on-startup: 表示 tomcat 启动后创建对象的顺序,它的值是整数,数值越小,tomcat创建对象的时间越早,大于等于 0 的整数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用框架的时候, url-pattern 可以使用两种值</span></span><br><span class="line"><span class="comment">            1. 使用扩展名方式,语法: *.do,*.action 等</span></span><br><span class="line"><span class="comment">            2. /</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个发起请求的页面<code>index.jsp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/springmvc.action&quot;</span>&gt;go to springmvc action&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建控制器类</p><ul><li><p>在类的上面加入<code>@Controller</code>注解,创建对象，并放入到<code>springmvc容器中</code></p></li><li><p>在类中的方法上面加入<code>@RequestMapping</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.HelloWordController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理用户提交的请求,springmvc 中是使用方法来处理的</span></span><br><span class="line"><span class="comment">     * 方法是自定义的,可以有多种返回值,多种参数,方法名称自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备使用 doSome 方法处理 some.do 请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>: 请求映射, 作用是把一个请求地址和一个方法绑定在一起, 一个请求指定一个方法处理</span></span><br><span class="line"><span class="comment">     * 属性: 1. value是一个string,表示请求的 uri 地址的(some.do),value的值必须是唯一的,不能重复,在使用时,推荐地址以“/”</span></span><br><span class="line"><span class="comment">     * 位置:</span></span><br><span class="line"><span class="comment">     * 1. 在方法的上面(常用)</span></span><br><span class="line"><span class="comment">     * 2. 在类的上面</span></span><br><span class="line"><span class="comment">     * 说明: 使用 <span class="doctag">@RequestMapping</span> 修饰的方法叫做处理器方法或者控制器方法</span></span><br><span class="line"><span class="comment">     * 使用 <span class="doctag">@RequestMapping</span> 修饰的方法可以处理请求的,类似于 Servlet 中的 doGet,doPost</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 返回值: ModelAndView 表示本次请求的处理结果</span></span><br><span class="line"><span class="comment">     * Model: 数据,请求处理完成后,要显示给用户的数据</span></span><br><span class="line"><span class="comment">     * View: 视图,比如 jsp 等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/some.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span> &#123; <span class="comment">// doGet()</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">// 添加数据,框架在请求的最后把数据放入到了 request 作用域</span></span><br><span class="line">        <span class="comment">// request.setAttribute(&quot;msg&quot;,&quot;use springmvc&quot;);</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 可以添加多个数据</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 指定视图,指定视图的完整路径</span></span><br><span class="line">        <span class="comment">// 框架对视图执行的 forward 操作,req.getRequestDispatcher(&quot;/show.jsp&quot;).forward(req,resp);</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;/show.jsp&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回 mv</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建<code>springmvc</code>的配置文件</p><ul><li><p>声明组建扫描器,指定<code>@Controller</code>注解所在的包名</p></li><li><p>声明视图解析器,帮助处理视图的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc 的配置文件中 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/admin/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动服务器,测试访问</p><p><img src="https://img-blog.csdnimg.cn/direct/788e9f092925430b8dcb3382a0f254c8.png" alt=""></p></li><li><p>项目的基础目录结构</p><p><img src="https://img-blog.csdnimg.cn/direct/53ab1cf9d1054acaac691da0c6c67e54.png" alt=""></p></li></ul><h4 id="SpringMVC请求处理过程"><a href="#SpringMVC请求处理过程" class="headerlink" title="SpringMVC请求处理过程"></a>SpringMVC请求处理过程</h4><ul><li><p>请求流程</p><p><img src="https://img-blog.csdnimg.cn/direct/c1618a1533cf4006a58b378965fd1d4b.png" alt=""></p></li></ul><h4 id="DispatcherServlet的源码"><a href="#DispatcherServlet的源码" class="headerlink" title="DispatcherServlet的源码"></a>DispatcherServlet的源码</h4><ul><li><p>springmvc 执行过程源码分析</p><ul><li><p><code>Tomcat</code>启动,创建容器的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 load-on-start 标签指定的 1,创建 DispatcherServlet对象,DispatcherServlet它的父类是继承 HttpServlet的,它是一个 Servlet,在被创建时,会执行 init(),在 init() 方法中，执行了以下核心代码:</span></span><br><span class="line"><span class="comment">// 创建容器,读取 springmvc 的配置</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplication</span>(<span class="string">&quot;springmvc.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 把容器对象放入到 ServletContext 中</span></span><br><span class="line">getServletContext().setAttribute(key,ctx);</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>上面创建容器的作用:<code>创建 @Controller</code>注解所在的类的对象,创建完<code>controller</code>的对象后,把这个对象放入到 <code>springmvc</code>容器中,容器是<code>map</code>，类似于<code>map.put(&quot;xxxx&quot;,xxx对象)</code></p></div></li></ul></li></ul><h4 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h4><ul><li><p><code>/WEB-INF/</code>对用户不开放,是无权访问的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问 /WEB-INF/目录下的资源 =&gt; 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀: 视图文件的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/admin/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀: 视图文件的扩展名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置视图解析器后的控制层改动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.HelloWordController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理用户提交的请求,springmvc 中是使用方法来处理的</span></span><br><span class="line"><span class="comment">     * 方法是自定义的,可以有多种返回值,多种参数,方法名称自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备使用 doSome 方法处理 some.do 请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>: 请求映射, 作用是把一个请求地址和一个方法绑定在一起, 一个请求指定一个方法处理</span></span><br><span class="line"><span class="comment">     * 属性: 1. value是一个string,表示请求的 uri 地址的(some.do),value的值必须是唯一的,不能重复,在使用时,推荐地址以“/”</span></span><br><span class="line"><span class="comment">     * 位置:</span></span><br><span class="line"><span class="comment">     * 1. 在方法的上面(常用)</span></span><br><span class="line"><span class="comment">     * 2. 在类的上面</span></span><br><span class="line"><span class="comment">     * 说明: 使用 <span class="doctag">@RequestMapping</span> 修饰的方法叫做处理器方法或者控制器方法</span></span><br><span class="line"><span class="comment">     * 使用 <span class="doctag">@RequestMapping</span> 修饰的方法可以处理请求的,类似于 Servlet 中的 doGet,doPost</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 返回值: ModelAndView 表示本次请求的处理结果</span></span><br><span class="line"><span class="comment">     * Model: 数据,请求处理完成后,要显示给用户的数据</span></span><br><span class="line"><span class="comment">     * View: 视图,比如 jsp 等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/some.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span> &#123; <span class="comment">// doGet()</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">// 添加数据,框架在请求的最后把数据放入到了 request 作用域</span></span><br><span class="line">        <span class="comment">// request.setAttribute(&quot;msg&quot;,&quot;use springmvc&quot;);</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 可以添加多个数据</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 当配置了视图解析器后,可以使用逻辑名称(视图的文件名),指定视图</span></span><br><span class="line">        <span class="comment">// 框架会使用视图解析器的前缀 + 逻辑名称 + 后缀 =&gt; 组成完整的路径,这里就是字符连接操作</span></span><br><span class="line">        <span class="comment">// /WEB-INF/main/ + show+ .jsp =&gt; /WEB-INF/main/show.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回 mv</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e234c3d85dba40a382a3b1a11182f3a6.png" alt=""></p></li></ul><h4 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h4><ul><li><p>放在类上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span>(&quot;/test&quot;)</span></span><br><span class="line"><span class="comment"> * value: 所有请求地址的公共部分,叫做模块名称</span></span><br><span class="line"><span class="comment"> * 位置: 放在类的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordController</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="RequestMapping-Method属性"><a href="#RequestMapping-Method属性" class="headerlink" title="@RequestMapping-Method属性"></a>@RequestMapping-Method属性</h4><ul><li><p>属性介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>: 请求映射</span></span><br><span class="line"><span class="comment">     * 属性: method,表示请求的方式,它的值是 RequestMethod 类的枚举值</span></span><br><span class="line"><span class="comment">     * 例如: </span></span><br><span class="line"><span class="comment">     *  GET 请求方式,RequestMethod.GET</span></span><br><span class="line"><span class="comment">     *  POST 请求方式,RequestMethod.POST</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/some.do&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="处理方法的参数"><a href="#处理方法的参数" class="headerlink" title="处理方法的参数"></a>处理方法的参数</h4><ul><li><p>处理器方法可以包含以下四类参数,这些参数会在系统调用时由系统自动赋值,即程序员可在方法内直接使用</p><ul><li><p><code>HttpServletRequest</code></p></li><li><p><code>HttpServletResponse</code></p></li><li><p><code>HttpSession</code></p></li><li><p>请求中所携带的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/some.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">(HttpServletRequest req, HttpServletResponse response, HttpSession session)</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>参数接收测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span>(&quot;/test&quot;) value: 所有请求地址的公共部分,叫做模块名称</span></span><br><span class="line"><span class="comment"> * 位置: 放在类的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逐个接受请求参数:</span></span><br><span class="line"><span class="comment">     * 要求: 处理器(控制器)方法的形参名和请求中参数名一致,同名的请求参数赋值给同名的形参</span></span><br><span class="line"><span class="comment">     * 框架接收请求参数:</span></span><br><span class="line"><span class="comment">     * 1. 使用 request 对象接收请求参数</span></span><br><span class="line"><span class="comment">     * String strName = request.getParameter(&quot;username&quot;);</span></span><br><span class="line"><span class="comment">     * String strAge = request.getParameter(&quot;age&quot;);</span></span><br><span class="line"><span class="comment">     * 2. springmvc 框架通过 DispatcherServlet 调用 LoginController 的 login() 方法,</span></span><br><span class="line"><span class="comment">     * 调用方法时,按名称对应,把接收的参数赋值给形参</span></span><br><span class="line"><span class="comment">     * login(strName,Integer.valueOf(strAge))</span></span><br><span class="line"><span class="comment">     * 框架会提供类型转换的功能,能把 string 转换为 int,long,float,double 类型等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">login</span><span class="params">(String username, Integer age)</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    年龄: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    用户名: $&#123;username&#125;</span><br><span class="line">    年龄: $&#123;age&#125;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://img-blog.csdnimg.cn/direct/196deab24e204f30b25233e8601f577d.png" alt=""></p><h4 id="POST-请求乱码问题"><a href="#POST-请求乱码问题" class="headerlink" title="POST-请求乱码问题"></a>POST-请求乱码问题</h4><ul><li><p>过滤器可以自定义,也可以使用框架中提供的过滤器<code>CharacterEncodingFilter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册声明过滤器,解决 post 请求乱码的问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置项目中的字符编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 强制请求对象(HttpServletRequest) 使用 encoding 编码的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 强制应答对象(HttpServletResponse) 使用 encoding 编码的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/5c59ed4f2d4d4796b4bb480ecb2436ac.png" alt=""></p></li></ul><h4 id="请求参数名不一致问题"><a href="#请求参数名不一致问题" class="headerlink" title="请求参数名不一致问题"></a>请求参数名不一致问题</h4><ul><li><p>解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span>(&quot;/test&quot;) value: 所有请求地址的公共部分,叫做模块名称</span></span><br><span class="line"><span class="comment"> * 位置: 放在类的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表单的 name=&quot;username&quot;,name=&quot;age&quot;</span></span><br><span class="line"><span class="comment">     * 请求中参数名和处理器方法的形参名不一样</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span>: 逐个接收请求参数中, 解决请求中参数名与形参名不一样的问题</span></span><br><span class="line"><span class="comment">     * 属性:</span></span><br><span class="line"><span class="comment">     * 1. value 请求中的参数名称</span></span><br><span class="line"><span class="comment">     * 2. required 是一个 boolean,默认值是 true</span></span><br><span class="line"><span class="comment">     * true: 表示请求中必须包含此参数</span></span><br><span class="line"><span class="comment">     * 位置: 在处理器方法的形参定义的前面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String a, <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer b)</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;username&quot;</span>, a);</span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, b);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/478ad95996d24038b54d052b6429a82a.png" alt=""></p></li></ul><h4 id="传递对象参数"><a href="#传递对象参数" class="headerlink" title="传递对象参数"></a>传递对象参数</h4><ul><li><p>定义实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存请求参数值的一个普通类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器方法形参是 java 对象,这个对象的属性名和请求中参数名一样的</span></span><br><span class="line"><span class="comment">     * 框架会创建形参的 java 对象,给属性赋值,请求中的参数是 username,框架会调用 setUsername()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">login</span><span class="params">(User user)</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, user.getAge());</span><br><span class="line">        mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="处理器方法的返回值"><a href="#处理器方法的返回值" class="headerlink" title="处理器方法的返回值"></a>处理器方法的返回值</h4><ul><li>使用<code>@Controller</code>注解的处理器方法,其返回值常用的有四种类型<ul><li>第一种:<code>ModelAndView</code></li><li>第二种: <code>String</code></li><li>第三种: 无返回值<code>void</code></li><li>第四种: 返回自定义类型对象</li></ul></li></ul><h4 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h4><h5 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h5><ul><li><p><code>ModelAndView</code></p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>若处理器方法处理完后,需要跳转到其他资源,且又要在跳转的资源传递数据,此时处理器方法返回<code>ModelAndView</code>比较好,当然,若要返回<code>ModelAndView</code>，则处理器方法中需要定义<code>ModelAndView</code>对象</p><p>在使用时,若该处理器方法只是进行跳转而不传递数据,或只是传递数据而并不向任何资源跳转，此时返回<code>ModelAndView</code>，则将总是一部分多余,要么<code>Model</code>多余,要么<code>View</code>多余,即此时返回<code>ModelAndView</code>将不合适</p></div></li></ul><h5 id="String-视图"><a href="#String-视图" class="headerlink" title="String-视图"></a>String-视图</h5><ul><li><p>处理器方法返回的字符串可以指定逻辑视图名,通过视图解析器可以将其转换为物理视图</p></li><li><p>返回内部资源逻辑视图名</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>若要跳转的资源为内部资源(<code>/WEB-INF/</code>)，则视图解析器可以使用<code>InternalResourceViewResolver</code>内部资源视图解析器,此时处理器方法返回的字符串就是要跳转页面的文件名去掉文件扩展名后的部分,这个字符串与视图解析中的<code>prefix、suffix</code>相结合,即可形成要访问的<code>URI</code></p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 访问 /WEB-INF/目录下的资源 =&gt; 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀: 视图文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/admin/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀: 视图文件的扩展名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="返回对象-Object"><a href="#返回对象-Object" class="headerlink" title="返回对象 - Object"></a>返回对象 - Object</h5><ul><li><p>返回<code>Object</code></p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>处理器方法也可以返回<code>Object</code>对象,这个<code>Object</code>可以是<code>Integer、String、自定义对象、Map、List</code>等,但返回的对象不是作为逻辑视图出现的,而是作为直接在页面显示的数据出现的</p><p>返回对象,需要使用<code>@ResponseBody</code>注解,将转换后的<code>JSON</code>数据放入到响应体中</p></div></li><li><p>使用</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加入处理 json 的工具库的依赖,springmvc 默认使用的 jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>springmvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    实现的功能是完成 Java对象到json,xml,text,二进制等数据格式的转换</span></span><br><span class="line"><span class="comment">    HttpMessageConvert接口: 消息转换器</span></span><br><span class="line"><span class="comment">    功能: 定义 java 转为 json,xml 等数据格式的方法,这个接口有很多实现类,这些实现类完成了 java 对象到 json,java对象到二进制数据的转换</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制器对象方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器返回一个 User,通过框架转为 json,响应 ajax 请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ResponseBody</span>: 作用: 把处理器方法返回对象转为 json后,通过 HttpServletResponse 输出给浏览器</span></span><br><span class="line"><span class="comment">     * 位置: 方法的定义上面,和其他注解没有顺序的关系</span></span><br><span class="line"><span class="comment">     * 返回对象框架的处理流程:</span></span><br><span class="line"><span class="comment">     * 1. 框架会把返回的 User 类型,调用框架中的 ArrayList&lt;HttpMessageConvert&gt; 中每个类的 canWrite()方法</span></span><br><span class="line"><span class="comment">     * 检查那个 HttpMessageConvert 接口的实现类能处理 User类型数据(MappingJackson2HttpMessageConvert)</span></span><br><span class="line"><span class="comment">     * 2. 框架会调用实现类的 write(),这里调用的是 MappingJackson2HttpMessageConvert的write(),把 user</span></span><br><span class="line"><span class="comment">     * 对象转换为 json,调用的是 ObjectMapper 实现转为 json</span></span><br><span class="line"><span class="comment">     * 3.框架会调用  <span class="doctag">@ResponseBody</span> 把 2 的结果输出到浏览器,ajax请求处理完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User user)</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        user.setUsername(<span class="string">&quot;coder-itl&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="返回值-List是JsonArray"><a href="#返回值-List是JsonArray" class="headerlink" title="返回值 List是JsonArray"></a>返回值 List是JsonArray</h5><ul><li><p>实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">login</span><span class="params">()</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(userList,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;coder-itl&quot;</span>, <span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhsan&quot;</span>, <span class="number">28</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">38</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/login.do&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/00d17e04973a4df3a294b28d9a17d5fe.png" alt=""></p><h5 id="返回字符串对象"><a href="#返回字符串对象" class="headerlink" title="返回字符串对象"></a>返回字符串对象</h5><ul><li><p>字符串对象</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>若要返回非中文字符串,将前面返回数值型数据的返回值直接修改为字符串即可。但若返回的字符串中带有中文字符,则接收方页面将会出现乱码。此时需要使用<code>@requestMapping</code>的<code>produces</code>属性指定字符集</p><p><code>produces</code>产品，结果，即该属性用于设置输出结果类型</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.LoginController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器方法返回的是String,String表示数据,不是视图</span></span><br><span class="line"><span class="comment">     * 区分返回值 Strin 是数据,还是视图,看有没有 <span class="doctag">@ResponseBody</span> 注解</span></span><br><span class="line"><span class="comment">     * 如果有 <span class="doctag">@ResponseBody</span> 注解,返回 String 就是数,反之就是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;,produces = &quot;text/lain;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123; <span class="comment">// doGet() | doPost</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;返回 String 类型的文本数据.....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/02a1cecea7ec4aeca66c137c01bf20f0.png" alt="解决乱码"></p></li></ul><h4 id="URL-PATTERN"><a href="#URL-PATTERN" class="headerlink" title="URL-PATTERN"></a>URL-PATTERN</h4><ul><li><p>通配符配置</p></li><li><p>配置为<code>/</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 Tomcat 的conf/web.xml 中有一个以 / 开头的servlet配置, --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The mapping for the default servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The mappings for the JSP servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>如果在项目中使用了<code>/</code> 它会替代 <code>tomcat</code> 中的 <code>default</code>,导致所有的静态资源都给<code>DispatcherServlet</code>处理,默认情况下DispatcherServlet没有处理静态资源的能力,没有控制器对象能处理静态资源的访问,所以静态资源(<code>html、js、img、css</code>)都是<code>404</code></p><p>有控制器对象的动态资源不会受到限制</p></div><ul><li><p>配置<code>/</code>访问静态资源的处理方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    声明了 &lt;mvc:default-servlet-handler/&gt; 后,springmvc 框架会在容器中创建 DefaultServletHttpRequestHandler 处理器对象。他会像一个</span></span><br><span class="line"><span class="comment">    检察员,对进入 DispatcherServlet的 URL 进行筛查,如果发现是静态资源的请求,就将该请求转由 web 应用服务器默认的 Servlet 处理,一般的服务器都有默认的 Servlet</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第二种(<code>常用</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    第二种处理静态资源的方式:</span></span><br><span class="line"><span class="comment">       &lt;mvc:resources mapping=&quot;&quot; location=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">       mvc:resources 加入后框架会创建 ResourcehttpRequestHandler 这个处理器对象</span></span><br><span class="line"><span class="comment">       让这个对象处理静态资源的访问,不依赖 tomcat 服务器</span></span><br><span class="line"><span class="comment">       mapping: 访问静态资源的 uri 地址，使用通配符 **</span></span><br><span class="line"><span class="comment">       location: 静态资源在你的项目中的目录位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/html/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解决配置多次 mvc:resources 问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/public/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/static/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/18018082f6d042d6a8abc99731b7be8d.png" alt=""></p></li></ul><h4 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h4><ul><li><p>在<code>jsp、html</code>中使用的地址,都是在前端页面中的地址,都是相对地址</p></li><li><p>地址分类</p><ul><li><p>绝对地址</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>带有协议名称的是绝对地址,如<code>http://www.baidu.com</code></p></div></li><li><p>相对地址</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>没有协议开头的,例如<code>user/some.do</code>，相对地址不能独立使用,必须有一个参考地址,通过参考地址+相对地址本身才能指定资源</p></div></li></ul></li><li><p>使用<code>El</code>表达式解决路径问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.request.contextPath&#125;/xxx/xx</span><br></pre></td></tr></table></figure></li></ul><h4 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h4><ul><li><p>创建一个全新的<code>maven</code>关于<code>webapp</code>项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-tx.version</span>&gt;</span>5.3.31<span class="tag">&lt;/<span class="name">spring-tx.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-jdbc.version</span>&gt;</span>5.3.31<span class="tag">&lt;/<span class="name">spring-jdbc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.14<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-aspects.version</span>&gt;</span>5.3.31<span class="tag">&lt;/<span class="name">spring-aspects.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-webmvc.version</span>&gt;</span>5.3.31<span class="tag">&lt;/<span class="name">spring-webmvc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson-core.version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">jackson-core.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson-databind.version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">jackson-databind.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-tx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-jdbc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-mybatis --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-aspects.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简化实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springmvc依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-webmvc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加入处理 json 的工具库的依赖,springmvc 默认使用的 jackson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-databind.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建本次使用的数据库、表</p><ul><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `spring_tx`;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `amount` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1003</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;商品表&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `spring_tx`.`goods` (`id`, `name`, `amount`, `price`) <span class="keyword">VALUES</span> (<span class="number">1001</span>, <span class="string">&#x27;笔记本&#x27;</span>, <span class="number">95</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `spring_tx`.`goods` (`id`, `name`, `amount`, `price`) <span class="keyword">VALUES</span> (<span class="number">1002</span>, <span class="string">&#x27;手机&#x27;</span>, <span class="number">100</span>, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建属性配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_tx?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure></li><li><p>先搭建<code>SpringMVC</code>的环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问 /WEB-INF/目录下的资源 =&gt; 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀: 视图文件的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/admin/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀: 视图文件的扩展名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    实现的功能是完成 Java对象到json,xml,text,二进制等数据格式的转换</span></span><br><span class="line"><span class="comment">    HttpMessageConvert接口: 消息转换器</span></span><br><span class="line"><span class="comment">    功能: 定义 java 转为 json,xml 等数据格式的方法,这个接口有很多实现类,这些实现类完成了 java 对象到 json,java对象到二进制数据的转换</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在搭建<code>spring</code>整合<code>Mybatis</code>的环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载外部属性配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessionFactoryBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:spring-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mapperScannerConfigurer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描 Mapper Bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sessionFactoryBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Service 的 Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;goodsService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.impl.GoodsServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;goodsMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;goodsMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>web.xml</code>替换为<code>4</code>的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册声明过滤器,解决 post 请求乱码的问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        设置项目中的字符编码</span></span><br><span class="line"><span class="comment">            private String encoding;</span></span><br><span class="line"><span class="comment">        private boolean forceRequestEncoding = false;</span></span><br><span class="line"><span class="comment">        private boolean forceResponseEncoding = false;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 强制请求对象(HttpServletRequest) 使用 encoding 编码的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 强制应答对象(HttpServletResponse) 使用 encoding 编码的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义服务层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.GoodsMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Goods&gt; selectAll();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;goods&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from goods</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Goods&gt; goods = goodsService.showAll();</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/direct/d25ecec05b8247a1801c74c728b4139e.png" alt=""></p></li></ul><h4 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h4><ul><li><p>请求转发</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>处理器方法返回<code>ModelAndView</code>时,需<code>在 setViewName() 指定的视图前添加 forward:,且此时的视图不再与视图解析器一同工作,这样可以在配置了解析器时指定不同位置的视图</code>,视图页面必须写出相对于项目根的路径,<code>forward</code>操作不需要视图解析器</p><p>处理器方法返回<code>String</code>,在视图路径前面加入<code>forward:视图完整路径</code></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">nameException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mv.setViewName(<span class="string">&quot;forward:/nameError.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特点<ul><li>发送一次请求,客户端地址不变,携带<code>request</code>范围里的参数,服务端跳转</li><li>转发时,请求时原样传递,响应会被清空</li></ul></li></ul></li><li><p>重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">ageException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mv.setViewName(<span class="string">&quot;redirect:/ageError.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>特点</p><ul><li><p>发送两次请求,客户端地址会改变</p></li><li><p>不能携带<code>request</code>范围里的参数,客户端跳转</p></li><li><p>重定向时,会创建一个新的请求和响应</p><p><img src="https://img-blog.csdnimg.cn/direct/65b6d6445b0445f0ae88015c5a4ff30a.png" alt=""></p></li></ul></li></ul></li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li><p>自定义异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>创建异常类子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameException</span> <span class="keyword">extends</span> <span class="title class_">MyUserException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">MyUserException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>全局异常类处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span>: 控制器增强(也就是说给控制器类增加功能 - 异常处理功能)</span></span><br><span class="line"><span class="comment"> * 位置: 在类的上面</span></span><br><span class="line"><span class="comment"> * 特点: 必须让框架知道这个注解所在的包名,需要在 springmvc 配置文件声明组件扫描器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常的方法和控制器方法的定义一样,可以有多个参数,可以有 ModelAndView 、String、void、对象类型的返回值</span></span><br><span class="line"><span class="comment">     * 形参: Exception 表示 controller 中跑出来的异常对象,通过形参可以获取发生的异常信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ExceptionHandler</span>(value = NameException.class): 表示异常的类型,当发生此类异常时,由当前方法执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = NameException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">nameException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;forward:/nameError.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = AgeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">ageException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;redirect:/ageError.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>控制器测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.controller.ExceptionController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.AgeException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.MyUserException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.NameException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/login.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">login</span><span class="params">(String username, Integer age)</span> <span class="keyword">throws</span> MyUserException &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="keyword">if</span> (!username.equals(<span class="string">&quot;coder-itl&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameException</span>(<span class="string">&quot;只能为 &#x27;coder-itl&#x27; 的用户访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (age == <span class="literal">null</span> || age &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄不能大于 80 !!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mv.addObject(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        mv.addObject(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;forward:/WEB-INF/admin/show.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0f62584682ee43a3918146a009d50a43.png" alt=""></p></li></ul><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><ul><li><p>概念</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><ol><li>拦截器是 <code>springmvc</code>中的一种,需要实现<code>HandlerInterceptor</code>接口</li><li>拦截器和过滤器类似,功能方向侧重点不同,过滤器是用来过滤请求参数,设置编码字符集等工作,拦截器是拦截用户请求,做请求判断处理的</li><li>拦截器是全局的,可以对多个<code>Controller</code>做拦截,一个项目中可以有<code>0</code>个或者多个,他们在一起拦截用户的请求</li></ol></div><blockquote><p>拦截器常用在: 用户登录处理,权限检查,记录日志</p></blockquote></li><li><p>拦截器的执行时间</p><ul><li>在请求处理之前,也就是<code>controller</code>类中的方法执行之前先被拦截</li><li>在控制器方法执行之后也会执行拦截器</li><li>在请求处理完成后也会执行拦截器</li></ul></li><li><p>拦截器创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * preHandle 叫做预处理方法</span></span><br><span class="line"><span class="comment">     * Object handler: 被拦截的控制器对象</span></span><br><span class="line"><span class="comment">     * 返回值 boolean:</span></span><br><span class="line"><span class="comment">     * true</span></span><br><span class="line"><span class="comment">     * false</span></span><br><span class="line"><span class="comment">     * 特点:</span></span><br><span class="line"><span class="comment">     * 1. 方法在控制器方法之前执行的,用户请求首先到达此处</span></span><br><span class="line"><span class="comment">     * 2. 在这个方法中可以获取请求的信息,验证请求是否符合要求</span></span><br><span class="line"><span class="comment">     * 可以验证用户是否登录,验证用户是否有权限访问某个连接地址(url)</span></span><br><span class="line"><span class="comment">     * 如果验证失败,可以拦截请求,请求不能被处理</span></span><br><span class="line"><span class="comment">     * 如果验证成功,可以放行请求,此时控制器方法才能执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * postHandle: 后处理方法</span></span><br><span class="line"><span class="comment">     * 参数：</span></span><br><span class="line"><span class="comment">     * Object handler 被拦截的处理器对象 controller</span></span><br><span class="line"><span class="comment">     * ModelAndView modelAndView 处理器方法的返回值</span></span><br><span class="line"><span class="comment">     * 特点:</span></span><br><span class="line"><span class="comment">     * 1. 在处理器方法之后执行的</span></span><br><span class="line"><span class="comment">     * 2. 能够获取处理器方法的返回值 ModelAndView,可以修改 ModelAndView 中的数据和视图,可以影响到最后的执行结果</span></span><br><span class="line"><span class="comment">     * 3. 主要是对原来的执行结果做二次修正</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * afterCompletion: 最后执行的方法</span></span><br><span class="line"><span class="comment">     * 参数:</span></span><br><span class="line"><span class="comment">     * Object handler: 被拦截器的拦截的处理对象</span></span><br><span class="line"><span class="comment">     * Exception ex 程序中发生的异常</span></span><br><span class="line"><span class="comment">     * 特点:</span></span><br><span class="line"><span class="comment">     * 1. 在请求处理完成后执行的,框架中规定是当你的视图处理完成后,对视图执行了 forward，就认为请求处理完成</span></span><br><span class="line"><span class="comment">     * 2. 一般做资源回收工作的,程序请求过程中创建了一些对象,在这里可以删除,把占用的内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明拦截器: 拦截器可以有0个或者多个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明第一个拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            指定拦截器的请求 uri 地址</span></span><br><span class="line"><span class="comment">            path: 就是 uri 地址,可以使用通配符 **</span></span><br><span class="line"><span class="comment">            **: 表示任意的字符,文件或者多级目录和目录中的文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明拦截器对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>拦截器的执行顺序分析</p><p><img src="https://img-blog.csdnimg.cn/direct/1da43e4003a04c9c9a4a07854a07662c.png" alt=""></p></li><li><p>拦截器链</p></li><li><p>拦截器和过滤器的区别</p><ul><li>过滤器是<code>servlet</code>中的对象,拦截器是框架中的对象</li><li>过滤器实现<code>Filter</code>接口中的对象,拦截器是实现<code>HandlerInterceptor</code></li><li>过滤器是用来设置request,response的参数,属性的,侧重对数据过滤的,拦截器是用来验证请求的,<code>能截断请求</code></li><li>过滤器是在拦截器之前执行的</li><li>过滤器是<code>tomcat</code>服务器创建的对象,拦截器是<code>springmvc</code>容器中创建的对象</li><li>过滤器是一个执行时间点,拦截器有三个执行时间点</li><li>过滤器可以处理<code>jsp,js,html</code>等,拦截器是侧重拦截对<code>controller</code>的对象,如果你的请求不能被<code>DispatcherServlet</code>接收,这个请求不会执行拦截器内容</li></ul></li></ul><h4 id="SpringMVC-执行流程"><a href="#SpringMVC-执行流程" class="headerlink" title="SpringMVC-执行流程"></a>SpringMVC-执行流程</h4><ul><li><p>执行流程图</p><p><img src="https://img-blog.csdnimg.cn/direct/bb611b2832df428dbbfabbcf1c31446a.png" alt=""></p></li><li><p>描述</p><ol><li><p>用户发起请求<code>login.do</code></p></li><li><p><code>DispatcherServlet</code>接受请求<code>login.do</code>,把请求转交给处理器映射器</p><blockquote><p>处理器映射器: <code>springmvc</code> 框架中的一种对象,框架把实现了<code>HandlerMapping</code>接口的类叫做映射器</p><p>处理器映射器的作用: 根据请求,从<code>springmvc</code>容器对象中获取处理器对象</p></blockquote></li><li><p><code>DispatcherServlet</code>把<code>2</code>中的<code>HandlerExecutionChain</code>中的处理器对象交给了处理器适配器对象</p><blockquote><p>处理器适配器: <code>springmvc</code>框架中的对象,需要实现 <code>HandlerAdapter</code> 接口</p><p>处理器适配器的作用: 执行·处理器方法(<code>调用 Controller.doLogin(),得到返回值 ModelAndView</code>)</p></blockquote></li><li><p><code>DispatcherServlet</code>把<code>3</code>中获取的<code>ModelAndView</code>交给了视图解析器对象</p><blockquote><p>视图解析器: <code>springmvc</code> 中的对象,需要实现 <code>ViewResoler</code> 接口</p><p>视图解析器的作用: 组成视图完整路径,使用前缀,后缀,并创建view对象</p><p><code>View</code> 是一个接口,表示视图的,在框架中<code>jsp，html</code>不是<code>string</code>表示,而是使用<code>View</code>和他的实现类表示视图</p><p><code>InternalResourceView</code>: 视图类,表示<code>jsp</code>文件,视图解析器会创建<code>InternalResourceView</code>类对象，这个对象的里面,有一个属性 url=<code>/WEB-INF/view/show.jsp</code></p></blockquote></li><li><p><code>DispatcherServlet</code>把<code>4</code>步骤中创建的 <code>View</code>对象获取到,调用<code>View</code> 类自己的方法,把 <code>Model</code> 数据放入到<code>request</code>作用域</p></li></ol></li></ul><h4 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h4><ul><li><p>概念</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>Restful(Representational State Transfer)</code>是一种软件架构风格,用于设计网络应用程序和服务之间的通信.它是一种基于标准<code>HTTP</code>方法的简单和轻量级的通信协议,广泛用于现代的<code>web</code>开发</p><p>通过遵循<code>Restful</code>架构的设计原则,可以构建出易于理解、可扩展、松耦合和可重用的<code>Web</code>服务,<code>Restful Api</code>的特点是简单，清晰，并且易于使用和理解,它们使用的标准的<code>HTTP</code>方法和状态码进行通信,不需要额外的协议和中间件</p></div></li><li><p><code>Restful</code>风格特点</p><ul><li><p>每个<code>URI</code>代表<code>1</code>种资源(<code>URI</code>是名词)</p></li><li><p>客户端使用<code>GET、POST、PUT、DELETE</code>4个表示操作方式的动词对服务端资源进行操作</p><ul><li><p><code>GET</code>用来获取资源</p></li><li><p><code>POST</code>用来新建资源(<code>也可用于更新资源</code>)</p></li><li><p><code>PUT</code>用来更新资源</p></li><li><p><code>DELETE</code>用来删除资源</p></li></ul></li><li><p>资源的表现形式是<code>XML</code>或者<code>JSON</code></p></li><li><p>客户端与服务端之间的交互在请求之间是无状态的,从客户端到服务端的每个请求都必须包哈你姐请求所必须的信息</p></li></ul></li><li><p><code>Restful</code>风格设计规范</p><ul><li><p><code>HTTP</code>协议请求方式要求</p><blockquote><p><code>Restful</code>风格主张在项目设计，开发过程中,具体的操作符合<code>HTTP</code>协议定义的请求方式的语义</p></blockquote></li></ul></li><li><p><code>URL</code>风格要求</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>REST</code>风格下每个资源都应该有一个唯一的标识符,例如一个<code>URI(同意资源标识符)</code>或者一个<code>URL(统一资源定位符)</code>。资源的标识符应该能明确的说明该资源的信息,同时也应该是可以被理解和解释的</p></div><p><img src="https://img-blog.csdnimg.cn/direct/260aa908c2af482f8cc44e937751baab.png" alt=""></p></li><li><p><code>@GetMapping</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value: 请求地址</span></span><br><span class="line"><span class="comment"> * params: 用来设置哪些参数必穿,如果没有提供,则会抛出 400 错误</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/login.do&quot;, params = &#123;&quot;a&quot;, &quot;b&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Goods&gt; goods = goodsService.showAll();</span><br><span class="line">    <span class="keyword">return</span> goods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需求分析</p><ul><li><p>数据结构:<code>UserInfo&#123;id:唯一标识,name:用户名,age:用户年龄&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">// 唯一标识</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">// 用户年龄</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>功能分析</p><ul><li>用户数据分页展示功能(<code>条件:page 页数,默认 1，size每页数量,默认 10</code>)</li><li>保存用户功能</li><li>根据用户<code>id</code>查询用户详情功能</li><li>根据用户<code>id</code>更新用户功能</li><li>根据用户<code>id</code>删除用户数据功能</li><li>多条件模糊查询用户功能(<code>条件: keyword 模糊关键字,page 页数,默认1,size每页数量,默认 10</code>)</li></ul></li><li><p>接口设计</p><p><img src="https://img-blog.csdnimg.cn/direct/5e4dde43e0064ba8b548f9355f2c6927.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.restful;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoController</span> &#123;</span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(required = false, defaultValue = &quot;1&quot;)</span> Integer page, <span class="meta">@RequestParam(required = false, defaultValue = &quot;10&quot;)</span> Integer size)</span> &#123;</span><br><span class="line">        System.out.println(page + <span class="string">&quot; &quot;</span> + size);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户添加</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">        System.out.println(userInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户详情</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户更新</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户删除</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件模糊</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">search</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyword,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false, defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false, defaultValue = &quot;10&quot;)</span> Integer size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li><p>接收数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/hobby.do?hobby=游泳&amp;hobby=测试</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hobby.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String[] getFormDataByArray(<span class="meta">@RequestParam(&quot;hobby&quot;)</span> String[] hobby) &#123;</span><br><span class="line">    <span class="keyword">return</span> hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/cb34fbad9012423e8a1dd306a2c5eb22.png" alt=""></p></li></ul><h5 id="对象-接收表单参数"><a href="#对象-接收表单参数" class="headerlink" title="对象-接收表单参数"></a>对象-接收表单参数</h5><ul><li><p>接收对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/user.do?username=coder-itl&amp;age=18</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getFormDataByEntity</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    user.setUsername(user.getUsername());</span><br><span class="line">    user.setAge(user.getAge());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3ff4e791378b4be4bd47490af0d5aaf9.png" alt=""></p></li></ul><h5 id="Map-接收表单参数"><a href="#Map-接收表单参数" class="headerlink" title="Map-接收表单参数"></a>Map-接收表单参数</h5><ul><li><p><code>map</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/map.do?map=1999-10-12&amp;username=coder-itl</span></span><br><span class="line"><span class="comment">// @RequestParam,map 必须使用 @RequestParam 注解，@RequestParam不能起名字</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/map.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getFormDataByMap</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Date-格式的表单参数"><a href="#Date-格式的表单参数" class="headerlink" title="Date-格式的表单参数"></a>Date-格式的表单参数</h5><ul><li><p><code>Date</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/date.do?date=1999-10-12 默认的日期格式为: yyyy/MM/dd</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/date.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFormDataByDate</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date date)</span> &#123;</span><br><span class="line">    <span class="comment">// long date</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">formatTim</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">    <span class="keyword">return</span> formatTim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e2753832ee29471c8aa21efb7493acf5.png" alt=""></p></li></ul><h5 id="JSON-格式传参"><a href="#JSON-格式传参" class="headerlink" title="JSON-格式传参"></a>JSON-格式传参</h5><ul><li><p><code>json</code>格式传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/json.do</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/json.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">JsonData</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2914110f092a440682f8e7b336892802.png" alt=""></p></li><li><p>多值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/listJson.do</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/listJson.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">ListJsonData</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3cdb32ca45d84e21a8049566337d9078.png" alt=""></p></li><li><p><code>json</code>传递新版日期</p><ul><li><p><code>entity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/localDate.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getFormDataByLocalDate</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/48c888cbaa424c71bfa5f83b63a2fcbf.png" alt=""></p></li></ul></li></ul><h4 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h4><ul><li><p><code>XML</code>配置</p><ul><li><p>需求: <code>admin:root</code>拆分</p><ul><li><p>实现<code>Convert</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConvert</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        String[] split = source.split(<span class="string">&quot;:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (split.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .username(split[<span class="number">0</span>])</span><br><span class="line">                .age(Integer.valueOf(split[<span class="number">1</span>]))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置<code>XML</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc.xml --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.convert.StringToUserConvert&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost:8080/userConvert.do?user=admin:18</code></p></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/61cf20fd98dd417b812dfafccc98a4d2.png" alt=""></p></li><li><p>时间转换器实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToLocalDate</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, LocalDate&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalDate <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="comment">// 将传递的日期使用 df 解析</span></span><br><span class="line">        <span class="keyword">return</span> LocalDate.parse(source, df);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="全局跨域配置"><a href="#全局跨域配置" class="headerlink" title="全局跨域配置"></a>全局跨域配置</h4><ul><li><p>全局配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 对那些请求要设置跨域</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>) <span class="comment">// 设置跨域的源的模式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>) <span class="comment">// 设置允许跨域的请求方式</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>) <span class="comment">// 是否允许携带 Cookie</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>).maxAge(TimeUnit.SECONDS.toMillis(<span class="number">30</span>)); <span class="comment">// (二次请求会缓存)缓存 30s</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h4><ul><li><p>校验概述</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>JSR 303</code>是<code>java</code>为<code>Bean</code>数据合法性校验提供的标准框架,他已经包含在<code>JavaEE6.0</code>标准中,<code>JSR 303</code>通过在<code>Bean</code>属性上标注类似于<code>@NotNull,@Max</code>等标准的注解指定校验规则,并通过标准的验证接口对<code>Bean</code>校验</p></div><blockquote><p>以下注解可以放在实体类的字段上,或者控制器的参数上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/f12bcd03535440719fa3ffab88723cc4.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/direct/8694c16f2fc04dabb9b29667ddd2171c.png" alt=""></p></li></ul><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="NotNull-NotEmpty-NotBlank"><a href="#NotNull-NotEmpty-NotBlank" class="headerlink" title="@NotNull @NotEmpty @NotBlank"></a>@NotNull @NotEmpty @NotBlank</h4><ul><li><p><code>@NotNull</code>包装类型不为<code>null</code></p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>@NotNull</code>注解是<code>JSR 303</code>规范中定义的注解,当被标注的字段值为<code>null</code>时,会认为校验失败而抛出异常。该注解不能用于字符串类型的校验,若要对字符串进行校验,应该使用<code>@NotBlank 或 @NotEmpty</code>注解</p></div></li><li><p><code>@NotEmpty</code>集合类型长度大于<code>0</code></p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>@NotEmpty</code>注解同样是<code>JSR 303</code>规范中定义的注解,对于<code>CharSequesce、Collecton、Map</code>或者数组对象类型的属性进行校验,校验时会检查该属性是否为<code>Null或者size()==0</code>，如果是的话就会校验失败。但是对于其他类型的属性,该注解无效。需要注意的是只校验空格前后的字符串,如果该字符串中间只有空格,不会被认为是空字符串,校验不会失败</p></div></li><li><p><code>@NotBlank</code>字符串,不为<code>null,且不为&quot; &quot;字符串</code></p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>@NotBlank</code>注解是<code>Hibernate Validator</code>附加的注解,对于字符串类型的属性进行校验,校验时会检查该属性是否为<code>Null 或者 “”</code>，或者只包含空格,如果是的话就会校验失败,需要注意的是,<code>@NotBlank</code>注解只能用于字符串类型的校验</p></div></li><li><p>使用步骤</p><ol><li><p>实体类添加校验注解</p></li><li><p><code>Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Validated 实体</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> UserInfo <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">    System.out.println(userInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表单说明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">method: 必须为 post,因为 get 请求方式,是在地址栏上携带请求参数,而地址栏的参数长度受到浏览器限制的</span></span><br><span class="line"><span class="comment">enctype=&quot;multipart/form-data&quot; 加上这个配置,浏览器就会把文件的二进制数据上传给服务器,也就是,已经完成文件上传了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置<code>Bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean 的id不可以放生更改 --&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制器访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadAndDownload</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;photo&quot;)</span> MultipartFile photo, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;upload..........&quot;</span>);</span><br><span class="line">        <span class="comment">// 文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> getNewFileName(photo);</span><br><span class="line">        <span class="comment">// 文件路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> getUploadDir(request);</span><br><span class="line">        <span class="comment">// 文件存储</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> saveToDisk(photo, newFileName, uploadDir);</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">saveToDisk</span><span class="params">(MultipartFile photo, String newFileName, File uploadDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir + <span class="string">&quot;\\&quot;</span> + newFileName);</span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">        <span class="keyword">return</span> file.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File <span class="title function_">getUploadDir</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath + <span class="string">&quot;\\images&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文新的件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> photo 上传的文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getNewFileName</span><span class="params">(MultipartFile photo)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">        log.info(<span class="string">&quot;文件的原始名称: &#123;&#125;&quot;</span>, originalFilename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 截取后缀名</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastDotIndex</span> <span class="operator">=</span> originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> originalFilename.substring(lastDotIndex);</span><br><span class="line">        <span class="comment">// xxx.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> newName + ext;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">// 工具类获取文件后缀,没有“点”</span></span><br><span class="line">        <span class="comment">// String extension = FilenameUtils.getExtension(originalFilename);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/direct/04b241b2f98f4f3ab60a103d39d5f1a4.png" alt=""></p></li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li><p>定义控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件下载</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据下载相对目录获取下载目录在服务器部署之后绝对目录</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/images/&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过文件输入流读取文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath, fileName));</span><br><span class="line">    <span class="comment">// 获取响应输出流</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="comment">// 附件下载 默认 inline 在线打开</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理下载流复制</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统下载</span></span><br><span class="line"><span class="comment">// 处理下载流复制</span></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">outputStream.close();</span><br><span class="line">inputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工具类(commons-fileupload中的工具类)替换 import org.apache.commons.io.IOUtils;</span></span><br><span class="line">IOUtils.closeQuietly(inputStream);</span><br><span class="line">IOUtils.closeQuietly(outputStream);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="整合日志"><a href="#整合日志" class="headerlink" title="整合日志"></a>整合日志</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j-log4j.version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">slf4j-log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Slf4j的核心包，只有日志的接口，并没有实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j-log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j-log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j日志的具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 桥接器，将JCL的日志输出重定向到Slf4j中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j-log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j整合log4j结束 --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># +======================================================================+#</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">$&#123;log4j.log.level&#125;,$&#123;log4j.log.target&#125;</span></span><br><span class="line"><span class="attr">log4j.addivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># +======================================================================+#</span></span><br><span class="line"><span class="comment"># | [target] - Console - 控制台输出</span></span><br><span class="line"><span class="comment"># +----------------------------------------------------------------------+#</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.Threshold</span>=<span class="string">$&#123;log4j.log.level&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.Encoding</span>=<span class="string">$&#123;log4j.log.encoding&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=<span class="string">$&#123;log4j.log.layout&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">$&#123;log4j.log.layout.pattern&#125;</span></span><br><span class="line"><span class="comment"># +======================================================================+#</span></span><br><span class="line"><span class="comment"># | [target] - FILE - 文件输出</span></span><br><span class="line"><span class="comment"># +----------------------------------------------------------------------+#</span></span><br><span class="line"><span class="attr">log4j.appender.FILE</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.Threshold</span>=<span class="string">$&#123;log4j.log.level&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.Encoding</span>=<span class="string">$&#123;log4j.log.encoding&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.File</span>=<span class="string">$&#123;log4j.log.dir&#125;/runtime.log</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.MaxFileSize</span>=<span class="string">2048KB</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.MaxBackupIndex</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.layout</span>=<span class="string">$&#123;log4j.log.layout&#125;</span></span><br><span class="line"><span class="attr">log4j.appender.FILE.layout.ConversionPattern</span>=<span class="string">$&#123;log4j.log.layout.pattern&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># +======================================================================+#</span></span><br><span class="line"><span class="comment"># | log4j config - 日志级别配置</span></span><br><span class="line"><span class="comment"># +----------------------------------------------------------------------+#</span></span><br><span class="line"><span class="attr">log4j.log.dir</span>=<span class="string">logs/</span></span><br><span class="line"><span class="comment">#log4j.log.level=ALL,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF</span></span><br><span class="line"><span class="attr">log4j.log.level</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment">#log4j.log.target=CONSOLE,FILE,DATABASE,EMAIL,SOCKET</span></span><br><span class="line"><span class="attr">log4j.log.target</span>=<span class="string">CONSOLE,FILE</span></span><br><span class="line"><span class="attr">log4j.log.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">log4j.log.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.log.layout.pattern</span>=<span class="string">[%d %r] [%-5p] [%t] [%l] [%m]%n</span></span><br><span class="line"><span class="comment"># +======================================================================+#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h4><ul><li><p>日期的处理</p><ul><li><p>日期的提交处理(前端发送请求到<code>controller接收的过程</code>)</p><ul><li><p>单个日期处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要使用 @DateTimeFormat,此注解必须搭配 springmvc.xml 文件中的 &lt;mvc:annotationdriver&gt; 标签</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/myDate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myDate</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date myDate)</span> &#123;</span><br><span class="line">    <span class="comment">//  @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) Date myDate 将网页上的字符串日期转换为 Date 类型</span></span><br><span class="line">    <span class="comment">//  System.out.println(myDate); =&gt; 等价于视图显示,获得的数据类型是 Date,要想友好的显示,就需要格式化 SimpleDateFormat</span></span><br><span class="line">    System.out.println(myDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类中全局日期处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dateInitBinder</span><span class="params">(WebDataBinder dataBinder)</span> &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    dataBinder.registerCustomEditor(Date.class,<span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(simpleDateFormat, <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>日期显示处理(<code>将日期按照指定格式显示到网页中或者存储</code>)</p><ul><li><p>日期字段在实体类中时,可以添加注解在日期字段上或者<code>set</code>方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.pojo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> String photo;</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// json 中的日期显示,需要在类中的成员变量的 getXXX 方法上加注解 @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>网页中获取到的日期类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/myDate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">myDate</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date myDate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myDate.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @DateTimeFormat 此注解的作用是将网页中字符串的日期按照此格式格式化为日期类型注入到 myDate =&gt; Date</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/661ac88cada24945a40108184eb3bede.png" alt="获取到的是日期类型"></p><ul><li><p>要存储或者显示的日期应该满足特定条件格式(<code>Eg: yyyy-MM-dd [HH:mm:ss]</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储或回显时需要将 “Thu Sep 09 00:00:00 CST 1999”格式的日期再次进行处理</span></span><br></pre></td></tr></table></figure><ul><li><p><code>@DateTimeFormat</code> 该注解自动会解析处理,会把<code>字符串类型</code> 按照格式<code>yyyy-MM-dd HH:mm:ss</code>转换成<code>时间类型</code></p></li><li><p><code>@JsonFormat</code>这个注解是从<code>数据库查询</code>出来，<code>返回到页面的的转换</code>,把时间类型转换成<code>JSON</code>格式类型前提取出进行展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json 中的日期显示,需要在类中的成员变量的 getXXX 方法上加注解 @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.pojo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> <span class="comment">// 网页中展示和数据库存储时的数据类型</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> <span class="comment">// 将前端从网页上提交的日期字符串按照此格式接受并注入到 Date 类型</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> String photo;</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个日期注解不支持 LocalDateTime</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/1aa913e29a80477da2efa2bf8006b135.png" alt="LocalDateTime-不支持此操作,在SSM中"></p></li></ul></li></ul></li></ul></li><li><p>时间范围查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Emp&gt; <span class="title function_">findByCondition</span><span class="params">(EmpVO empVO)</span>;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;findByCondition&quot;</span> resultMap=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span><br><span class="line">    SELECT emp_id,</span><br><span class="line">    emp_name,</span><br><span class="line">    emp_photo,</span><br><span class="line">    emp.dept_id,</span><br><span class="line">    dept_name,</span><br><span class="line">    emp.create_time,</span><br><span class="line">    emp.update_time,</span><br><span class="line">    emp.deleted</span><br><span class="line">    FROM emp</span><br><span class="line">    LEFT JOIN dept d ON emp.dept_id = d.dept_id</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           OR emp_name LIKE <span class="title function_">CONCAT</span><span class="params">(<span class="string">&#x27;%&#x27;</span>, #&#123;empName&#125;, <span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;createTime != null&quot;</span>&gt;</span><br><span class="line">            AND emp.create_time &amp;gt;= #&#123;createTime&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span><br><span class="line">            AND emp.update_time &amp;lt;= #&#123;updateTime&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/87772148ed8644ff898e4c5b9602241c.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  unlink-panels 接触左右关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;dateRange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">unlink-panels</span></span></span><br><span class="line"><span class="tag">    <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">dateRange</span>: [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">searchHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 组织参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8081/api/emp/find&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">empName</span>: <span class="variable language_">this</span>.<span class="property">keyword</span>.<span class="title function_">trim</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">createTime</span>: <span class="variable language_">this</span>.<span class="title function_">fmtTime</span>(<span class="variable language_">this</span>.<span class="property">dateRange</span>[<span class="number">0</span>]),</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">updateTime</span>: <span class="variable language_">this</span>.<span class="title function_">fmtTime</span>(<span class="variable language_">this</span>.<span class="property">dateRange</span>[<span class="number">1</span>])</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fmtTime</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title function_">moment</span>(val).<span class="title function_">format</span>(<span class="string">&quot;yyyy-MM-DD HH:mm:ss&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/find&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;根据条件查询员工信息&quot;, tags = &quot;根据条件查询员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Emp&gt; <span class="title function_">findByCondition</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="meta">@RequestBody</span>  EmpVO empVO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;成功获取所有员工信息!&quot;</span>, empService.findByCondition(empVO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="表单的提交方式源码解读"><a href="#表单的提交方式源码解读" class="headerlink" title="表单的提交方式源码解读"></a>表单的提交方式源码解读</h4><ul><li><p><code>HiddenHttpMethodFilter</code></p><ul><li><p><code>doFilterInternal</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PUT DELETE PATCH(可以修改为这三种提交方式)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =</span><br><span class="line">Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),</span><br><span class="line">HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// name=&quot;_method&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_METHOD_PARAM</span> <span class="operator">=</span> <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">methodParam</span> <span class="operator">=</span> DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodParam</span><span class="params">(String methodParam)</span> &#123;</span><br><span class="line">    Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.methodParam = methodParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤器的 doFilter 方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 原生的 http 请求</span></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line"><span class="comment">// 获取到 POST 请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">                <span class="comment">// post =&gt; POST</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">                <span class="comment">// ALLOWED_METHODS: put | delete | patch</span></span><br><span class="line"><span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                    <span class="comment">// HttpMethodRequestWrapper 将原生的 HttpServletRequest 包装(如果传递的是 delete,那获取的就是 delete 请求方式)</span></span><br><span class="line">requestToUse = <span class="keyword">new</span> <span class="title class_">HttpMethodRequestWrapper</span>(request, method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 包装后的 request 请求 </span></span><br><span class="line">filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(request);</span><br><span class="line"><span class="built_in">this</span>.method = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.method;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更改表单的提交方式(delete / put / patch) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA-模板定义</title>
      <link href="/2023/12/11/b3b54fe/"/>
      <url>/2023/12/11/b3b54fe/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="IDEA-模板定义"><a href="#IDEA-模板定义" class="headerlink" title="IDEA-模板定义"></a>IDEA-模板定义</h3><ul><li><p><code>mybatis</code>的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;$&#123;mapper_interface_location&#125;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>mybatis</code>核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- STDOUT_LOGGING  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>db.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>头注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> $&#123;DESCRIPTION&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> $&#123;PACKAGE_NAME&#125;.$&#123;NAME&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>快捷键模板</p><ul><li><p><code>live Template</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先创建组,在添加单一,最后为其绑定到 java 语言</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep($A$);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testj</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> $A$()&#123;</span><br><span class="line">    $B$</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thr</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;$A$&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>清空<code>console</code>快捷键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ctrl + alt + s =&gt; keyMap --&gt;clear all -&gt; Add keyboard Shutcut -&gt; alt+f;</span></span><br></pre></td></tr></table></figure></li><li><p><code>spring</code>-阶段所需的所有依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化实体类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @Resource依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aspectj依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-整合mybatis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8.0</title>
      <link href="/2023/12/11/f7476ba2/"/>
      <url>/2023/12/11/f7476ba2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="MySQL8-0"><a href="#MySQL8-0" class="headerlink" title="MySQL8.0"></a>MySQL8.0</h3><h4 id="数据库的相关概念"><a href="#数据库的相关概念" class="headerlink" title="数据库的相关概念"></a>数据库的相关概念</h4><ul><li><p>相关概念</p><p><img src="https://img-blog.csdnimg.cn/direct/bcf4e516322b414a8fb5c234fe8a67fe.png" alt=""></p></li></ul><h4 id="概述与SQL分类"><a href="#概述与SQL分类" class="headerlink" title="概述与SQL分类"></a>概述与SQL分类</h4><ul><li><code>DDL</code>: 数据定义语言,<code>create、alter、drop、rename、truncate</code></li><li><code>DML</code>: 数据操纵语言<code>insert、delete、update、select</code></li><li><code>DCL</code>: 数据控制语言<code>commit、rollback、savepoint、grant、revoke</code></li></ul><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><ul><li><p>实质</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>这种类型的数据库是<code>最古老</code>的数据库类型,关系型数据库模型是把复杂的数据结构归结为简单的<code>二元关系(即二维表格形式)</code></p><p><img src="https://img-blog.csdnimg.cn/direct/a7d1795159a848c796aebab96618d32c.png" alt=""></p></div></li><li><p>关系型数据库以<code>行(row)</code>和<code>列(column)</code>的形式存储数据,以便于用户理解。这一系列的行和列被称为<code>表(table)</code>，一组表组成一个数据库(<code>database</code>)</p></li><li>表与表之间的数据记录有关系(<code>relationship</code>)。现实世界中的各种实体以及实体之间的各种联系均用<code>关系模型</code>来表示,关系型数据库,就是建立在关系型基础上的数据库</li><li><code>SQL</code>就是关系型数据库的查询语言</li></ul><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><ul><li><p><code>noSQL</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>非关系型数据库,可看成传统关系行数据库的功能<code>阉割版本</code>,基于键值对存储数据,不需要经过<code>SQL</code>层的解析,<code>性能非常高</code>,同时,通过减少不常用的功能,进一步提高性能</p></div></li></ul><h4 id="表、记录、字段"><a href="#表、记录、字段" class="headerlink" title="表、记录、字段"></a>表、记录、字段</h4><ul><li><p><code>E-R(entity-relationship) 实体-联系</code>: 模型中有三个主要概念是<code>实体集、属性、联系集</code></p></li><li><p>一个实体集对应于数据库中的一个表,一个实体则对应于数据库表中的一行,也称为一条记录,一个属性对应于数据库表中的一列,也称为一个字段</p><p><img src="https://img-blog.csdnimg.cn/direct/617b880ed66b4b189d2c33b5d4103b91.png" alt=""></p></li></ul><h4 id="MySQL环境搭建"><a href="#MySQL环境搭建" class="headerlink" title="MySQL环境搭建"></a>MySQL环境搭建</h4><h5 id="MySQL-卸载"><a href="#MySQL-卸载" class="headerlink" title="MySQL-卸载"></a>MySQL-卸载</h5><ol><li>停止<code>MySQL</code>服务</li><li>软件的卸载</li><li>残余文件的清理</li><li>清理注册表</li><li>删除环境变量配置</li></ol><h5 id="MySQL四大版本"><a href="#MySQL四大版本" class="headerlink" title="MySQL四大版本"></a>MySQL四大版本</h5><ul><li>社区版本: 开源免费,自由下载,但不提供官方技术支持,适用于大多数普通用户</li><li>企业版本: 需付费,不能在线下载,可以试用<code>30</code>天,提供了更多的功能和更完备的支持m更适合于对数据库的功能和可靠性要求较高的企业级客户</li><li>集群版: 开源免费,用于架设集群服务器,可将几个<code>MySQL Server</code>封装成一个<code>Server</code>，需要在社区版或企业版的基础上使用</li><li>高级集群版: 需付费</li></ul><h4 id="数据库字符集配置"><a href="#数据库字符集配置" class="headerlink" title="数据库字符集配置"></a>数据库字符集配置</h4><ul><li><p>查看当前字符集信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%character%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> character_set_client     <span class="operator">|</span> gbk                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_connection <span class="operator">|</span> gbk                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_database   <span class="operator">|</span> utf8mb4                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_filesystem <span class="operator">|</span> <span class="type">binary</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_results    <span class="operator">|</span> gbk                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_server     <span class="operator">|</span> utf8mb4                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_system     <span class="operator">|</span> utf8mb3                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_sets_dir       <span class="operator">|</span> C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\share\charsets\ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------------------------------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>查看比较规则的字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%collation_%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                 <span class="operator">|</span> <span class="keyword">Value</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> collation_connection          <span class="operator">|</span> gbk_chinese_ci     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> collation_database            <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> collation_server              <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> default_collation_for_utf8mb4 <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>查找<code>MySQL</code>的配置文件位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;datadir&#x27;</span>; <span class="comment">-- 在Data的上一级</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> datadir       <span class="operator">|</span> C:\ProgramData\MySQL\MySQL Server <span class="number">8.0</span>\      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>在配置(<code>my.ini</code>)修改中修改</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQl 5.7</span></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8 <span class="comment"># 默认字符集</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br></pre></td></tr></table></figure></li></ul><h4 id="root密码忘记-重置操作"><a href="#root密码忘记-重置操作" class="headerlink" title="root密码忘记,重置操作"></a>root密码忘记,重置操作</h4><ul><li><p>通过任务管理器或者服务管理,关闭<code>mysqld(服务进程)</code></p></li><li><p>通过命令行+特殊参数开启<code>mysqld</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--defaults-file=&quot;配置文件&quot; --skip-grant-tanles</span></span><br></pre></td></tr></table></figure></li><li><p>此时,<code>mysqld</code>服务进程已经打开,并且不需要权限检查</p></li><li><p><code>mysql -u root</code>无密码登录服务器,另启动一个客户端进行</p></li><li><p>修改权限表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">udpate <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>通过任务管理器,关掉<code>mysqld</code>服务进程</p></li><li><p>再次通过任务管理器,打开<code>mysql</code>服务</p></li><li><p>即可用修改后的新密码登录</p></li></ul><h4 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h4><ul><li>功能上主要分为如下<code>3</code>大类<ul><li><code>DDL(Data Definition Languages、数据定义语言)</code>,这些语句定义了不同的数据库、表、视图、索引等数据库对象,还可以用来创建、删除、修改数据库和数据表的结构<ul><li>主要的语句关键字包括<code>crate、drop、alter</code></li></ul></li><li><code>DML(Data Manipilation Language、数据操纵语言)</code>,用于添加、删除、更新和查询数据库记录,并检查数据完整性<ul><li>主要的语句关键字包括<code>insert、delete、update、select</code>等</li></ul></li><li><code>DCL(Data Control Language、数据控制语言)</code>用于定义数据库、表、字段、用户的访问权限和安全级别<ul><li>主要关键字包括<code>grant、revoke、commit、rollback、savepoint</code></li></ul></li></ul></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li><code>&gt;</code></li><li><code>=</code></li><li><code>&lt;</code></li><li><p><code>&lt;&gt;  / !=</code></p></li><li><p><code>iS NULL \ ISNULL()</code></p></li><li><p>不是<code>null =&gt; IS NOT NULL</code></p></li><li><p><code>between and</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询条件<span class="number">1</span>和条件<span class="number">2</span>范围内的数据,包含边界</span><br></pre></td></tr></table></figure></li></ul><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><ul><li><p>内连接</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>合并具有同一列的两个以上的表的行,<code>结果集中不包括一个表与另一个表不匹配的行</code></p></div></li><li><p>外连接</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>两个表在连接过程中除了返回满足条件的行以外<code>还返回左(或者右)表中不满足条件的行,这种连接称为左(右)外连接</code>.没有匹配的行时,结果表中相应的列为<code>空(NULL)</code></p></div></li><li><p>左外连接</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>如果是左外连接,则连接条件中左边的表也称为<code>主表</code>,右边的表称为<code>从表</code></p></div></li><li><p>右外连接</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>如果是右外连接,则连接条件中右边的表也称为<code>主表</code>,左边的表称为<code>从表</code></p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="operator">=</span> <span class="keyword">left</span> <span class="keyword">out</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> <span class="operator">=</span> <span class="keyword">right</span> <span class="keyword">out</span> <span class="keyword">join</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul><li><p>获取日期、时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curdate(),<span class="built_in">current_date</span>(); <span class="comment">-- 返回当前日期,只包含年、月、日</span></span><br><span class="line">curtime(),<span class="built_in">current_time</span>() <span class="comment">-- 返回当前时间,只包含时、分、秒</span></span><br><span class="line">now(),sysdate(),current_timeseamp(),<span class="built_in">localtime</span>,<span class="built_in">localtimestamp</span>() <span class="comment">-- 返回当前系统系统日期和时间</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="日期的格式化与解析"><a href="#日期的格式化与解析" class="headerlink" title="日期的格式化与解析"></a>日期的格式化与解析</h4><ul><li><p>函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date_format(<span class="type">date</span>,fmt); <span class="comment">-- 按照字符串 fmt 格式化日期 date 值</span></span><br><span class="line">time_format(<span class="type">time</span>,fmt) <span class="comment">-- 按照字符串 fmt 格式化时间 time 值</span></span><br><span class="line">get_format(date_type,format_type) <span class="comment">-- 返回日期字符串的显示格式</span></span><br><span class="line">str_to_date(Str,fmt) <span class="comment">-- 按照字符串 fmt 对 str进行解析,解析为一个日期</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><ul><li><p><code>if</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="keyword">value</span>,va;ue1,value2) <span class="comment">-- 如果 value的值为 true，返回 value1,否则返回 value2</span></span><br><span class="line">ifnull(value1,value2) <span class="comment">-- 如果value不为null,返回 value1,否则返回value2</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span> <span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">case</span> expr <span class="keyword">where</span> 常量值<span class="number">1</span> <span class="keyword">then</span> 值<span class="number">1</span> <span class="keyword">when</span> 常量值 <span class="keyword">then</span> 值 </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="number">1</span><span class="operator">&gt;</span><span class="number">2</span>,<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;正确&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><ul><li><p>多行子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IN</span>  <span class="comment">-- 等于列表中的任意一个</span></span><br><span class="line"><span class="keyword">ANY</span> <span class="comment">-- 需要和单行比较操作符一起使用，和子查询返回的某一个值比较</span></span><br><span class="line"><span class="keyword">ALL</span> <span class="comment">-- 需要和单行比较操作符一起使用,和子查询返回的所有值比较</span></span><br><span class="line"><span class="keyword">SOME</span> <span class="comment">-- 实际上是 any 的别名,作用相同,一般常用 any</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h4><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><h5 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h5><h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><h5 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h5>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2023/12/11/7273cdc/"/>
      <url>/2023/12/11/7273cdc/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>进入<code>maven</code>官网</p><blockquote><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/aefaa11878124c7aa101778dfeed1eb5.png" alt="下载对应windows版本的Maven"></p></li><li><p>配置环境变量</p><ul><li><p><code>MAVEN_HOME</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">D</span>:<span class="string">/application/apache-maven-3.9.2</span></span><br></pre></td></tr></table></figure></li><li><p><code>Path</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">%MAVEN_HOME%\bin</span></span><br></pre></td></tr></table></figure></li><li><p>环境配置成功与否的检测</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mvn</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/9db848c1006c457581a2dab8e50c06dc.png" alt=""></p></li><li><p>中央仓库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">打开</span> <span class="string">MAVEN_HOME 下的: \conf\settings.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置两个节点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地仓库的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/application/apache-maven-3.9.2/conf/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- 配置mirror节点,添加如下配置到 mirrors节点内部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/480af030e1704eae9328aae3069e8ffc.png" alt="下载源修改"></p></li></ul></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><p>默认生命周期</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li><code>validate</code>: 验证项目的正确性,例如检查项目的版本是否正确</li><li><code>compile</code>: 编译项目的源代码</li><li><code>test</code>: 运行项目的单元测试</li><li><code>package</code>: 将编译后的代码打包成可以分发的格式,例如<code>jar / war</code></li><li><code>verify</code>: 对项目进行额外的检查以确保质量</li><li><code>install</code>: 将项目的构建结果安装到本地<code>maven</code>仓库中,以供其他项目使用</li><li><code>deploy</code>: 将项目的构建结果复制到远程仓库,以供其他开发人员或团队使用</li></ul></div></li><li><p><code>clean</code>生命周期</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>删除目标目录中的编译输出文件。这通常是在构建之前执行的，以确保项目从一个干净的状态开始。</p></div></li><li><p><code>site</code>生命周期</p></li></ul><h4 id="IDEA-集成"><a href="#IDEA-集成" class="headerlink" title="IDEA-集成"></a>IDEA-集成</h4><ul><li><p>进入<code>settings -&gt; Build -&gt;maven</code>,进行<code>maven</code>的配置</p><p><img src="https://img-blog.csdnimg.cn/direct/e8c00eaf9e62461d9f8e4589f2858975.png" alt=""></p></li><li><p><code>Runner</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-DarchetypeCatalog</span>=<span class="string">local</span></span><br></pre></td></tr></table></figure></li><li><p><code>IDEA</code>项目创建</p><p><img src="https://img-blog.csdnimg.cn/direct/5399fdb5f6b94909a296204200cad172.png" alt=""></p></li></ul><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><ul><li><p>依赖范围</p><p><img src="https://img-blog.csdnimg.cn/direct/609b2e38418d4cb9bb506a5a2263d706.png" alt=""></p></li></ul><h4 id="配置默认的JDK"><a href="#配置默认的JDK" class="headerlink" title="配置默认的JDK"></a>配置默认的JDK</h4><ul><li><p><code>conf/settings.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 激活配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/12/09/6c92115f/"/>
      <url>/2023/12/09/6c92115f/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><ul><li><p>什么是<code>Spring</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring</code>是一个开源的轻量级<code>Java</code>开发应用框架,可以简化企业级应用开发.<code>Spring</code>解决了开发者在<code>JavaEE</code>开发中遇到的许多常见问题,提供了功能强大的<code>IOC、AOP</code>以及<code>Web MVC</code>等功能。是当前企业中<code>Java</code>开发几乎不能缺少的框架之一。<code>Spring</code>的生态极其完善,不管是<code>Spring</code>哪个领域的解决方案都是依附于<code>Spring Framework</code>基础框架的</p></div></li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li><p>轻量</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring</code>框架使用的<code>jar</code>都比较小,一般在<code>1M</code>以下或者<code>几百 kb</code>,<code>Spirng</code>核心功能所需的<code>jar</code>总共在<code>3M</code>左右</p><p><code>Spring</code>框架运行占用的资源少,运行效率高.不依赖于其他<code>jar</code></p></div></li><li><p>针对接口编程，解耦合</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring</code>提供了<code>IOC</code>控制反转,由容器管理对象,对象的依赖关系。原来在程序代码中的对象创建方式,现在由容器完成,对象之间的依赖解耦</p></div></li><li><p><code>AOP</code>编程支持</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通过<code>Spring</code>提供的<code>AOP</code>功能,方便进行面向切面编程,许多不容易用传统<code>OOP</code>实现的功能可以通过<code>AOP</code>轻松应付在<code>Spring</code>中,开发人员可以从繁杂的事务管理代码中解脱出来,通过声明方式灵活的进行事务的管理,提高开发效率和质量</p></div></li><li><p>方便集成各种优秀框架</p></li></ul><h4 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h4><ul><li><p><code>IOC</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>IOC(Inversion of Control)</code>控制反转,是一个理论和指导思想,指导开发人员如何使用对象,管理对象的,把对象的创建、属性赋值、对象的生命周期都交给代码之外的容器管理</p></div></li><li><p><code>IOC</code>分为控制和反转</p><ul><li>控制: 对象创建,属性赋值,对象生命周期管理</li><li>反转: 把开发人员管理对象的权限转移给了代码之外的容器实现,由容器完成对象的管理</li><li>正转: 开发人员在代码中,使用<code>new</code>构造方法创建对象,开发人员掌握了对象的创建，属性赋值，对象从开始到销毁的全部过程.开发人员对对象全部的控制</li></ul></li><li><p><code>IOC</code>的技术实现</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>DI(依赖注入 Dependency Injection)</code>缩写是<code>DI</code>，是<code>IOC</code>的一种技术实现,程序只需要提供要使用的对象的名称就可以了,对象如何创建,如何从容器中查找,获取都由容器内部自己实现</p></div></li></ul><h4 id="基于XML的Spring应用"><a href="#基于XML的Spring应用" class="headerlink" title="基于XML的Spring应用"></a>基于XML的Spring应用</h4><ul><li><p><code>SpringBean</code>的配置详解</p><p><img src="https://img-blog.csdnimg.cn/direct/50e2387f7cf54395ba83f30e7ea9ffe2.png" alt=""></p><ul><li><p>基本配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 UserDaoImpl由Spring容器负责管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时存储到 Spring容器中(singleObjects单例池)中的beanName是 userDao,值是 UserDaoImpl 对象,可以根据beanName获取bean实例 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果不配置id,则Spring会把当前Bean实例的权限定名作为beanName --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao)ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    <span class="comment">// org.example.dao.impl.UserDaoImpl@41ee392b</span></span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认情况下,单纯的<code>Spring</code>环境<code>Bean</code>的作用域范围有两个<code>Singleton | Prototype</code></p><ul><li><code>Singleton</code>单例,默认值,<code>Spring</code>容器创建的时候,就会进行<code>Bean</code>的实例化,并存储到容器内部的单例池中,每次<code>getBean</code>时都是从单例池中获取相同的<code>Bean</code>实例</li><li><code>Prototype</code>: 原型,<code>Spring</code>容器初始化时不会创建<code>Bean</code>实例,当调用<code>getBean</code>时才会实例化<code>Bean</code>，每次<code>getBean</code>都会创建一个新的<code>Bean</code>实例</li></ul></li><li><p><code>Bean</code>的延迟加载</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当<code>lazy-init</code>设置为<code>true</code>时为延迟加载,也就是当<code>Spring</code>容器创建的时候,不会立即创建<code>Bean</code>实例,等待用到时在创建<code>Bean</code>实例并存储到单例池中去,后续在使用该<code>Bean</code>直接从单例池获取即可,本质上该<code>Bean</code>还是单例的</p></div></li><li><p><code>Bean</code>的初始化和销毁方法配置</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Bean</code>在被实例化后,可以执行指定的初始化方法完成一些初始化操作,<code>Bean</code>在销毁之前也可以可以指定的销毁方法完成一些操作</p></div></li><li><p><code>Spring</code>的实例化方式主要有如下两种</p><ul><li><p>构造方式实例化: 底层通过构造方法对<code>Bean</code>进行实例化</p><ul><li><p>无参数</p></li><li><p>有参数(需要配置指定参数)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;参数名&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>工厂方式实例化: 底层通过调用自定义的工厂方法对<code>Bean</code>进行实例化</p><ul><li>静态工厂方法实例化<code>Bean</code></li><li>实例工厂方法实例化<code>Bean</code></li><li>实现<code>FactoryBean</code>规范延迟实例化<code>Bean</code></li></ul></li></ul></li><li><p>依赖注入</p><ul><li>依赖注入的数据类型有<ul><li>普通数据类型: 例如：<code>String、int、boolean</code>等,通过<code>value</code>属性指定</li><li>引用数据类型: 例如: <code>UserDaoImpl、DataSource</code>等，通过<code>ref</code>属性指定</li><li>集合数据类型: 例如: <code>List、Map、Properties</code></li></ul></li></ul></li></ul></li><li><p><code>Spring</code>配置非自定义<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">myDate</span> <span class="operator">=</span> (Date)ac.getBean(<span class="string">&quot;myDate&quot;</span>);</span><br><span class="line">    <span class="comment">// Sat Dec 09 15:21:53 CST 2023</span></span><br><span class="line">    System.out.println(myDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><ul><li><p><code>DI</code>给属性赋值</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>xml</code>配置文件中使用标签和属性,完成对象创建和属性赋值</p></div><ul><li><p><code>set</code>注入,也叫设值输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- set注入: spring 调用类的 set 方法,通过set方法完成属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;coder-itl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// User(username=coder-itl, age=18)</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型的<code>set</code>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">// 学生的学校信息</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">School</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String schooName;</span><br><span class="line">    <span class="keyword">private</span> Date buidngDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;coder-itl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用类型的 set 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schooName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;育才中学&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;buidngDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2013-12-01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 各种数据类型的赋值 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三方类型注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;126346327463&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通类型和引用类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wnxy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wnxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.entity.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schoolName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wnxy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;listU&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ids&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- list 赋值简单类型数据 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1009<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1005<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- list 为引用类型赋值 &lt;ref bean=&quot;beanId&quot;/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- map 赋值简单数据类型 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10090&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 为 map 的引用类型赋值 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;entry key=&quot;id&quot; value-ref=&quot;beanId&quot;&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- map --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        构造注入: Spring调用类的有参数构造方法,创建对象同时给属性赋值</span></span><br><span class="line"><span class="comment">        语法:</span></span><br><span class="line"><span class="comment">            constructor-arg: 表示一个构造方法的形参</span></span><br><span class="line"><span class="comment">            标签属性:</span></span><br><span class="line"><span class="comment">                name: 构造方法形参名</span></span><br><span class="line"><span class="comment">                index: 构造方法的参数位置</span></span><br><span class="line"><span class="comment">                value: 简单类型的形参值</span></span><br><span class="line"><span class="comment">                ref: 引用类型的形参值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用全参构造...........</span></span><br><span class="line">    <span class="comment">// Student(stuName=zs, age=17)</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="引用类型的自动注入"><a href="#引用类型的自动注入" class="headerlink" title="引用类型的自动注入"></a>引用类型的自动注入</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>spring</code>可以根据某些规则给引用类型完成属性赋值.只对引用类型有效</p></div></li><li><p>规则</p><ul><li><p><code>byName</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>byName(按名称注入)</code>: <code>java</code>类中引用类型属性名称和<code>spring</code>容器中<code>bean</code>的<code>id</code>名称一样的,且数据类型也是一样的,这些<code>bean</code>能够赋值个引用类型</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">School</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String schooName;</span><br><span class="line">    <span class="keyword">private</span> Date buidngDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        引用类型自动注入:</span></span><br><span class="line"><span class="comment">            java中引用类型的属性名称和spring容器中bean的id名称一样,</span></span><br><span class="line"><span class="comment">            且数据类型一样的,这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.entity.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schooName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yczx&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;buidngDate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;47453875932703&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/7de25692ac80481491901a72dce65fa6.png" alt=""></p></li><li><p><code>byType</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>byType(按类型注入)</code> : <code>java</code>类中引用类型的数据类型和<code>spring</code>容器中<code>bean</code>的<code>class</code>值是同源关系的,这样的<code>bean</code>赋值给引用类型</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    引用类型自动注入:</span></span><br><span class="line"><span class="comment">        byType(按类型注入): java 类中引用类型的数据类型和bean的class是同源关系的，</span></span><br><span class="line"><span class="comment">        这些的 bean 能够赋值给引用类型</span></span><br><span class="line"><span class="comment">        同源关系:</span></span><br><span class="line"><span class="comment">            1. java 中引用类型的数据类型和 bean 的 class值是一样的</span></span><br><span class="line"><span class="comment">            2. java 中引用类型的数据类型和 bean 的 class值是父子类关系的</span></span><br><span class="line"><span class="comment">            3. java 中引用类型的数据类型和 bean 的 class值是接口和实现类关系的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="为应用指定多个配置文件"><a href="#为应用指定多个配置文件" class="headerlink" title="为应用指定多个配置文件"></a>为应用指定多个配置文件</h4><ul><li><p>多个配置文件的方式</p><ul><li><p>按功能模块分,一个模块一个配置文件</p></li><li><p>按类的功能分,数据库操作相关的类在一个文件,<code>service</code>类在一个配置文件，配置<code>redis</code>,事务等的在一个配置文件</p></li><li><p>可以使用通配符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不能将总的文件包含在内,注意名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath*:spring-*.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3a90d3ed599e4089b99a61deaf333e6b.png" alt=""></p></li></ul></li></ul><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li><p><code>@Compenent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>: </span></span><br><span class="line"><span class="comment"> *  表示创建对象,对象放到容器中,作用是创建 bean</span></span><br><span class="line"><span class="comment"> *  属性: value,表示对象名称,也就是bean的id属性值</span></span><br><span class="line"><span class="comment"> *  位置: 在类的上面,表示创建此类的对象</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Component</span>(value = &quot;student&quot;)</span></span><br><span class="line"><span class="comment"> *  &lt;bean id=&quot;student&quot; class=&quot;org.example.entity.Student&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    声明组件扫描器: 使用注解必须加入这个语句</span></span><br><span class="line"><span class="comment">        component-scan: 翻译过来就是组件扫描器,组件是 java 对象</span></span><br><span class="line"><span class="comment">        属性: base-package 注解在你的项目中的包名</span></span><br><span class="line"><span class="comment">        框架会扫描这个包和子包中所有的类,找类中的所有注解</span></span><br><span class="line"><span class="comment">        遇到注解后,按照注解表示的功能,去创建对象,给属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>@Repository</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>放在<code>dao</code>接口的实现类上面,表示创建<code>dao</code>对象,持久层对象,能访问数据库</p></div></li><li><p><code>@Service</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>放在业务层接口的实现类上面,表示创建业务层对象,业务层对象有事务的功能</p></div></li><li><p><code>@Controller</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>放在控制器类的上面,表示创建控制器对象,属于表示层对象,控制器对象能接受请求,把请求的处理结果显示给用户</p></div></li></ul><h4 id="注解为基本类型赋值"><a href="#注解为基本类型赋值" class="headerlink" title="注解为基本类型赋值"></a>注解为基本类型赋值</h4><ul><li><p><code>@Value</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/9 15:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> org.example.entity.Student</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单类型的属性赋值: <span class="doctag">@Value</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Value</span>: 属性: value 简单类型属性值</span></span><br><span class="line"><span class="comment"> * 位置:</span></span><br><span class="line"><span class="comment"> * 1. 在属性定义的上面,无需 set 方法,推荐使用</span></span><br><span class="line"><span class="comment"> * 2. 在 set 方法的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;zs&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取properties 这样的外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="注解为引用类型赋值"><a href="#注解为引用类型赋值" class="headerlink" title="注解为引用类型赋值"></a>注解为引用类型赋值</h4><ul><li><p><code>@Autowired</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>: spring 框架提供的,给引用类型赋值的,使用自动注入原理,支持 byName,byType,默认是byType</span><br></pre></td></tr></table></figure><ul><li><p>位置</p><ul><li>在属性定义的上面,无需 set 方法,推荐使用</li></ul></li></ul></li><li><p>在 <code>set</code> 方法的上面</p><ul><li><p><code>byName</code>自动注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">byName自动注入:</span><br><span class="line">    <span class="meta">@Autowired</span>: 给引用类型赋值</span><br><span class="line">    <span class="meta">@Qualifer(value=&quot;bean的id&quot;)</span> 从容器中找到指定名称的对象,把这个对象赋值给引用类型</span><br><span class="line">        required: 默认<span class="literal">true</span></span><br><span class="line">            <span class="literal">true</span>: spring 在启动的时候,创建容器对象的时候,会检查引用类型是否赋值成功,如果赋值失败,终止程序执行,并报错</span><br><span class="line">            <span class="literal">false</span>: 引用类型赋值失败,程序正常执行,不报错,引用类型的值是 <span class="literal">null</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>@Resource</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JDK1.8 默认自带 @Resource,高于 1.8版本的需要加入如下依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认使用 byName自动注入</span></span><br><span class="line"><span class="comment">// 先使用 byName赋值,如果赋值失败,再使用 byType</span></span><br><span class="line"><span class="comment">// 只使用 byName时需要做如下配置</span></span><br><span class="line"><span class="meta">@Resource(name=&quot;bean的id&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul><li><p>动态代理技术的分类</p><ul><li><p><code>jdk</code>动态代理</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>JDK</code>原生的实现方式,需要被代理的目标类必须<code>实现接口</code>,它会根据目标类的接口动态代理生成一个代理对象,代理对象和目标对象有相同的接口</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/14 13:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.dync.ProxyDync</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.dync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDync</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyDync</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * invoke 调用代理的方法都会执行此方法</span></span><br><span class="line"><span class="comment">             * proxy: 代理对象</span></span><br><span class="line"><span class="comment">             * method: 代理对象需要实现的方法(目标方法),即其中需要重写的方法</span></span><br><span class="line"><span class="comment">             * args method 所对应方法的参数(目标方法的参数)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">// 执行的是目标方法</span></span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance: 创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数:</span></span><br><span class="line"><span class="comment">         * 1. classLoader 加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2. interfaces 目标对象实现的所有接口的 class 对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3. InvocationHandler 设置代理对象实现目标方法的过程,即代理类中如何重写接口中的抽象方法【具体要进行的代理动作】</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>cglib</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通过继承被代理的目标类实现代理,所以不需要目标类实现接口</p></div></li></ul></li></ul><h4 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP-面向切面编程"></a>AOP-面向切面编程</h4><ul><li><p><code>AOP</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>AOP(Aspect Orient Programming)</code>面向切面编程.面向切面编程是从动态角度考虑程序运行过程</p><p><code>AOP</code>是对传统的<code>OOP(面向对象编程)</code>的补充,<code>AOP</code>的主要作用就是为了优雅的植入逻辑,也就是给一个现有的类添加新的功能时，不用修改该类的源码,符合<code>开闭原则</code>,所谓的开闭原则就是<code>对修改关闭,对扩展开放</code></p><p>举个例子: 给某个业务添加日志的功能,只需要额外创建一个切面类:<code>LohAspect</code>，在该类上面添加<code>@Component,@Aspect</code>注解,在该切面类中编写通知,通知就是一个方法,该方法封装了:在什么时候，什么地方(切点),做什么事情(方法体内容)。在从<code>IOC</code>容器中获取该业务类的对象时,获取到的就是一个植入了日志逻辑的代理对象.对代理对象的方法调用,就会执行切面逻辑</p><p><code>spring</code> 切面的底层原理是: <code>jdk</code> 的动态代理</p></div></li><li><p><code>Aspect</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Aspect</code>表示切面,给业务方法增加的功能,叫做切面.切面一般都是非业务功能,而且切面功能一般都是可以复用的,例如日志功能、事务功能、权限检查、参数检查、统计信息等</p></div><ul><li>日志记录： 在系统中记录日志是非常重要的,可以使用<code>AOP</code>来实现日志记录的功能,可以在方法执行之前、执行后或异常抛出时记录日志</li><li>事务处理: 在数据库操作中使用事务可以保证数据的一致性，可以使用<code>AOP</code>来实现事务处理的功能.可以在方法开始前开启事务,在方法执行完毕后提交或异常时回滚事务</li><li>安全控制: 在系统中包含某些需要安全控制的操作,如<code>登录、修改密码、授权等</code>,可以使用<code>AOP</code>来实现安全控制的功能,可以在方法执行前进行权限判断,如果用户没有权限,则抛出异常或转向到错误页面,以防止未经授权的访问</li><li>性能监控: 在系统运行过程中,优势需要对某些方法的性能进行监控,以找到系统的瓶颈并进行优化,可以使用<code>AOP</code>来实现性能监控的功能,可以在方法执行前记录时间戳,在方法执行完毕后计算方法执行时间并输出到日志中</li><li>异常处理: 系统中可能出现各种异常情况,如空指针异常,数据库连接异常等,可以使用<code>AOP</code>来实现异常处理的功能,在方法执行过程中,如果出现异常,则进行异常处理(<code>记录日志</code>)</li><li>缓存控制</li></ul></li><li><p><code>AOP</code>的作用</p><ul><li>让切面功能复用</li><li>让开发人员专注业务逻辑,提高开发效率</li><li>实现业务功能和其他非业务功能解耦合</li><li>给存在的业务方法,增加功能,不用修改原来的代码</li></ul></li><li><p><code>AOP</code>中的术语</p><ul><li><p><code>Aspect</code>:切面,开发自己编写功能增强代码的地方,这些代码会通过动态代理加入到原有的业务方法中,<code>@Aspect</code>注解表示当前类是切面类,切面是一个普通类</p></li><li><p><code>JoinPoint</code>: 连接点,连接切面和目标对象,或是一个方法名称,一个包名,一个类名.在这个特定的位置执行切面中的功能代码</p></li><li><p><code>PointCut</code>: 切入点,其实就是筛选出来的连接点。一个类中的所有方法都可以是<code>JoinPonit</code>，具体的那个方法要增加功能,这个方法就是<code>Pointcut</code></p></li><li><p><code>target</code>: 目标对象,给那个对象增加切面的功能,这个对象就是目标对象</p></li><li><p><code>Advice</code>: 通知(<code>增强</code>),表示切面的执行时间,在目标方法之前执行切面,还是目标方法之后执行切面</p><blockquote><p><code>AOP</code>中重要的三个要素:<code>Aspect、PointCut、Advice</code>，这个概念的理解是:<code>在 Advice的时间,在PonitCut的位置上,执行 Aspect</code></p></blockquote></li></ul></li><li><p><code>AOP</code>技术思想的实现</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>AOP</code>是一个动态的思想.在程序运行期间,创建代理,使用代理执行方法时,增加切面的功能,这个代理对象是存在内存中的</p></div></li></ul><h4 id="使用-AspectJ-框架实现-AOP"><a href="#使用-AspectJ-框架实现-AOP" class="headerlink" title="使用 AspectJ 框架实现 AOP"></a>使用 AspectJ 框架实现 AOP</h4><ul><li>通知<ul><li><code>@Before</code>前置通知</li><li><code>@AfterRetunring</code>后置通知</li><li><code>@Around</code>环绕通知</li><li><code>@AfterThrowing</code>异常通知</li><li><code>@After</code>最终通知</li></ul></li></ul><h4 id="PointCut"><a href="#PointCut" class="headerlink" title="PointCut"></a>PointCut</h4><ul><li><p><code>PointCut</code>用来表示切面执行的位置,使用<code>AspectJ</code>中切入点表达式</p></li><li><p>切入点表达式语法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">execution(</span><br><span class="line">modifiers-pattern? </span><br><span class="line">ret-type-pattern </span><br><span class="line">declaring-type-pattern?</span><br><span class="line">name-pattern(param-pattern?) </span><br><span class="line">throws-pattern</span><br><span class="line">)</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">execution(public void com.example.proxy.ServiceProxy.doSome(String,Integer))</span></span><br><span class="line"><span class="comment">execution(访问权限 方法返回值 方法声明(参数) 异常类型)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>modifiers-pattern</code>访问权限修饰符</li><li><code>ret-type-pattern</code>返回值类型</li><li><code>declaring-type-pattern</code>包名类名</li><li><code>name-pattern(param-pattern</code>方法名(参数类型和参数个数)</li><li><code>throws-pattern</code>抛出异常类型</li><li><code>?</code>表示可选的部分</li></ul></li><li><p>通配符简化写法</p><p><img src="https://img-blog.csdnimg.cn/direct/b1fdd5fab5fc45c1990f8c26f2d3a0ea.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// execution(public * *(..)) || execution(public * *(..)) 表示或的关系 </span></span><br><span class="line">execution(<span class="keyword">public</span> * *(..)) <span class="comment">// 指定切入点为: 任意公共方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* set*(..)) <span class="comment">// 指定切入点为 任何一个以 set 开始的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.example.service.*.*(..)) <span class="comment">// 指定切入点为 定义在service包里的任意类的任意方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.example.service..*.*(..)) <span class="comment">// 指定切入点为定义在 service 包或子包里面的任意类的任意方法</span></span><br><span class="line">    <span class="comment">// .. 出现在类名中时,后面必须跟 &quot;*&quot;,表示包,子包下的所有类</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/7c142d9b9e514471b593c5dde05766ca.png" alt=""></p></li></ul><h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><ul><li><p>创建项目</p></li><li><p>添加项目依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-context --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 能使用aspectj框架的功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建业务接口和实现类</p></li><li><p>创建一个叫做切面类,是一个普通类</p><ul><li>在类的上面加入<code>@Aspect</code></li><li>在类中定义方法,方法表示切面的功能，在方法的上面加入<code>Aspect</code>框架中的通知注解</li></ul></li><li><p>创建<code>spring</code>配置文件</p><ul><li><p>声明目标类(<code>@Service</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSome.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doOther...................&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>声明切面类(<code>@Component</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/11 16:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.aspect.BeforeAspect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知方法的定义规范:</span></span><br><span class="line"><span class="comment">     * 1. 方法是 public</span></span><br><span class="line"><span class="comment">     * 2. 方法是 void</span></span><br><span class="line"><span class="comment">     * 3. 方法名称自定义</span></span><br><span class="line"><span class="comment">     * 4. 方法可以有参数,如果有是 JoinPoint,也可以没有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public void com.example.service.impl.UserServiceImpl.doSome())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outPutTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志记录: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>声明自动代理生成器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明自动代理生成器:</span></span><br><span class="line"><span class="comment">        目的是创建目标对象的代理(ServiceProxy)</span></span><br><span class="line"><span class="comment">         调用 aspectj 框架中的功能,寻找 spring 容器中的所有目标对象</span></span><br><span class="line"><span class="comment">         把每个目标对象加入切面类中的功能,生成代理</span></span><br><span class="line"><span class="comment">         这个代理对象是修改的内存中的目标对象,这个目标对象就是代理对象</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建测试类,测试目标方法执行时,增加切面的功能</p></li></ul><h4 id="返回通知"><a href="#返回通知" class="headerlink" title="返回通知"></a>返回通知</h4><ul><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/11 16:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.aspect.BeforeAspect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterReturningTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知方法的定义规范:</span></span><br><span class="line"><span class="comment">     * 1. 方法是 public</span></span><br><span class="line"><span class="comment">     * 2. 方法是 void</span></span><br><span class="line"><span class="comment">     * 3. 方法名称自定义</span></span><br><span class="line"><span class="comment">     * 4. 方法有参数,推荐使用 Object 类型,JoinPoint使用时必须是第一个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterReturning</span>: 返回通知</span></span><br><span class="line"><span class="comment">     * 属性: value 切入点表达式</span></span><br><span class="line"><span class="comment">     * returning 自定义的变量,表示目标方法的返回值. 自定义变量名称必须和通知方法的形参名一样</span></span><br><span class="line"><span class="comment">     * 位置: 在方法的上面</span></span><br><span class="line"><span class="comment">     * 特点:</span></span><br><span class="line"><span class="comment">     * 1. 在目标方法之后执行的</span></span><br><span class="line"><span class="comment">     * 2. 能获取到目标方法的执行结果</span></span><br><span class="line"><span class="comment">     * 3. 不会影响目标方法的执行</span></span><br><span class="line"><span class="comment">     * 方法的参数:</span></span><br><span class="line"><span class="comment">     * Object res: 表示目标方法的返回值,使用 res 接受 xxx() 的调用结果</span></span><br><span class="line"><span class="comment">     * Object res = xxx();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* *.*(..))&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outPutTime</span><span class="params">(Object res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志记录: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;获取getSum调用后的结果: &quot;</span> + res);</span><br><span class="line">        res = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @AfterReturning 注解用于指定在目标方法正常返回后执行的方法。</span></span><br><span class="line"><span class="comment">// 该注解的方法只有在目标方法顺利执行并正常返回时才会被调用，如果目标方法抛出异常，则 @AfterReturning 注解的方法将不会被执行。</span></span><br><span class="line"><span class="comment">// 这使得它适合用于处理正常返回时的清理操作。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h4><ul><li><p>异常通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">    pointcut = &quot;execution(* com.example.service.MyService.myMethod(..))&quot;,</span></span><br><span class="line"><span class="meta">    throwing = &quot;ex&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">    <span class="comment">// Code to be executed after the method throws an exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在目标方法执行之前之后执行.被注解为环绕增强的方法要有返回值,<code>Object</code>类型,并且方法可以包含有一个<code>ProceedingJoinPoint</code>类型的参数,接口<code>ProceedingJoinPoint</code>其有一个<code>proceed()</code>方法，用于执行目标方法.若目标方法有返回值,则该方法的返回值就是目标方法的返回值,最后,环绕增强方法将其返回值返回.该增强方法实际是拦截了目标方法的执行</p></div></li><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/12 15:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.aspect.AdviceUser</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AroundTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知方法的定义:</span></span><br><span class="line"><span class="comment">     * 1. 方法是 public</span></span><br><span class="line"><span class="comment">     * 2. 方法是必须有返回值,推荐使用 Object 类型</span></span><br><span class="line"><span class="comment">     * 3. 方法名称自定义</span></span><br><span class="line"><span class="comment">     * 4. 方法名称必须有 ProceedingJoinPoint 参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object 表示调用目标方法希望得到执行结果(不一定是目标方法的返回值)</span></span><br><span class="line"><span class="comment">     * 参数: ProceedingJoinPoint,相当于反射中 Method,作用: 执行目标方法的,等于 Method.invoke();</span></span><br><span class="line"><span class="comment">     * 特点:</span></span><br><span class="line"><span class="comment">     * 1. 在目标方法的前和后都能增强功能</span></span><br><span class="line"><span class="comment">     * 2. 控制目标方法是否执行</span></span><br><span class="line"><span class="comment">     * 3. 修改目标方法的执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* *.removeUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">adviceRemoveUser</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(pjp);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是环绕通知...........Before&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取方法的签名</span></span><br><span class="line">        System.out.println(pjp.getSignature().getName());</span><br><span class="line">        <span class="comment">// 执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是环绕通知...........After&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><ul><li><p>后置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @After 注解用于指定在目标方法执行之后执行的方法。</span></span><br><span class="line"><span class="comment">// 无论目标方法执行是否抛出异常，@After 注解标注的方法都会被执行。</span></span><br><span class="line"><span class="comment">// 这意味着它在目标方法的最后阶段执行清理和资源释放等操作，无论方法是否正常返回或抛出异常。</span></span><br><span class="line"><span class="meta">@After(&quot;execution(* com.example.service.MyService.myMethod(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethodExecution</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Cleanup or resource release code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="各种通知的执行顺序分析"><a href="#各种通知的执行顺序分析" class="headerlink" title="各种通知的执行顺序分析"></a>各种通知的执行顺序分析</h4><ul><li><p>分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span> <span class="params">(Object proxy, Method method, Object[]args)</span><span class="keyword">throw</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>)</span><br><span class="line">        <span class="type">Object</span> <span class="variable">r</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li><code>@Before 和 @After</code>总是会执行</li><li><code>@AfterReturning 和 @AfterThrowing</code>之间,只能执行一个</li><li>只有<code>@AfterReturning</code>这个通知执行的时候,才能访问到目标方法的返回值</li><li>只有<code>@AfterThrowing</code>这个通知执行的时候,才能取到异常信息</li></ul></li></ul><h4 id="Pointcut-切入点表达式"><a href="#Pointcut-切入点表达式" class="headerlink" title="@Pointcut-切入点表达式"></a>@Pointcut-切入点表达式</h4><ul><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/12 15:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.aspect.AdviceUser</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviceUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Pointcut</span>: 定义和管理切入点, 不是通知注解</span></span><br><span class="line"><span class="comment">     * 属性: value 切入点表达式</span></span><br><span class="line"><span class="comment">     * 位置: 在一个自定义方法的上面,这个方法看作是切入点表达式的别名,</span></span><br><span class="line"><span class="comment">     * 其他的通知注解中,可以使用方法名称,就表示使用这个切入点表达式了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* *.removeUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myCut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 无需代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;myCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="JoinPoint接口"><a href="#JoinPoint接口" class="headerlink" title="JoinPoint接口"></a>JoinPoint接口</h4><ul><li><p><code>jointpoint</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要获取方法签名,传入的实参等信息时,可以在通知方法中声明 JoinPoint 参数的形参</span></span><br></pre></td></tr></table></figure><ul><li><code>JoinPoint</code>接口通过<code>getSignature()</code>方法来获取目标方法的签名(<code>方法声明时的完整信息</code>)</li><li>通过目标方法签名对象获取方法名</li><li>通过<code>JoinPoint</code>对象获取外界调用目标方法时传入的实参列表组成的数组</li></ul></li></ul><h4 id="切面失效情况"><a href="#切面失效情况" class="headerlink" title="切面失效情况"></a>切面失效情况</h4><ul><li><p>分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AopNoCanUse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;aopNoCanUserImpl&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AopNoCanUseImpl</span> <span class="keyword">implements</span> <span class="title class_">AopNoCanUse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am F1 Function.......&quot;</span>);</span><br><span class="line">        <span class="comment">// 生效</span></span><br><span class="line">        <span class="type">AopNoCanUse</span> <span class="variable">currentProxy</span> <span class="operator">=</span> (AopNoCanUse) AopContext.currentProxy();</span><br><span class="line">        currentProxy.f2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am F2 Function.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aop</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* *.f1())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPT</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;myPT()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeToF1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切入了 F1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *.f2())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeToF2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切入了 F2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类上配置</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aopCanNoUse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">AopNoCanUse</span> <span class="variable">bean</span> <span class="operator">=</span> (AopNoCanUse) ac.getBean(<span class="string">&quot;aopNoCanUserImpl&quot;</span>);</span><br><span class="line">    bean.f1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Spring-Mybatis"><a href="#Spring-Mybatis" class="headerlink" title="Spring-Mybatis"></a>Spring-Mybatis</h4><ul><li><p>创建相关的数据库、表(<code>添加测试数据</code>)</p></li><li><p>创建<code>maven</code>项目</p></li><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简化实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- @Resource依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aspectj依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-整合mybatis依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer stuId;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Character stuSex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>mapper</code>接口和相关<code>sql</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- void insertStu(Student student); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStu&quot;</span>&gt;</span></span><br><span class="line">        insert into student</span><br><span class="line">        values (#&#123;stuId&#125;, #&#123;stuName&#125;, #&#123;stuSex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mybatis</code>的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>service</code>的接口和它的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter 注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentMapper</span><span class="params">(StudentMapper studentMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStu</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentMapper.insertStu(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建<code>spring</code>的配置文件</p><ol><li><p>声明数据源<code>DataSource</code>,使用的阿里的<code>Druid</code>连接池</p></li><li><p>声明<code>SqlSessionFactionBean</code>类,在这个内部创建的是<code>SqlSessionFactory</code>对象</p></li><li><p>声明<code>MapperScannerConfiguration</code>类,在内部创建<code>dao</code>代理对象,创建的对象都放在<code>spring</code>容器中</p></li><li><p>声明<code>service</code>对象,把<code>③</code>中<code>dao</code>赋值给<code>service</code>属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml`是 spring的配置文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明数据源 DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDatasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明 SqlSessionFactoryBean,在这个类的内部,创建SqlSessionFactory  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDatasource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定核心配置文件的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        声明 MapperScannerConfigurer</span></span><br><span class="line"><span class="comment">            mapperScannerConfigurer的作用是:</span></span><br><span class="line"><span class="comment">            循环 basePackage 所表示的包,把包中的每个接口都找到,调用 sqlSession.getMapper,把每个dao接口都创建出dao对象</span></span><br><span class="line"><span class="comment">            dao代理对象放在容器中</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        public void setSqlSessionFactoryBeanName(String sqlSessionFactoryName) &#123;</span></span><br><span class="line"><span class="comment">            this.sqlSessionFactoryBeanName = sqlSessionFactoryName;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      String  sqlSessionFactoryName =&gt; value=&quot;factory&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定sqlSessionFactoryBeanName的name--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;factory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定 dao 基本包的基本路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对 service 中的它赋值  private StudentMapper studentMapper; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试<code>dao</code>访问数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicatonContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService) ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">        studentService.insertStu(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>, <span class="string">&quot;coder-itl&quot;</span>, <span class="string">&#x27;男&#x27;</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/282d09a8163d4f218861c29e9b82501c.png" alt=""></p></li><li><p>加载外部属性配置文件到<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载外部属性配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Spring-纯注解开发"><a href="#Spring-纯注解开发" class="headerlink" title="Spring - 纯注解开发"></a>Spring - 纯注解开发</h4><ul><li><p>完全注解开发理解</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring</code>完全注解配置是指通过<code>Java</code>配置类代码来配置<code>Spring</code>应用程序,使用注解来替代原本在<code>XML</code>配置文件中的配置.相对于<code>XML</code>配置,完全注解配置具有更强的类型安全性和更好的可读性</p></div><ul><li><p>对比理解</p><p><img src="https://img-blog.csdnimg.cn/direct/e57dbb93f3594584ab636eff207c5caa.png" alt=""></p></li></ul></li><li><p>第三方创建<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean: 是一个方法</span></span><br><span class="line"><span class="comment">     * 方法的返回值类型 === bean组件的类型或者其他的接口和父类</span></span><br><span class="line"><span class="comment">     * 方法的名字就是 bean 的 id</span></span><br><span class="line"><span class="comment">     * 方法体可以自定义实现过程</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Bean</span> 会真正让配置类的方法创建的组件存储到 ioc 容器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 问题一: beanName的问题</span></span><br><span class="line"><span class="comment">     *  默认: 方法名</span></span><br><span class="line"><span class="comment">     *  指定: name / value 属性起名字,覆盖方法名</span></span><br><span class="line"><span class="comment">     *  问题二: 周期方法如何指定</span></span><br><span class="line"><span class="comment">     *      原有注解方案: <span class="doctag">@PostConstruct</span> + <span class="doctag">@PreDestroy</span> 注解指定</span></span><br><span class="line"><span class="comment">     *      bean 属性指定: initMethod / destroyMethod 指定</span></span><br><span class="line"><span class="comment">     *  问题三: 作用域</span></span><br><span class="line"><span class="comment">     *          和以前一样还是 <span class="doctag">@Scope</span>注解,默认是单例的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> School <span class="title function_">school</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">School</span> <span class="variable">school</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>();</span><br><span class="line">        school.setSchoolName(<span class="string">&quot;育才中学&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Import</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfigB</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(SpringConfigB.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfigA</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>AOP</code>练习</p><ul><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明为一个配置类(底层带有 @Component)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example&quot;)</span> <span class="comment">// 包扫描 =&gt;  &lt;context:component-scan base-package=&quot;com.example&quot;/&gt;</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">// =&gt; AOP&lt;aop:aspectj-autoproxy/&gt; </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户信息业务逻辑..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;移除用户信息业务逻辑..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/12 15:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.aspect.AdviceUser</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviceUser</span> &#123;</span><br><span class="line">    <span class="comment">// 前置环绕通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *.addUser())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adviceAddUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录日志: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) ac.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit5 测试环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringJUnitConfig(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="comment">// 注入要使用的 Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringConfigTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li><p>事务概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>事务原本是数据库中的概念,在<code>mapper</code>层,但一般情况下,需要将事务提升业务层,即<code>Service</code>层,这样做是为了能够使用事务的特性来管理具体的业务</p><ul><li>在<code>spring</code>中通常可以通过以下两种方式来实现对事务的管理<ul><li>使用<code>Spring</code>的事务注解管理事务</li><li>使用<code>AspectJ</code>的<code>AOP</code>配置管理事务</li></ul></li></ul></div></li><li><p>事务管理器</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring</code> 框架使用事务管理器对象,管理所有的事务</p><p>事务管理器接口:<code>PlatformTransactionManager</code></p><p>作用: 定义了事务的操作,主要是<code>commit(),rollback()</code></p><p>事务管理器有很多实现类: 一种数据库的访问技术有一个实现类,由于实现类具体完成事务的提交,回滚,</p><p>意味着: <code>jdbc或者Mybatis</code>访问数据库有自己的事务管理器实现类<code>DataSourceTranactionManager</code></p><p><code>hibernate</code>框架,它的事务管理器实现类:<code>HibernateTransactionManager</code></p></div><p><img src="https://img-blog.csdnimg.cn/direct/00ff4d552e41455487cf50bc4106e271.jpeg" alt=""></p></li><li><p>事务提交回滚的时机</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当你的业务正常执行时,没有异常,事务是提交的,如果你的业务方法抛出了运行时异常,事务是回滚的</p></div></li><li><p>异常的分类</p><ul><li>运行时异常<ul><li><code>RuntimeException</code>和她的子类都是运行时异常,在程序执行过程中抛出的异常.</li><li>常见的运行时异常<ul><li><code>NullPoinerException</code></li><li><code>NumberFormatException</code></li><li><code>ArithmeticException</code></li><li><code>IndexOutofBoundsException</code></li></ul></li></ul></li><li>受查异常<ul><li>编写<code>java</code>代码的时候,必须出来的异常,例如<code>IOException、SQLException,FileNotFoundException</code></li></ul></li></ul></li><li><p>事务使用的是环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟代码</span></span><br><span class="line"><span class="meta">@Around(&quot;execution()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        PlatformTransactionManager.beginTransaction(); <span class="comment">// 使用Spirng的事务管理器</span></span><br><span class="line">        pjp.proceed(); <span class="comment">// 执行目标方法</span></span><br><span class="line">        PlatformTransactionManager.commit(); <span class="comment">// 业务方法执行正常,提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        PlatformTransactionManager。rollback(); <span class="comment">// 回滚事务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事务定义接口<code>TransactionDefinition</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>事务定义接口<code>TransactionDefinition</code>中定义了事务描述相关的三类常量: <code>事务隔离级别、事务传播行为、事务默认超时时限</code></p></div></li><li><p>隔离级别</p><blockquote><p>隔离级别: 控制事务之间影响的程度,5个值,只有四个隔离级别</p></blockquote><ul><li><code>default</code>: 采用db默认的事务隔离级别,MySQL的默认隔离级别为<code>repeatable_read</code>，<code>oracle</code>默认为<code>read_committed</code></li><li><code>read_uncommitted</code>: 读未提交,未解决任何并发问题</li><li><code>read_committed</code>读已提交,解决脏读,存在不可重复读与幻读</li><li><code>repeatable_read</code>可重复读,解决脏读,不可重复读,存在幻读</li><li><code>serializable</code>串行化,不存在并发问题</li></ul></li><li><p>超时时间</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>超时时间,以<code>秒</code>为单位,整数值,默认是<code>-1</code></p><p>超时时间: 表示一个业务方法最长的执行时间,如果到达时间没有执行完毕,<code>spring</code>回滚事务</p></div></li><li><p>传播行为</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>传播行为有<code>7</code>个值</p><p>传播行为: 业务方法在调用时,事务在方法之间的传递和使用</p><p>使用传播行为,<code>标识方法有无事务</code></p></div><ul><li><p><code>propagation_required</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>required</code>是<code>spring</code>中默认传播行为,方法在调用的时候,如果存在事务就是使用当前的事务,如果没有事务,则新建事务,方法在新事物中执行</p><p><code>Spring</code>默认的事务传播行为:</p><p>​    如果该传播行为加在<code>doOther</code>方法上,若<code>doSome</code>方法在调用<code>doOther</code>方法时就是在事务内运行的，则<code>doOther</code>方法的执行也叫加入到该事务内执行,若<code>doSome</code>方法在调用<code>doOther</code>方法时没有在事务内执行,则<code>doOther</code>方法将会创建一个事务，并在其中执行</p><p><img src="https://img-blog.csdnimg.cn/direct/4ea85fd9111c4ad1bad9af33325bfaa1.png" alt="在这里插入图片描述"></p></div></li><li><p><code>propagation_requires_new</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>方法需要一个新事务,如果调用方法时,存在一个事务,则原来的事务暂停,直到新事务执行完毕.如果方法调用时,没有事务,则新建一个事务,在新事物执行代码</p></div></li><li><p><code>propagation_supports</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>支持,方法有事务可以正常执行没有事务也可以正常执行(<code>查询操作</code>)</p></div></li></ul></li><li><p><code>@Transactional</code></p><ul><li><p><code>@Transactional</code>注解,使用注解的属性控制事务(<code>隔离级别、传播行为、超时</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">             propagation = Propagation.REQUIRED, // 默认的Spring事务传播行为</span></span><br><span class="line"><span class="meta">             isolation = Isolation.DEFAULT, // 用于设置事务的隔离级别,该属性类型为 Isolation 枚举,默认 Isolation.DEFAULT</span></span><br><span class="line"><span class="meta">             readOnly = true, // 用于设置该方法对数据库的操作是否是只读的,该属性值是 boolean,默认值是  false</span></span><br><span class="line"><span class="meta">             timeout = -1, // 用于设置本操作与数据库连接的超时时限,单位为秒,类型为 int,默认值 -1,即没有时限</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">             rollbackFor = &#123;&#125;, // 指定需要回滚的异常类,类型为 Class[],默认值为空数组,若只有一个异常类时,可以不使用数组</span></span><br><span class="line"><span class="meta">             rollbackForClassName = &#123;&#125;,// 指定需要回滚的异常类类名,类型为String[],默认值为空数组,若只有一个异常类时,可以不使用数组</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">             noRollbackFor = &#123;&#125;,// 指定不需要回滚的异常类m类型为 Class[],默认值为空数组,若只有一个异常类时,可以不使用数组</span></span><br><span class="line"><span class="meta">             noRollbackForClassName = &#123;&#125; // 指定不需要回滚的异常类类名,类型为 String[]</span></span><br><span class="line"><span class="meta">     )</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring =&gt; 数据源、事务的整合配置 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_tx?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        public void setSqlSessionFactoryBeanName(String sqlSessionFactoryName) &#123;</span></span><br><span class="line"><span class="comment">            this.sqlSessionFactoryBeanName = sqlSessionFactoryName;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      String  sqlSessionFactoryName =&gt; value=&quot;factory&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;factory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;buyService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.impl.BuyGoodsServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;goodsMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;goodsMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saleMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;saleMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明事务的管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">带有tx的annotation-driven</span></span><br><span class="line"><span class="comment">        开启事务注解驱动: 告诉框架使用注解管理事务</span></span><br><span class="line"><span class="comment">        transaction-manager: 指定事务管理器的 id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h4><ul><li><p>在<code>spring</code>的配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明事务: 不用写代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 声明事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    2. 声明业务方法的事务属性(隔离级别、传播行为、超时)</span></span><br><span class="line"><span class="comment">    id: 给业务方法配置事务段代码起个名称,唯一值</span></span><br><span class="line"><span class="comment">    transaction-manager: 事务管理器的 id</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;buyGoodsAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给具体的业务方法增加事物的说明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         给具体的业务方法,说明他需要的事务属性</span></span><br><span class="line"><span class="comment">         name: 业务方法名称,配置那么的值: 1. 业务方法的名称 2.带有部分通配符的方法名称 3. 使用 *</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;buyGoods&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;buy*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明切入点表达式: 表示哪些包中的那个类,类中的方法参与事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        声明切入点表达式</span></span><br><span class="line"><span class="comment">        expression: 切入点表达式,表示那些类和类中的方法要参与事务</span></span><br><span class="line"><span class="comment">        id: 切入点表达式的名称,唯一值</span></span><br><span class="line"><span class="comment">        execution(* *..service..*.*(..)): 表述的是任意包下的service包下的任意方法任意参数的方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;servicePointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;buyGoodsAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="容器对象"><a href="#容器对象" class="headerlink" title="容器对象"></a>容器对象</h4><ul><li><p>声明监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    声明监听器:</span></span><br><span class="line"><span class="comment">        默认监听器: 创建容器对象,读取的配置文件 /WEB-INF/spring-beans.xml</span></span><br><span class="line"><span class="comment">    context-param: 叫做上下文参数,给监听器,提供参数的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   自定义容器使用的配置文件路径:</span></span><br><span class="line"><span class="comment">        contextConfigLocation: 名称是固定的,表示自定义 spring 配置文件的路径,</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="/2023/12/09/5e5aa75c/"/>
      <url>/2023/12/09/5e5aa75c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><ul><li><p>概述</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li><code>Reflection(反射)</code>: 是被视为<code>动态语言</code>的关键,反射机制允许程序在执行期借助于<code>Reflection API</code>取得任何类的内部信息,并能直接操作任意对象的内部属性及方法</li><li>加载完类之后,在堆内存的方法区就产生了一个<code>Class</code>类型的对象<code>(一个类只有一个 Class对象)</code>,这个对象就包含了完整的类的结构信息,我们可以通过这个对象看到类的结构。</li></ul></div></li><li><p><code>Java</code>反射机制提供的功能</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul></li></ul><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><ul><li><p>关于<code>java.lang.Class</code>类的理解</p><ul><li><p>类的加载过程</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>程序经过<code>javac.exe</code>命令以后,会生成一个或多个字节码文件(<code>.class</code>结尾)</p><p>接着我们使用<code>java.exe</code>命令对某个字节码文件进行解释运行.相当于将某个字节码文件加载到内存中,此过程就称为类的加载。加载到内存中的类,我们就称为运行时类,此运行时类,就作为<code>Class</code>的一个实例</p><p><code>Class</code>的实例对应着一个运行时类</p></div></li></ul></li><li><p>获取<code>Class</code>实例的方式</p><ul><li><code>对象.class</code></li><li><code>Class.forName(String fullPath)</code></li><li><code>对象.getClass()</code></li></ul></li><li><p>类加载器的作用</p><ul><li><p>类加载器的作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>将<code>class</code>文件字节码内容加载到内存中,并将这些静态数据<code>转换成方法区运行时数据结构</code>,然后在堆中生成一个代表这个类的<code>java.lang.Class</code>对象,作为方法区中类数据的访问入口</p></div></li><li><p>类缓存</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>标准的<code>JavaSe</code>类加载器可以按要求查找类,但一旦某个类被加载到类加载器中,它将维持加载(<code>缓存</code>)一段时间.不过<code>JVM</code>垃圾回收机制可以回收这些<code>Class</code>对象</p></div></li></ul></li></ul><h4 id="通过反射-创建运行时类的对象"><a href="#通过反射-创建运行时类的对象" class="headerlink" title="通过反射,创建运行时类的对象"></a>通过反射,创建运行时类的对象</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vuex-购物车实战总结</title>
      <link href="/2023/12/06/55fb9871/"/>
      <url>/2023/12/06/55fb9871/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Vuex-购物车实战总结"><a href="#Vuex-购物车实战总结" class="headerlink" title="Vuex-购物车实战总结"></a>Vuex-购物车实战总结</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>vuex</code>是一个<code>vue</code>的状态管理工具,状态就是数据</p></div></li><li><p>使用场景</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>某个状态在<code>很多组件</code>来使用(<code>个人信息</code>)</li><li>多个组件<code>共同维护</code>一份数据(<code>购物车</code>)</li></ul></div></li><li><p>优势</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>共同维护一份数据,数据集中化管理</li><li>响应式变化</li><li>操作简单(<code>vuex</code>提供了一些辅助函数)</li></ul></div></li><li><p>图示</p><p><img src="https://img-blog.csdnimg.cn/direct/9b50d04b80484da7990f449ca001b6ef.png" alt=""></p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p><code>vue2</code>关于路由和<code>vuex</code>的版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vue-router</span>: <span class="string">3</span></span><br><span class="line"><span class="attr">vuex</span>: <span class="string">3</span></span><br><span class="line"><span class="attr">less</span>: <span class="string">3</span></span><br><span class="line"><span class="attr">less-loader</span>: <span class="string">7</span></span><br></pre></td></tr></table></figure></li><li><p>基本环境搭建</p><ol><li><p>安装<code>vuex</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add vuex@3</span></span><br></pre></td></tr></table></figure></li><li><p>新建<code>vuex</code>模块文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 src/store/index.js</span></span><br></pre></td></tr></table></figure></li><li><p><code>main.js</code>导入挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store, <span class="comment">// 挂载</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="state-状态"><a href="#state-状态" class="headerlink" title="state 状态"></a>state 状态</h4><ul><li><p>目标</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>明确如何给仓库<code>提供</code>数据,如何<code>使用</code>仓库的数据</p></div></li><li><p>使用数据</p><ul><li><p><code>this.$store.xxx</code></p></li><li><p>辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模板中: &#123;&#123; $store.<span class="property">state</span>.<span class="property">xxx</span> &#125;&#125;</span><br><span class="line">组件逻辑中: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br><span class="line">js模块中: store.<span class="property">state</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure></li><li><p><code>辅助函数</code>出现在<code>computed</code>中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Vuex&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;title&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><p>说明:<code>mutations</code>必须是同步的(<code>便于监测数据变化,记录调试</code>)</p></li></ul><h4 id="mutaions"><a href="#mutaions" class="headerlink" title="mutaions"></a>mutaions</h4><ul><li>目标: 明确<code>vuex</code>同样遵循单向数据流,组件中不能直接修改仓库的数据</li><li><p>通过<code>strict: true</code>可以开启严格模式</p></li><li><p>辅助函数出现在<code>methods</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改 count 的值</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span> += value;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;addCount&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+20<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><ul><li><p>目标: 明确<code>actions</code>的基本用法,<code>处理异步操作</code></p></li><li><p>需求: 一秒钟之后,修改<code>state</code>的<code>count</code>成<code>999</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;waitCount&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">context, val</span>) &#123;</span><br><span class="line">      context.<span class="property">counter</span> += val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">waitCounter</span>(<span class="params">state, val</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        state.<span class="title function_">commit</span>(<span class="string">&quot;add&quot;</span>, val)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><ul><li><p>由于<code>vuex</code>使用<code>单一状态树</code>,应用的所有状态<code>会集中到一个比较大的对象</code>，当应用变得非常复杂时,<code>store</code>对象就有可能变得相当臃肿</p></li><li><p>模块拆分:<code>store/modules/xxx.js</code></p></li><li><p>在<code>index.js</code>中的<code>modules</code>中使用</p><ul><li><p><code>user</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>setting</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 user 模块</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="comment">// 导入 setting 模块</span></span><br><span class="line"><span class="keyword">import</span> setting <span class="keyword">from</span> <span class="string">&#x27;./modules/setting&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">waitCounter</span>(<span class="params">context, val</span>) &#123;</span><br><span class="line">      context.<span class="property">counter</span> += val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">waitCounter</span>(<span class="params">state, val</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        state.<span class="title function_">commit</span>(<span class="string">&quot;waitCounter&quot;</span>, val)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 模块</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    user,</span><br><span class="line">    setting</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/014e8037763f4074a773604304c4d45f.png" alt=""></p><ul><li><p>使用模块中的数据</p><ol><li><p>直接通过<code>模块名访问 $store.state.模块名.xxx</code></p></li><li><p>通过<code>mapState</code>映射</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>子模块的映射<code>mapState(&#39;模块名&#39;,[&#39;xxx&#39;])</code>-需要开启命名空间(<code>namespaced:true</code>)</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;coder-itl&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 开启命名空间</span></span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><ul><li><p>创建项目</p></li><li><p>分模块构建<code>vuex</code></p></li><li><p><code>store/modules/car.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于<code>json-server</code>工具,准备后端接口服务环境</p><ul><li><p>安装全局工具<code>json-server</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">global add json-server </span></span><br></pre></td></tr></table></figure></li><li><p>代码根目录新建一个<code>db</code>目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cart&quot;</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">10001,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;嘻嘻嘻&quot;,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span>: <span class="string">128,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span>: <span class="string">1,</span></span><br><span class="line">            <span class="attr">&quot;thumb&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">10002,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;哈哈哈&quot;,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span>: <span class="string">228,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span>: <span class="string">10,</span></span><br><span class="line">            <span class="attr">&quot;thumb&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>进入<code>db</code>目录,执行命令,启动后端接口服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server --watch index.<span class="property">json</span></span><br></pre></td></tr></table></figure></li><li><p>访问接口测试</p><p><img src="https://img-blog.csdnimg.cn/direct/59866172ef5d47819face11a9e73b8f7.png" alt=""></p></li></ul></li><li><p>发送异步请求,获取数据,存储到<code>vuex</code>，映射渲染</p><ul><li><p>安装<code>axios</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add axios</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>actions</code>中发送异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">list</span>: [] <span class="comment">// 购物车数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">updateList</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">list</span> = payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="comment">// 发送异步请求</span></span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">getCarList</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/cart&#x27;</span>)</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;updateList&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>页面调用<code>actions</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用 car模块下的 list =&gt; 页面渲染数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;car&#x27;</span>, [<span class="string">&#x27;list&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 调用 actions，通过 mutaions 向 state 传递数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;car/getCarList&#x27;</span>, [<span class="string">&#x27;list&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d134a3c5dcb94d99a2cea3b9065a6ca3.png" alt=""></p></li></ul></li></ul><ul><li>修改<code>state</code>的数据</li></ul><h4 id="电商完整流程"><a href="#电商完整流程" class="headerlink" title="电商完整流程"></a>电商完整流程</h4><ul><li><p>流程图</p><p><img src="https://img-blog.csdnimg.cn/direct/b7bb70382be34713bc3e2981648af815.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见问题总结</title>
      <link href="/2023/12/05/ad86da8d/"/>
      <url>/2023/12/05/ad86da8d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java POI读写Excel文档</title>
      <link href="/2023/12/05/835be2bb/"/>
      <url>/2023/12/05/835be2bb/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Java-POI读写Excel文档"><a href="#Java-POI读写Excel文档" class="headerlink" title="Java POI读写Excel文档"></a>Java POI读写Excel文档</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>由<code>apache</code>公司提供</li><li><code>Java</code>编写的免费开源的跨平台的<code>Java API</code></li><li>提供<code>API</code>给<code>Java</code>程序对<code>Microsoft Office</code>格式档案读和写的功能</li></ul><h4 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h4><ul><li><code>HSSF</code>读写<code>Microsoft Excel XLS(2003版本的Excel)</code></li><li><code>XSSF</code>读写<code>Microsoft Excel OOXML XLSX</code></li><li><code>HWPF</code>读写<code>Microsoft Word Doc</code></li><li><code>HSLF</code>提供读写<code>Microsoft PowerPoint</code></li></ul><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><ul><li><p>创建<code>maven</code>项目</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><ul><li><p>理解</p><p><img src="https://img-blog.csdnimg.cn/direct/25203a04c8814032a92f5442f0e6622d.png" alt=""></p></li><li><p>从<code>Excel</code>文件读取数据</p><ul><li><p>创建工作簿</p></li><li><p>获取工作表</p></li><li><p>遍历工作表获得对象</p></li><li><p>遍历对象获取单元格对象</p></li><li><p>获得单元格中的值</p><blockquote><p>注意: 被读取的文件是要被<code>关闭的</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 读取2007版本以上Excel的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 9:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.poi.XLSXDemo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readXLSX</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\hello.xlsx&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">// 创建工作簿</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(fs);</span><br><span class="line">        <span class="comment">// 获取工作表(根据工作表名称获取)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">getSheetByName</span> <span class="operator">=</span> xssfWorkbook.getSheetIndex(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取工作表(根据索引获取,索引从 0 开始)</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">getSheetByIndex</span> <span class="operator">=</span> xssfWorkbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 从工作表中获取每一行</span></span><br><span class="line">        <span class="keyword">for</span> (Row row : getSheetByIndex) &#123;</span><br><span class="line">            <span class="comment">// 在每一行中获取每一个单元格</span></span><br><span class="line">            <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line">                <span class="comment">// 获取单元格中的内容</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">stringCellValue</span> <span class="operator">=</span> cell.getStringCellValue();</span><br><span class="line">                System.out.println(stringCellValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        xssfWorkbook.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 读取2007版本以上Excel的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 9:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.poi.XLSXDemo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XLSXDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readXLSX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\hello.xlsx&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">// 创建工作簿</span></span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(fs);</span><br><span class="line">            <span class="comment">// 获取工作表(根据工作表名称获取)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">getSheetByName</span> <span class="operator">=</span> xssfWorkbook.getSheetIndex(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取工作表(根据索引获取,索引从 0 开始)</span></span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">getSheetByIndex</span> <span class="operator">=</span> xssfWorkbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开始索引: 0,结束索引: 最后一行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> getSheetByIndex.getLastRowNum();</span><br><span class="line">            <span class="comment">// 遍历的次数的确定</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">                <span class="comment">// 获取行</span></span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> getSheetByIndex.getRow(i);</span><br><span class="line">                <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取单元格</span></span><br><span class="line">                    <span class="type">short</span> <span class="variable">lastCellNum</span> <span class="operator">=</span> row.getLastCellNum();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= lastCellNum; j++) &#123;</span><br><span class="line">                        <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(j);</span><br><span class="line">                        <span class="comment">// 单元格不为空的时候,获取他的值</span></span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 单元格的值</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">stringCellValue</span> <span class="operator">=</span> cell.getStringCellValue();</span><br><span class="line">                            System.out.println(stringCellValue);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            xssfWorkbook.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>向<code>Excel</code>中写入文件</p><ul><li><p>创建一个<code>Excel</code>文件</p></li><li><p>创建工作表</p></li><li><p>创建行</p></li><li><p>创建单元格赋值</p></li><li><p>通过输出流将对象下载到磁盘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeToXLSX</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建工作簿</span></span><br><span class="line">    <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">    <span class="comment">// 2. 根据工作簿对象创建工作表</span></span><br><span class="line">    <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> xssfWorkbook.createSheet(<span class="string">&quot;工作表&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 根据工作表创建行</span></span><br><span class="line">    <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 4. 根据行创建列,并写入数据</span></span><br><span class="line">    row.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;测试纸1&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;测试纸2&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;测试纸3&quot;</span>);</span><br><span class="line">    <span class="comment">// 输出流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\aa.xlsx&quot;</span>);</span><br><span class="line">        xssfWorkbook.write(os);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">        xssfWorkbook.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h4><ul><li><p>读取<code>Excel</code>数据到数据库</p></li><li><p>将数据库数据写入到<code>Excel</code></p></li><li><p>准备测试数据模型</p><p><img src="https://img-blog.csdnimg.cn/direct/5b4978f8bf064d4db5f26e0b18047aa3.png" alt=""></p></li></ul><ul><li><p>创建实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 产品表实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 11:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.entity.Product</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer pstock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mapper</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- int batchSave(Product product); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchSave&quot;</span>&gt;</span></span><br><span class="line">        insert into product</span><br><span class="line">        values (#&#123;pid&#125;, #&#123;pname&#125;, #&#123;price&#125;, #&#123;pstock&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- List&lt;Product&gt; findAll();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from product</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 12:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.service.impl.PrProductServiceImpl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.example.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> com.example.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveXLSX</span><span class="params">(List&lt;Product&gt; products)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">connection</span> <span class="operator">=</span> MybatisUtils.getConnection();</span><br><span class="line">        <span class="type">ProductMapper</span> <span class="variable">productMapper</span> <span class="operator">=</span> connection.getMapper(ProductMapper.class);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">            i = productMapper.batchSave(product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">connection</span> <span class="operator">=</span> MybatisUtils.getConnection();</span><br><span class="line">        <span class="type">ProductMapper</span> <span class="variable">productMapper</span> <span class="operator">=</span> connection.getMapper(ProductMapper.class);</span><br><span class="line">        <span class="keyword">return</span> productMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mybatis</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Mybatis的工具包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 11:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.utils.MybatisUtils</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 作者：coder-itl</span></span><br><span class="line"><span class="comment"> * 描述：用户交互程序</span></span><br><span class="line"><span class="comment"> * 创建日期：2023/12/5 11:37</span></span><br><span class="line"><span class="comment"> * 实体：com.example.web.Show</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.example.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.example.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> com.example.service.impl.PrProductServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Show</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 ProductService 实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ProductService</span> <span class="variable">productService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrProductServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个用于读取用户输入的 Scanner 对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提示用户选择功能</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请选择你要执行的功能[1.导入,2:导出]: &quot;</span>);</span><br><span class="line">        <span class="comment">// 获取用户输入的选择</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">select</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 导入功能</span></span><br><span class="line">            <span class="comment">// 1.1 读取 Excel 文件内容</span></span><br><span class="line">            <span class="comment">// 1.2 将读取到的数据写入到数据库</span></span><br><span class="line">            <span class="comment">// 调用 readXLSX 方法读取 Excel 文件内容</span></span><br><span class="line">            System.out.print(<span class="string">&quot;请输入文件的位置: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            List&lt;Product&gt; products = readXLSX(path);</span><br><span class="line">            <span class="comment">// 打印读取到的数据</span></span><br><span class="line">            printList(products);</span><br><span class="line">            <span class="comment">// TODO 将数据写入到数据库中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">isSave</span> <span class="operator">=</span> productService.saveXLSX(products);</span><br><span class="line">            <span class="keyword">if</span> (isSave &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据已经存储到数据库中....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 导出功能</span></span><br><span class="line">            <span class="comment">// 读取数据库中的内容</span></span><br><span class="line">            List&lt;Product&gt; productList = productService.findAll();</span><br><span class="line">            System.out.println(productList);</span><br><span class="line">            <span class="comment">// 写入到 Excel 文件中</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 添加导出功能的实现</span></span><br><span class="line">            System.out.print(<span class="string">&quot;请输入要写入的文件的位置: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            writeToXSLX(productList, path);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据已经写入完毕,文件位置在: &quot;</span> + path);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 选择无效，提示重新启动</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请重新启动!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将产品列表写入到 Excel 文件中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToXSLX</span><span class="params">(List&lt;Product&gt; productList, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="comment">// 如果文件不存在，则创建文件</span></span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> xssfWorkbook.createSheet(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建行</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>); <span class="comment">// 表头行</span></span><br><span class="line">            <span class="comment">// 列</span></span><br><span class="line">            row.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;商品编号&quot;</span>); <span class="comment">// 第一列</span></span><br><span class="line">            row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;商品名称&quot;</span>); <span class="comment">// 第二列</span></span><br><span class="line">            row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;商品价格(单位:元/斤)&quot;</span>); <span class="comment">// 第三列</span></span><br><span class="line">            row.createCell(<span class="number">3</span>).setCellValue(<span class="string">&quot;商品库存(单位:吨)&quot;</span>); <span class="comment">// 第四列</span></span><br><span class="line">            <span class="comment">// 从第二行开始,填充数据库读取到的数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; productList.size(); i++) &#123;</span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">writeDbRow</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                writeDbRow.createCell(<span class="number">0</span>).setCellValue(productList.get(i).getPid());</span><br><span class="line">                writeDbRow.createCell(<span class="number">1</span>).setCellValue(productList.get(i).getPname());</span><br><span class="line">                writeDbRow.createCell(<span class="number">2</span>).setCellValue(productList.get(i).getPrice());</span><br><span class="line">                writeDbRow.createCell(<span class="number">3</span>).setCellValue(productList.get(i).getPstock());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过输出流写出到磁盘中</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            xssfWorkbook.write(os);</span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">            xssfWorkbook.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印产品列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(List&lt;Product&gt; products)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取Excel表格数据中..............&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历产品列表并打印每个产品的信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; products.size(); i++) &#123;</span><br><span class="line">            System.out.println(products.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取结束..............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 Excel 文件中读取数据并返回产品列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Product&gt; <span class="title function_">readXLSX</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        List&lt;Product&gt; productList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Excel 文件位置</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">            <span class="comment">// 获取工作簿</span></span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(fs);</span><br><span class="line">            <span class="comment">// 获取工作表</span></span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> xssfWorkbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取总行数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">            <span class="comment">// 从第二行开始遍历每一行数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="comment">// 遍历每一列数据</span></span><br><span class="line">                    <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 将列的格式设置为字符串</span></span><br><span class="line">                            cell.setCellType(CellType.STRING);</span><br><span class="line">                            <span class="comment">// 获取单元格的字符串值并添加到列表中</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">stringCellValue</span> <span class="operator">=</span> cell.getStringCellValue();</span><br><span class="line">                            <span class="keyword">if</span> (stringCellValue != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(stringCellValue)) &#123;</span><br><span class="line">                                list.add(stringCellValue);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果列表中有数据，创建 Product 对象并添加到产品列表中</span></span><br><span class="line">                    <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(Integer.valueOf(list.get(<span class="number">0</span>)), list.get(<span class="number">1</span>),</span><br><span class="line">                                Double.parseDouble(list.get(<span class="number">2</span>)), Integer.valueOf(list.get(<span class="number">3</span>)));</span><br><span class="line">                        productList.add(product);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 发生异常时抛出运行时异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回产品列表</span></span><br><span class="line">        <span class="keyword">return</span> productList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b1654f9a7e7b4fbd9ddc7f04b9807a5b.gif" alt=""></p></li></ul><h4 id="服务端的使用"><a href="#服务端的使用" class="headerlink" title="服务端的使用"></a>服务端的使用</h4><ul><li><p>导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> POI-快速导出用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> org.example.excel.ExportUserControllr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.example.result.Result;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.example.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.example.utils.ResponseOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportUserControllr</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.selectAll();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (users != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 导出</span></span><br><span class="line">            writeToXLSX(users, realPath + <span class="string">&quot;/&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(<span class="string">&quot;用户信息成功导出!&quot;</span>, realPath + <span class="string">&quot;/&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">            ResponseOutput.output(resp, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeToXLSX</span><span class="params">(List&lt;User&gt; users, String realPath)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> xssfWorkbook.createSheet(<span class="string">&quot;用户信息表&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建表头</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 第一列</span></span><br><span class="line">            row.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;用户编号&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;用户名称&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;用户密码&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">3</span>).setCellValue(<span class="string">&quot;用户邮箱&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">4</span>).setCellValue(<span class="string">&quot;用户住址&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">5</span>).setCellValue(<span class="string">&quot;用户手机号&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">6</span>).setCellValue(<span class="string">&quot;用户昵称&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">7</span>).setCellValue(<span class="string">&quot;用户角色(1:管理员,2:买家,3:卖家)&quot;</span>);</span><br><span class="line">            row.createCell(<span class="number">8</span>).setCellValue(<span class="string">&quot;是否删除(1:删除,0:未删除)&quot;</span>);</span><br><span class="line">            <span class="comment">// 从第二行开始,填充数据库查询到的数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">dbDataRow</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>); <span class="comment">// 第二行开始填充数据库查询到的数据</span></span><br><span class="line">                dbDataRow.createCell(<span class="number">0</span>).setCellValue(users.get(i).getId());</span><br><span class="line">                dbDataRow.createCell(<span class="number">1</span>).setCellValue(users.get(i).getUsername());</span><br><span class="line">                dbDataRow.createCell(<span class="number">2</span>).setCellValue(users.get(i).getPassword());</span><br><span class="line">                dbDataRow.createCell(<span class="number">3</span>).setCellValue(users.get(i).getEmail());</span><br><span class="line">                dbDataRow.createCell(<span class="number">4</span>).setCellValue(users.get(i).getAddress());</span><br><span class="line">                dbDataRow.createCell(<span class="number">5</span>).setCellValue(users.get(i).getPhone());</span><br><span class="line">                dbDataRow.createCell(<span class="number">6</span>).setCellValue(users.get(i).getNickname());</span><br><span class="line">                dbDataRow.createCell(<span class="number">7</span>).setCellValue(users.get(i).getRole());</span><br><span class="line">                dbDataRow.createCell(<span class="number">8</span>).setCellValue(users.get(i).getDeleted());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">            <span class="comment">// 在此路径中存在就删除这个文件</span></span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            xssfWorkbook.write(os);</span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">            xssfWorkbook.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 将Excel数据导入到数据库持久化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 16:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> org.example.excel.ImportUserController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.example.result.Result;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.example.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.example.utils.ResponseOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/import&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportUserController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应类型 2007+Excel / application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</span></span><br><span class="line">        <span class="comment">// 2003版本: application/vnd.ms-excel</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过 getPart(name) 方法获取 Part 对象 (name代表的是页面中 file 文件域的 name 属性值)</span></span><br><span class="line">        <span class="comment">// TODO 找到磁盘上的Excel文件,把这个文件遍历读取,写入到数据库(要先删除数据库的内容)</span></span><br><span class="line">        <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过 Part 对象,获取上传的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> part.getSubmittedFileName();</span><br><span class="line">        <span class="comment">// 获取上传文件需要的路径(得到项目存放的真实路径)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到 file 文件输入流</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath + fileName);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将文件上传到指定位置</span></span><br><span class="line">        <span class="comment">// part.write(realPath + fileName);</span></span><br><span class="line">        List&lt;User&gt; userList = readExcelToDb(inputStream);</span><br><span class="line">        <span class="comment">// 写入数据库</span></span><br><span class="line">        <span class="comment">// TODO 先查询数据库中是否存在数据,存在的化清空表</span></span><br><span class="line">        List&lt;User&gt; hasData = userService.selectAll();</span><br><span class="line">        <span class="keyword">if</span> (hasData != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 存在数据 执行删除表的数据操作【不能进行的操作】</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">isDelete</span> <span class="operator">=</span> userService.deleteAllInfo();</span><br><span class="line">            <span class="keyword">if</span> (isDelete &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 数据已经被删除了,可以执行插入操作</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">batchsave</span> <span class="operator">=</span> userService.batchSave(userList);</span><br><span class="line">                <span class="keyword">if</span> (batchsave &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(<span class="string">&quot;Excel数据导入成功！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    ResponseOutput.output(resp, result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 数据表原来是空的,直接插入本次读取到的 Excel 数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">batchsave</span> <span class="operator">=</span> userService.batchSave(userList);</span><br><span class="line">            <span class="keyword">if</span> (batchsave &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(<span class="string">&quot;Excel数据导入成功！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                ResponseOutput.output(resp, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title function_">readExcelToDb</span><span class="params">(FileInputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="comment">// 将添加到 user 对象中的数据,也就是每一个 user 对象放到集合中</span></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取工作簿</span></span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">xssfWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(inputStream);</span><br><span class="line">            <span class="comment">// 获取工作表</span></span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> xssfWorkbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// sheet表的总行数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">            <span class="comment">// 1: 标题行不需要(表头不需要)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">                <span class="comment">// 行</span></span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// list: 做的事是将数据放到 user 对象中</span></span><br><span class="line">                    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="comment">// 遍历每一列的数据</span></span><br><span class="line">                    <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// TODO 将列的格式设置为字符串</span></span><br><span class="line">                            cell.setCellType(CellType.STRING);</span><br><span class="line">                            <span class="comment">// 获取单元格的字符串值并添加到列表中</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">stringCellValue</span> <span class="operator">=</span> cell.getStringCellValue(); <span class="comment">// TODO 1.0</span></span><br><span class="line">                            <span class="keyword">if</span> (stringCellValue != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(stringCellValue)) &#123;</span><br><span class="line">                                list.add(stringCellValue);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果列表中有数据，创建 user 对象并添加到产品列表中</span></span><br><span class="line">                    <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(list.get(<span class="number">0</span>) + <span class="string">&quot;\t&quot;</span> + list.get(<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span> + list.get(<span class="number">2</span>));</span><br><span class="line">                        <span class="comment">// 一行数据添加到了 user 实体中</span></span><br><span class="line">                        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                                Integer.valueOf(list.get(<span class="number">0</span>)), <span class="comment">// id</span></span><br><span class="line">                                list.get(<span class="number">1</span>), <span class="comment">// username</span></span><br><span class="line">                                list.get(<span class="number">2</span>), <span class="comment">// password</span></span><br><span class="line">                                list.get(<span class="number">3</span>), <span class="comment">// email</span></span><br><span class="line">                                list.get(<span class="number">4</span>), <span class="comment">// address</span></span><br><span class="line">                                list.get(<span class="number">5</span>), <span class="comment">// phone</span></span><br><span class="line">                                list.get(<span class="number">6</span>), <span class="comment">// nicknae</span></span><br><span class="line">                                Integer.valueOf(list.get(<span class="number">7</span>)), <span class="comment">// role</span></span><br><span class="line">                                Integer.valueOf(list.get(<span class="number">8</span>))  <span class="comment">// deleted</span></span><br><span class="line">                        );</span><br><span class="line">                        <span class="comment">// user 放到集合中</span></span><br><span class="line">                        userList.add(user);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>错误总结</p><blockquote><p><code>String stringCellValue = cell.getStringCellValue(); // TODO 1.0</code>会讲<code>Excel</code>内的数据读取为<code>1.0</code>的问题,等待解决</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>全屏显示功能</title>
      <link href="/2023/12/04/4b595170/"/>
      <url>/2023/12/04/4b595170/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="全屏显示功能"><a href="#全屏显示功能" class="headerlink" title="全屏显示功能"></a>全屏显示功能</h3><h4 id="screenfull"><a href="#screenfull" class="headerlink" title="screenfull"></a>screenfull</h4><ul><li><p>依赖下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add screenfull --save-dev</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 全屏的字体图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-quanping&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> screenfull <span class="keyword">from</span> <span class="string">&quot;screenfull&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 默认非全屏</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isFullscreen</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!screenfull.<span class="property">isEnabled</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&quot;你的浏览器不支持全屏&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 切换全屏状态</span></span></span><br><span class="line"><span class="language-javascript">      screenfull.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听全屏状态的变化，更新 isFullscreen 属性</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isFullscreen</span> = screenfull.<span class="property">isFullscreen</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (screenfull.<span class="property">isEnabled</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// 在全屏状态变化时触发 change 方法</span></span></span><br><span class="line"><span class="language-javascript">        screenfull.<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, <span class="variable language_">this</span>.<span class="property">change</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 在组件挂载时初始化全屏功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">destory</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (screenfull.<span class="property">isEnabled</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 在组件销毁时解绑全屏状态变化事件</span></span></span><br><span class="line"><span class="language-javascript">      screenfull.<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, <span class="variable language_">this</span>.<span class="property">change</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://img-blog.csdnimg.cn/direct/c02e4034985f4e378963a86878cd0c1b.gif" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门到实战</title>
      <link href="/2023/12/02/72385093/"/>
      <url>/2023/12/02/72385093/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Vue2入门到实战"><a href="#Vue2入门到实战" class="headerlink" title="Vue2入门到实战"></a>Vue2入门到实战</h3><h4 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h4><ul><li><p>概念</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p><code>Vue</code>是一个用于<code>构建用户界面</code>的<code>渐进式框架</code></p></div></li></ul><h4 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h4><ul><li><p>创建<code>Vue</code>实例</p><ul><li><p>准备容器(<code>Vue</code>所管理的范围)</p></li><li><p>引包(开发版本包/生产版本包)官网</p></li><li><p>创建实例</p></li><li><p>添加配置项=&gt;完成渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- el指定挂载点,选择指定控制的是那个盒子 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- data 提供数据 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    msg: &quot;hello vue&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h4><ul><li><p>插值语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能: 用于解析标签体内容</span><br><span class="line">写法: &#123;&#123; xxx &#125;&#125;,xxx是 js 表达式,且可以直接读取到 data 中的所有属性</span><br></pre></td></tr></table></figure></li><li><p>指令语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">功能: 用于解析标签(包括: 标签属性，标签体内容，绑定事件)</span><br></pre></td></tr></table></figure></li></ul><h4 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h4><ul><li><p>插值表达式</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>插值表达式是一种<code>Vue</code>的模板语法</p></div></li><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>利用表达式进行插值,渲染到页面中</p><p>表达式: 是可以被求值的代码,<code>JS</code>引擎会将其计算出一个结果</p></div></li><li><p>表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span> &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ul><li>使用的数据必须存在于<code>data</code>中</li><li>支持的是表达式,而非语句</li><li>不能在<code>标签</code>属性中使用<code>&#123;&#123;&#125;&#125;</code>插值</li></ul></li></ul><h4 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h4><ul><li><p>响应式: 数据变化,视图跟着变化</p><p><img src="https://img-blog.csdnimg.cn/direct/9eefe8b2a2c04dd6811b4b64db348558.png" alt=""></p></li></ul><h4 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h4><ul><li><p>指令</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>指令: 带有<code>v-前缀</code>的特殊<code>标签属性</code></p></div></li><li><p><code>v-html</code></p></li><li><p><code>v-show 和 v-if</code></p><ul><li><code>v-show</code><ul><li>作用: 控制元素的显示与隐藏</li><li>语法<code>v-show=&#39;表达式&#39;</code>,表达式值为<code>true</code>显示,反之隐藏</li><li>原理: 切换<code>display: none</code>控制显示隐藏</li><li>场景: 频繁切换显示隐藏的场景</li></ul></li><li><code>v-if</code><ul><li>作用: 控制元素显示隐藏(<code>条件渲染</code>)</li><li>语法: <code>v-if=&#39;表达式&#39;</code>,表达式值<code>true</code>显示,反之隐藏</li><li>原理: 基于<code>条件判断</code>,是否<code>创建</code>或<code>移除</code>元素节点</li><li>场景: 要么显示,要么隐藏,不频繁切换的场景</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/09abc95ba3d746de85e15d11c5ff200d.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解析标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-if &amp; v-show --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span> 我是 v-show 控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span> 我是 v-if 控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;&lt;h3&gt;hello vue&lt;/h3&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>v-else和v-else-if</code></p><ul><li>作用: 辅助<code>v-if</code>进行判断渲染</li><li>语法:<code>v-else  v-else-if=&#39;表达式&#39;</code></li><li>注意: 需要紧挨着<code>v-if</code>一起使用</li></ul></li><li><p><code>v-on</code></p><ul><li><p>作用: 注册事件=<code>添加监听 + 提供处理逻辑</code></p></li><li><p>语法</p><ul><li><p><code>v-on:事件名=&#39;内联语句&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;count++&#x27;</span>&gt;</span>点击自增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-on:事件名=&#39;methods中的函数名&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前count的值: &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>点击自增 - 内联语法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>点击自增 - v-on调用 methods中的函数名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击自增 - @语法糖调用 methods中的函数名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">0</span> <span class="comment">// 初始值为 0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// es5</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// es6 语法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>简写<code>(语法糖) @事件名=&#39;methods中的函数名&#39;</code></p><p><img src="https://img-blog.csdnimg.cn/direct/134b7f5604ea4c12945eb6b9fe49155e.gif" alt=""></p></li><li><p><code>v-on</code>调用传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        当前 count 的值: &#123;&#123;count&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(5)&quot;</span>&gt;</span>传递的参数为 5 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(15);&quot;</span>&gt;</span>传递的参数为 15 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">0</span> <span class="comment">// 初始值为 0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// es5</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params">range</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += range;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c5eadc2210ee498b8abba0d82a4bc0bc.gif" alt=""></p></li></ul></li><li><p><code>v-bind</code></p><ul><li><p>作用：动态的设置<code>html</code>的<code>标签属性</code></p></li><li><p>语法:<code>v-bind:属性名=&quot;表达式&quot;</code></p></li><li><p>简写:<code>:属性名=&#39;表达式&#39;</code></p></li><li><p>练习:切换图片显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;list[index]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;index++&quot;</span>&gt;</span>点击切换图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">index</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [<span class="string">&#x27;./img/1.png&#x27;</span>,<span class="string">&#x27;./img/2.png&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>v-for</code></p><ul><li><p>作用: 基于数据循环,多次渲染整个数据</p></li><li><p>语法<code>v-for=&#39;(item,index) in 数组&#39;</code></p><ul><li><code>item</code>: 每一项</li><li><code>index</code>: 下标</li></ul></li><li><p>案例练习</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.bookName&#125;&#125; -</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeBook(item.id)&quot;</span>&gt;</span> 删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">bookName</span>: <span class="string">&quot;红楼梦&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">bookName</span>: <span class="string">&quot;西游记&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">bookName</span>: <span class="string">&quot;三国演义&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">bookName</span>: <span class="string">&quot;水浒传&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">removeBook</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 数组的删除语法 splice</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过 id 进行删除数组中的对应项 =&gt; filter(不会改变原数组)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// filter: 根据条件,保留满足条件的对应项,得到一个新数组</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-for</code>中的<code>key</code></p><ul><li><p>作用: <code>key属性=&#39;唯一标识&#39;</code></p></li><li><p>语法: 给列表项添加<code>唯一标识</code>,便于<code>vue</code>进行列表项的<code>正确排序复用</code></p></li><li><p>关于<code>唯一标识和索引的选择</code></p><ul><li><p>索引</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.bookName&#125;&#125; -</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addBook&quot;</span>&gt;</span>添加一本书<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">bookName</span>: <span class="string">&quot;红楼梦&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">bookName</span>: <span class="string">&quot;西游记&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">bookName</span>: <span class="string">&quot;三国演义&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">bookName</span>: <span class="string">&quot;水浒传&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addBook</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dianji1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> book = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookName</span>: <span class="string">&quot;Java入门到精通&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(book);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/98b3fca74a5b4256975df4c8a90be7ce.png" alt="索引带来的问题"></p></li><li><p>唯一标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.bookName&#125;&#125; -</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addBook&quot;</span>&gt;</span>添加一本书<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">bookName</span>: <span class="string">&quot;红楼梦&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">bookName</span>: <span class="string">&quot;西游记&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">bookName</span>: <span class="string">&quot;三国演义&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">bookName</span>: <span class="string">&quot;水浒传&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addBook</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dianji1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> book = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookName</span>: <span class="string">&quot;Java入门到精通&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(book);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4060fb4b10ac4e359f186e607fe00a4c.gif" alt=""></p></li></ul></li></ul></li><li><p><code>key</code>的原理</p><ul><li><p>作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>key</code>是虚拟<code>DOM</code>对象的标识,当状态中的数据发生变化时,<code>Vue</code>会根据【新数据】生成【新的虚拟<code>DOM</code>】,随后<code>Vue</code>进行【新虚拟<code>DOM</code>】与【旧虚拟<code>DOM</code>】的差异比较,比较规则如下</p></div></li><li><p>对比规则</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li>旧虚拟<code>DOM</code>中找到了与新虚拟<code>DOM</code>相同的<code>key</code>：<ul><li>若虚拟<code>DOM</code>中内容没变,将直接使用之前的真实<code>DOM</code></li><li>若虚拟<code>DOM</code>中内容变了,则生成新的真实<code>DOM</code>，随后替换掉页面中之前的真实<code>DOM</code></li></ul></li><li>旧虚拟<code>DOM</code>中未找到与新虚拟<code>DOM</code>相同的<code>key</code><ul><li>创建新的真实<code>DOM</code>，随后渲染到页面</li></ul></li></ol></div><p><img src="https://img-blog.csdnimg.cn/direct/257225de1dc4424b814df39c037f4556.png" alt=""></p></li><li><p>用<code>index</code>作为<code>key</code>可能会引发的问题</p><ul><li>若对数据进行:<code>逆序</code>添加,<code>逆序</code>删除等破坏顺序的操作：<code>会产生没有必要的真实DOM更新(效率没有在界面上体现)</code></li><li>如果结构中还包含输入类的<code>DMO</code>:会产生错误的<code>DOM</code>更新</li></ul></li><li><p>开发中如何选择<code>key</code></p><ul><li>最好使用每条数据的唯一标识作为<code>key</code></li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示,使用<code>index</code>作为<code>key</code>是没有问题的</li></ul></li></ul></li></ul></li><li><p><code>v-model</code></p><ul><li>作用: 给表单元素使用,双向数据绑定,可以快速获取或设置表单元素内容</li><li>语法: <code>v-model=&#39;变量&#39;</code></li></ul></li></ul><h4 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h4><ul><li>按键修饰符<ul><li><code>@keyup.enter =&gt;</code>键盘回车监听</li></ul></li><li><code>v-model</code>修饰符<ul><li><code>v-model.trim =&gt;</code>去除首尾空格</li><li><code>v-model.number =&gt;</code>转数字</li></ul></li><li>事件修饰符<ul><li><code>@事件名.stop =&gt;</code>防止冒泡</li><li><code>@事件名.prevent =&gt;</code> 阻止默认行为</li></ul></li></ul><h4 id="动态修改类样式"><a href="#动态修改类样式" class="headerlink" title="动态修改类样式"></a>动态修改类样式</h4><ul><li><p>语法:<code>:class=&quot;对象/数组&quot;</code>，对象，对象的键就是类名,值是布尔值,如果值为<code>true</code>，有这个类,否则就没有这个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.isActive</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;isActive:isShow&#125;&quot;</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeClass&quot;</span>&gt;</span>动态修改类样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeClass</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/568b0efb30344207a347d42b489fcc43.gif" alt=""></p></li></ul><h4 id="V-model应用于其他表单元素"><a href="#V-model应用于其他表单元素" class="headerlink" title="V-model应用于其他表单元素"></a>V-model应用于其他表单元素</h4><ul><li><p>输入框<code>v-model=&quot;字符串变量&quot;</code></p></li><li><p>文本域<code>v-model=&quot;字符串变量&quot;</code></p></li><li><p>复选框<code>v-model=&quot;布尔值变量&quot;</code></p></li><li><p>单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: 给单选框加上 name 属性,可以分组,同一组互相会互斥</span><br><span class="line">value: 给单选框加上 value 属性,用于提交给后台的数据</span><br></pre></td></tr></table></figure></li><li><p>下拉菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. option 需要设置 value 的值,提交给后台</span><br><span class="line">2. select 的 value 值,关联了选中的 option 的 value 值</span><br></pre></td></tr></table></figure></li><li><p>详细说明</p><ul><li>若<code>&lt;input type=&#39;text&#39;/&gt;</code>则<code>v-model</code>收集的是<code>value</code>值,用户输入的就是<code>value</code>值</li><li>若<code>&lt;input type=&#39;radio&#39; /&gt;</code>则<code>v-model</code>收集的就是<code>value</code>值,且要给标签配置<code>value</code>值</li><li>若<code>&lt;input type=&#39;checkbox&#39;&gt;</code><ul><li>没有配置<code>input</code>的<code>value</code>属性,那么收集的就是<code>checked(勾选 or 未勾选,是布尔值)</code></li><li>配置了<code>input</code>的<code>value</code>属性<ul><li><code>v-model</code>的初始值是非数组,那么收集的就是<code>checked</code>,那么收集的就是<code>checked(勾选 or 未勾选,是布尔值)</code></li><li><code>v-model</code>的初始值是数组,那么收集的就是<code>value</code>组成的数组</li></ul></li></ul></li></ul></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><ul><li>概念: 基于<code>现有数据</code>,计算出来的<code>新属性</code>,<code>依赖</code>的数据变化,<code>自动</code>重新计算</li><li>原理: 底层借助了<code>Object.defineproperty</code>方法提供的<code>getter和setter</code></li><li><code>getter</code>函数什么时候执行<ul><li>初次读取时会执行一次</li><li>当依赖的数据发生改变时会被再次调用</li></ul></li><li><p>优势: 与<code>methods</code>实现相比,内部有缓存机制(<code>可以复用</code>)效率更高,调试方便</p></li><li><p>语法</p><ul><li><p>声明在<code>computed</code>配置项中,一个计算属性对用一个函数</p></li><li><p>使用起来和普通属性一样使用<code>&#123;&#123; 计算属性名 &#125;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    计算属性名() &#123;</span><br><span class="line">        基于现有数据, 编写相关逻辑;</span><br><span class="line">        return 结果;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>备注</p><ul><li>计算属性最终会出现在<code>vm</code>上,直接读取使用即可</li><li>如果计算属性要被修改,那必须写<code>set</code>函数去响应修改，且<code>set</code>中要引起计算时依赖的数据发生改变</li></ul></li></ul></li></ul><h4 id="计算属性和Methods区别"><a href="#计算属性和Methods区别" class="headerlink" title="计算属性和Methods区别"></a>计算属性和Methods区别</h4><ul><li><p>计算属性</p><ul><li><p>作用: 封装了一段对于<code>数据的处理</code>,求得一个<code>结果</code></p></li><li><p>语法</p><ul><li>写在<code>computed</code>配置项中</li><li>作为属性,直接使用<code>=&gt; this.计算属性  &#123;&#123;计算属性&#125;&#125;</code></li></ul></li><li><p>缓存特性(提升性能)</p><blockquote><p>计算属性会对计算出来的<code>结果缓存</code>,再次使用直接读取缓存,依赖项变化了,会<code>自动</code>重新计算,并再次缓存</p></blockquote></li></ul></li><li><p><code>methods</code></p><ul><li>作用: 给实例提供一个<code>方法</code>,调用以处理<code>业务逻辑</code></li><li>语法<ul><li>写在<code>methods</code>配置项中</li><li>作为方法,需要调用</li></ul></li></ul></li></ul><h4 id="成绩案例"><a href="#成绩案例" class="headerlink" title="成绩案例"></a>成绩案例</h4><ul><li><p><code>v-bind</code></p></li><li><p><code>v-model</code></p></li><li><p><code>computed</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: flex-start;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.add-info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.add-info</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in stuInfo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.project&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.score&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                总分: &#123;&#123;totalScore&#125;&#125;</span><br><span class="line">                平均分: &#123;&#123;avgScore&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;addInfo.project&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;addInfo.score&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStuInfo&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">stuInfo</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">project</span>: <span class="string">&quot;语文&quot;</span>, <span class="attr">score</span>: <span class="number">46</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">project</span>: <span class="string">&quot;英语&quot;</span>, <span class="attr">score</span>: <span class="number">80</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">project</span>: <span class="string">&quot;数学&quot;</span>, <span class="attr">score</span>: <span class="number">100</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">temp</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">addInfo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">project</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">score</span>: <span class="literal">undefined</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">totalScore</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历 stuInfo,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">stuInfo</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">score</span>);</span></span><br><span class="line"><span class="language-javascript">                    total += item.<span class="property">score</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> total;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">avgScore</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果是 NaN,显示 0 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">totalScore</span> / <span class="variable language_">this</span>.<span class="property">stuInfo</span>.<span class="property">length</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>) == <span class="string">&quot;NaN&quot;</span> ? <span class="number">0</span> : <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">totalScore</span> / <span class="variable language_">this</span>.<span class="property">stuInfo</span>.<span class="property">length</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addStuInfo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">stuInfo</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">addInfo</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">remove</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">stuInfo</span> = <span class="variable language_">this</span>.<span class="property">stuInfo</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/a1d335f5712f44bfaa3427e3f4b62e3f.gif" alt=""></p></li></ul><h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><ul><li><p>当被监视的属性变化时,回调函数自动调用,进行相关操作</p></li><li><p>监视的属性必须存在,才能进行监视</p></li><li><p>监视的两种写法</p><ul><li><p>写法一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">word</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">word</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;newValue......&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写发二</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">word</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;word&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa.....&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>深度监视</p><ul><li><code>vue</code>中的<code>watch</code>默认不检测对象内部属性值的改变</li><li>配置<code>deep:true</code>可以检测对象内部值改变</li><li>备注<ul><li><code>Vue</code>自身可以检测对象内部值的改变,但<code>Vue</code>提供的<code>watch</code>默认不可以</li><li>使用<code>watch</code>时根据数据的具体结构,决定是否采用深度监视</li></ul></li></ul></li><li><p>简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">word</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">word</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不允许使用箭头函数,又 this 指向问题</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;word&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>计算属性和<code>watch</code>之间的区别</p><ul><li><code>computed</code>能完成的功能,<code>watch</code>都可以完成</li><li><code>watch</code>能完成的功能,<code>computed</code>不一定能完成,例如:<code>watch</code>可以进行异步操作</li></ul></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><p>详细说明</p><p><img src="https://img-blog.csdnimg.cn/direct/1338bb51258446169c8d48b7662e3bf8.jpeg" alt=""></p></li></ul><h4 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h4><ul><li><p>组件的定义:实现应用中<code>局部</code>功能的<code>代码</code>和<code>资源</code>的<code>集合</code> </p></li><li><p>非单文件组件</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>一个文件中包含有<code>n</code>个组件</p></div></li><li><p>单文件组件</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>一个文件中只包含有<code>1</code>个组件</p></div></li></ul><h4 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h4><ul><li><p>全局安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">global add @vue/cli</span></span><br></pre></td></tr></table></figure></li><li><p>升级</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global upgrade --latest @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>项目创建</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vue</span> <span class="string">create xxx</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">run serve</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h4><ul><li><p><code>props</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件向子组件传递数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&quot;zs&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Son:</span><br><span class="line">props:[&#x27;name&#x27;,&#x27;age&#x27;] <span class="comment">&lt;!-- 子组件中有一个 props 配置项用来接收 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">props的功能: 让组件接受外部传过来的数据</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 传递数据</span><br><span class="line"><span class="number">2.</span> 接收数据:</span><br><span class="line">    第一种方式(只接收): <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    第二种方式(限制类型):</span><br><span class="line">        <span class="attr">props</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    第三种方式(限制类型，限制必要性，指定默认值)</span><br><span class="line">     <span class="attr">props</span>:&#123;</span><br><span class="line">         <span class="attr">name</span>:&#123;</span><br><span class="line">             <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">// 类型</span></span><br><span class="line">             <span class="attr">required</span>: <span class="literal">true</span>, <span class="comment">// 必要性</span></span><br><span class="line">             <span class="attr">default</span>: <span class="string">&#x27;老王&#x27;</span> <span class="comment">// 默认值</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h4><ul><li><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能: 可以把多个组件共用的配置提取成一个混入对象</span><br><span class="line"></span><br><span class="line">使用方式:</span><br><span class="line">  <span class="number">1.</span> 定义混合</span><br><span class="line">  <span class="number">2.</span> 使用混合</span><br><span class="line">      + 全局混入【main.<span class="property">js</span> =&gt; <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(xxx)】</span><br><span class="line">      + 局部混入 【<span class="attr">mixins</span>:[<span class="string">&#x27;xxx&#x27;</span>]】 <span class="comment">// mixins是一个配置项</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能: 用于增强 <span class="title class_">Vue</span></span><br><span class="line">本质: 包含 install 方法的一个对象,install的第一个参数是 vue,第二个以后的参数是插件使用者传递的数据</span><br><span class="line">定义插件:</span><br><span class="line">    对象.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue,options</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h4><ul><li><p>查看<code>webpack</code>的所有版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">view webpack versions</span></span><br></pre></td></tr></table></figure></li><li><p><code>less</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add less-loader@7</span></span><br></pre></td></tr></table></figure></li><li><p><code>scoped</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">作用: 让样式在局部生效,防止冲突</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h4><ul><li><p>组件的自定义事件就是一种组件间的通信方式,适用于<code>子组件向父组件传递数据</code></p></li><li><p>使用场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A是父组件,B是子组件,B想给A传数据，那么就要在A中给B绑定自定义事件(事件的回调在 A 中)</span><br></pre></td></tr></table></figure></li><li><p>绑定自定义事件的方式一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;School v-on:name=&quot;function a()&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">School</span> @<span class="attr">name</span>=<span class="string">&quot;function a()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">a</span>(<span class="params">args</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Schoole</span>&gt;</span> <span class="tag">&lt;/<span class="name">Schoole</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mounted</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;name&#x27;</span>,data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4c64c1b564c3497981cc3ace6e33bddb.png" alt=""></p></li><li><p>方式二</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span> <span class="attr">ref</span>=<span class="string">&quot;functionName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">functionName</span>()&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;自定义事件名&#x27;</span>,<span class="variable language_">this</span>.<span class="property">functionName</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义事件可以添加<code>once</code>修饰符或<code>$once</code>方法,让其只触发一次</p></li><li><p>解绑自定义事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$off(<span class="string">&#x27;自定义事件名&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><ul><li><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 消息订阅与发布</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ 安装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>properties</span><br><span class="line">  yarn add pubsub-js</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;自定义名称&#x27;</span>,回调函数)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;自定义事件名&#x27;</span>,数据)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅(事件解绑 =&gt; beforeDestory 中)</span></span><br><span class="line">pubsub.<span class="property">unsubscribe</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/5d37173274c6458da55b2aac56fdb8de.png" alt=""></p></li></ul><h4 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h4><ul><li>语法:<code>this.$nextTick(回调函数)</code></li><li>作用: 在下一次<code>DOM</code>更新结束后执行其指定的回调</li><li>什么时候用: 当改变数据后,要基于更新后的<code>DOM</code>进行某些操作时,要在<code>nextTick</code>所指定的回调函数中执行</li></ul><h4 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h4><ul><li><p>作用: 在插入、更新或移除<code>DOM</code>元素时,在合适的时候给元素添加样式类名</p></li><li><p>图示</p><p><img src="https://img-blog.csdnimg.cn/direct/bf92320c82104a58bb4bf17e347ad0ec.png" alt=""></p></li><li><p>写法</p><ul><li>准备好样式<ul><li>元素的进入样式<ul><li><code>v-enter</code>进入的起点</li><li><code>v-enter-active</code>离开的过程中</li><li><code>v-enter-to</code>离开的终点</li></ul></li><li>元素的离开样式<ul><li><code>v-leave</code>离开的起点</li><li><code>v-leave-active</code>离开的过程中</li><li><code>v-leave-to</code>: 离开的终点</li></ul></li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过渡的元素,并配置<code>name</code>属性</li><li>备注: 若有多个元素需要过渡,则需要使用<code>&lt;transition-group&gt;,且每个元素都要指定 key 的值</code></li></ul></li></ul><h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h4><ul><li><p>理解</p><p><img src="https://img-blog.csdnimg.cn/direct/b5ad9b18a43845479231dc9238141faa.png" alt=""></p></li><li><p>简单配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;target&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// devServer 开启代理服务器,代理服务器的端口将会和 Vue-Cli 启动的端口保持一致</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// /api 是写在发送请求的地方</span></span><br><span class="line">      <span class="string">&quot;^/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 匹配所有以 /api 开头的请求</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:8081&quot;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 默认值为 true</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="attr">changeOrigin</span>: 设置为 <span class="literal">true</span> 时,服务器收到的请求头中的 host 为: <span class="attr">localhost</span>:port【说谎,不告诉真实的端口】</span><br><span class="line"><span class="attr">changeOrigin</span>: 设置为 <span class="literal">false</span> 时,服务器收到的请求头中的 host 为: <span class="attr">localhost</span>:port【不说谎,如实告诉真实的端口】</span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>优点: 可以配置多个代理,且可以灵活的控制请求是否走代理</li><li>缺点: 配置略微繁琐,请求资源时<code>必须加前缀</code></li></ul></li></ul></li></ul><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><ul><li><p>默认插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 传递的一些动态数据 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>具名插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 传递的一些动态数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>作用域插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:xxx</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 组件使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 传递的一些动态数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>Vue</code>中实现集中式状态(<code>数据</code>)管理的一个<code>Vue</code>插件,对<code>Vue</code>应用中多个组件的共享状态进行集中式的管理(<code>读/写</code>),也是一种组件间通信的方式,且适用于任意组件间通信</p></div></li><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue2 只支持 vuex3的版本</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">add vuex@3 --save-dev</span></span><br></pre></td></tr></table></figure></li><li><p>原理图</p><p><img src="https://img-blog.csdnimg.cn/direct/6fed463679d14e159393f6ccb456c055.png" alt=""></p></li><li><p>基础环境搭建</p><ul><li><p>在<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建Vuex中最核心的store</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备 actios 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备 mutations 用于操作数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备 state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">loginId</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并导出 store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中<code>引入 store</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 配置 store </span></span><br><span class="line">  store,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>mapState</code>方法: 用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapState 生成计算属性 -&gt; 对象写法</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助 mapState 生成计算属性 -&gt; 数组写法 sum是直接被调用的变量名称</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mapGetters</code>方法: 用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成计算属性 -&gt; 对象写法</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成计算属性 -&gt; 数组写法 bigSum是直接被调用的函数名称</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>]),    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mapActions</code>方法: 用于帮助我们生成与<code>actions</code>对话的方法,即: 包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 依靠 mapActions 生成 -&gt; 对象写法</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment">// 依靠 mapActions 生成 -&gt; 数组写法， jiaOdd是直接被调用的函数名称</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mapMutations</code>方法: 用于帮助我们生成与<code>mutaions</code>对话的方法,即:包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 依靠 mapActions 生成 -&gt; 对象写法</span></span><br><span class="line">    ...<span class="title function_">mapMutaions</span>(&#123;<span class="attr">increment</span>:<span class="string">&quot;JIA&quot;</span>&#125;)</span><br><span class="line">    <span class="comment">// 依靠 mapActions 生成 -&gt; 数组写法</span></span><br><span class="line">    ...<span class="title function_">mapMutaions</span>([<span class="string">&quot;JIA&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>备注:<code>mapActions</code>与<code>mapMutaions</code>使用时,若需要传递参数需要: 在模板中绑定事件时传递好参数,否则参数是事件对象</p></div></li><li><p>模块化+命名空间</p><ul><li><p>目的: 让代码更好维护,让多种数据分类更加明确</p></li><li><p>开启命名空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">namespaced</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后,组建中读取<code>state</code>数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 自己直接取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span>.<span class="property">xx</span></span><br><span class="line"><span class="comment">// 方式二: 借助 mapState 读取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;xxx&#x27;</span>,[<span class="string">&#x27;属性名&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后,组件中读取<code>getters</code>数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 自己直接取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;xxx/x&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式二: 借助 mapGetters 读取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;xxx&#x27;</span>,[<span class="string">&#x27;xx&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后,组件中调用<code>dispatch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 自己直接调用 dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxx/xx&#x27;</span>,data)</span><br><span class="line"><span class="comment">// 方式二: 借助 mapActions</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;xxx&#x27;</span>,[<span class="string">&#x27;x&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后,组件中调用<code>commit</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 自己直接 commit</span></span><br><span class="line">thhis.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;xxx/xx&#x27;</span>,data)</span><br><span class="line"><span class="comment">// 方式二: 借助 mapMutaions</span></span><br><span class="line">...<span class="title function_">mapMutaions</span>(<span class="string">&#x27;xxx&#x27;</span>,[<span class="string">&#x27;&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><p><code>Vue-Router</code>的理解</p><blockquote><p><code>Vue</code>的一个插件库,专门用来实现<code>SPA</code>应用</p></blockquote></li><li><p><code>SPA</code></p><ul><li>单页<code>web</code>应用</li><li>整个应用只有<code>一个完整的页面</code></li><li>点击页面中的导航链接<code>不会刷新页面</code>,只会做页面的<code>局部刷新</code></li><li>数据需要通过<code>ajax</code>请求获取</li></ul></li><li><p>什么是路由</p><ul><li>一个路由就是一组映射关系</li><li><code>key</code>为路径,<code>value</code>可能是<code>function【后端路由】</code>或<code>component【前端路由】</code></li></ul></li><li><p>路由分类</p><ul><li>后端路由<ul><li><code>value</code>是<code>函数</code>，用于处理客户端提交的请求<code>【java的接口】</code></li><li>工作过程: 服务器收到一个请求时,根据<code>请求路径</code>找到匹配的<code>函数</code>来处理请求,返回响应数据</li></ul></li><li>前端路由<ul><li><code>value</code>是<code>component</code>,用于展示页面内容</li><li>工作过程: 当浏览器的路径改变时,对应的组件就会显示</li></ul></li></ul></li><li><p>路由的<code>query</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&quot;</span>/xxx<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    query:&#123;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由的<code>params</code>参数</p><ul><li><p>配置路由,声明接受<code>params</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/home/:id/:title&quot;</span>, <span class="comment">// 使用占位符声明接受 params 参数</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&quot;</span>xxx<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    params:&#123;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>路由的<code>props</code>配置</p><ul><li><p>作用: 让路由组件更方便的收到参数</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="comment">// 第一种写法: props 值为对象,该对象中所有的 key-value 的组合都会通过 props 传给 Home 组件</span></span><br><span class="line">    <span class="comment">// props:&#123; a: 666&#125;</span></span><br><span class="line">    <span class="comment">// 第二种写法: props 值为布尔值,布尔值为 true,则把路由收到的所有的 paras 参数通过 props 传给 Home 组件</span></span><br><span class="line">    <span class="comment">// props: true</span></span><br><span class="line">    <span class="comment">// 第三种写法: props 值为函数,该函数返回的对象中每一组 key-value都会通过 props 传给 Home组件</span></span><br><span class="line">    <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> <span class="comment">// 传递的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>路由的<code>replace</code>属性</p><ul><li><p>作用: 控制路由跳转时操作浏览器历史记录的模式</p></li><li><p>浏览器的历史记录有两种写入方式</p><ul><li>分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录,<code>replace</code>是替换当前记录.路由跳转时候默认是<code>push</code></li></ul></li><li><p>如何开启<code>replace</code>模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">replace</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编程式路由导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式一: <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/path&quot;</span>)</span><br><span class="line">方式二: </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line"> </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>缓存路由组件</p><ul><li><p>作用: 让不展示的路由组件保持挂载,不被销毁</p></li><li><p>具体编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name 是组件的 name属性的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>路由相关的两个生命周期钩子函数</p><ul><li>作用: 路由组件所独有的两个钩子,用于捕获路由组件的激活状态</li><li>具体名字<ul><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ul></li></ul></li><li><p>路由守卫</p><ul><li>前置路由守卫</li><li>后置路由守卫</li><li>独享路由守卫</li></ul></li><li><p><code>hash</code>和<code>history</code>模式</p><ul><li>对于一个<code>url</code>来说,什么是<code>hash</code>值—<code>#及其后面的内容就是 hash 值</code></li><li><code>hash</code>值不会包含在<code>HTTP</code>请求中,即<code>hash值不会带给服务器</code></li><li><code>hash</code>模式<ul><li>地址中永远带着<code>#</code>号,不美观</li><li>若以后将地址通过第三方手机<code>app</code>分享,若<code>app</code>校验严格,则地址会被标记为不合法</li><li>兼容性较好</li></ul></li><li><code>history</code>模式<ul><li>地址干净，美观</li><li>兼容性和<code>hash</code>模式相比略差</li><li>应用部署上线时需要后端人员支持,解决刷新页面服务端<code>404</code>的问题</li></ul></li></ul></li><li><p>几个使用注意点</p><ul><li>路由组件通常存放在<code>pages</code>文件夹,一般组件通常存放在<code>components</code>文件夹</li><li>通过切换,<code>隐藏</code>了的路由组件,默认是被销毁掉的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性,里面存储者自己的路由信息</li><li>整个应用只有一个<code>router</code>,可以通过组件的<code>$router</code>属性获取到</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-安装与基础配置</title>
      <link href="/2023/12/01/9696fb2d/"/>
      <url>/2023/12/01/9696fb2d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Tomcat-安装与基础配置"><a href="#Tomcat-安装与基础配置" class="headerlink" title="Tomcat-安装与基础配置"></a>Tomcat-安装与基础配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul><li><p>下载<code>Tomcat9</code></p><p><img src="https://img-blog.csdnimg.cn/direct/d012f6c92ec74415a46d4ad804a1ca1c.png" alt="Tomcat9-下载"></p></li><li><p>选择<code>适合自己系统位数的版本下载</code></p><p><img src="https://img-blog.csdnimg.cn/direct/24ee085aea2a4ab9a2acf707b65448e5.png" alt=""></p></li></ul><h4 id="Tomcat-目录"><a href="#Tomcat-目录" class="headerlink" title="Tomcat-目录"></a>Tomcat-目录</h4><ul><li><code>bin</code>: 存放启动与关闭<code>Tomcat</code>的脚本文件</li><li><code>conf</code>: 存放<code>Tomcat</code>的各种配置文件,其中最主要的配置文件就是<code>server.xml【如果端口冲突,就可以将 8080 端口修改】</code></li><li><code>lib</code>: 存放<code>Tomcat</code>运行时所需的<code>jar</code>包</li><li><code>logs</code>: 存放<code>Tomcat</code>运行时的日志文件</li><li><code>temp</code>: 存放<code>Tomcat</code>运行时所产生的临时文件</li><li><code>webapps</code>：存放<code>web</code>应用程序,默认情况下把<code>web</code>资源存放于此目录</li><li><code>work</code>：存放由<code>JSP</code>生成的<code>Servlet</code>源文件和字节码文件,由<code>Tomcat</code>自动生成</li></ul><h4 id="Tomcat-启动与关闭"><a href="#Tomcat-启动与关闭" class="headerlink" title="Tomcat-启动与关闭"></a>Tomcat-启动与关闭</h4><ul><li><p>启动</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Tomcat</code>的<code>bin</code>目录存放了启动和关闭<code>Tomcat</code>的脚本文件,打开<code>bin</code>目录,鼠标双击<code>startup.bat</code>，这时<code>Tomcat</code>服务器便会启动,出现启动提示信息</p></div></li><li><p>访问</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>打开浏览器访问<code>localhost:8080</code></p><p><img src="https://img-blog.csdnimg.cn/direct/2d18834d7121413e912c64b7d08916c8.png" alt=""></p></div></li><li><p>关闭</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>双击<code>shutdown.bat</code>进行关闭</p></div></li></ul><h4 id="IDEA-中配置Tomcat"><a href="#IDEA-中配置Tomcat" class="headerlink" title="IDEA-中配置Tomcat"></a>IDEA-中配置Tomcat</h4><ol><li><p>创建<code>maven</code>项目,选择<code>椭圆选中的模板创建</code></p><p><img src="https://img-blog.csdnimg.cn/direct/9de3cac55e0542f6a12f6a63307289bf.png" alt="注意JDK"></p></li><li><p>点击此处</p><p><img src="https://img-blog.csdnimg.cn/direct/4f32cdf78f3e4abcac57c733e9fe222f.png" alt=""></p></li><li><p>添加<code>Tomcat</code></p><p><img src="https://img-blog.csdnimg.cn/direct/eb5fbe8802524b2994c0b41bd49c9318.png" alt=""></p></li><li><p>配置完下图内容后,之后再点击<code>第二步</code></p><p><img src="https://img-blog.csdnimg.cn/direct/734a0609f83643aba62398ebf57b912b.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/direct/8b6e4c4362a0443dbf41210c72a2ae3c.png" alt=""></p></li><li><p>对部署进行相关配置</p><p><img src="https://img-blog.csdnimg.cn/direct/edd673aeb9b343ed80e58517589a5533.png" alt=""></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI-使用总结</title>
      <link href="/2023/11/29/e15b4889/"/>
      <url>/2023/11/29/e15b4889/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="ElementUI-使用总结"><a href="#ElementUI-使用总结" class="headerlink" title="ElementUI-使用总结"></a>ElementUI-使用总结</h3><h4 id="Container-布局容器"><a href="#Container-布局容器" class="headerlink" title="Container 布局容器"></a>Container 布局容器</h4><ul><li><p>布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">&quot;full-screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 侧边菜单栏区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">text-color</span>=<span class="string">&quot;#000&quot;</span> <span class="attr">unique-opened</span> <span class="attr">active-text-color</span>=<span class="string">&quot;#409eff&quot;</span> <span class="attr">:default-active</span>=<span class="string">&quot;activePath&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 一级菜单 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一级菜单模板区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-custom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 二级菜单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;item.path&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in asideAxiosData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">                          @<span class="attr">click</span>=<span class="string">&quot;saveNavStates(item.path)&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 二级菜单模板区域 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.info &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一级菜单模板区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-shop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>商城管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 二级菜单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;item.path&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in shopAxiosData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">                          @<span class="attr">click</span>=<span class="string">&quot;saveNavStates(item.path)&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 二级菜单模板区域 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.info &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 主体区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 二级路由出口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 底部版权信息 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-footer</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">lang</span>=&quot;<span class="selector-tag">less</span>&quot; <span class="selector-tag">scoped</span>&gt;</span><br><span class="line"><span class="selector-class">.el-header</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全屏高度</span></span><br><span class="line"><span class="selector-class">.full-screen</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 侧边栏</span></span><br><span class="line">  <span class="selector-class">.el-aside</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: border-color .<span class="number">3s</span>, background-color .<span class="number">3s</span>, color .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.el-footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">08</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* aside 100% 高度 */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/* 为了隐藏滚动条 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/347f57ff0a3f4d0e8a80dff77e6b983e.png" alt=""></p></li></ul><h4 id="El-Tag"><a href="#El-Tag" class="headerlink" title="El-Tag"></a>El-Tag</h4><ul><li><p>表格中的<code>el-tag</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:filters</span>=<span class="string">&quot;[&#123; text: &#x27;售卖中&#x27;, value: 1 &#125;, &#123; text: &#x27;已下架&#x27;, value: 0 &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:filter-method</span>=<span class="string">&quot;filterTag&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filter-placement</span>=<span class="string">&quot;bottom-end&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">&quot;产品状态&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">          <span class="attr">disable-transitions</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:type</span>=<span class="string">&quot;scope.row.status === 1 ? &#x27;primary&#x27; : &#x27;danger&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123; scope.row.status === 1 ? &#x27;售卖中&#x27; : &#x27;已下架&#x27; &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>methods</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">formatter</span>(<span class="params">row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> row.<span class="property">address</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">filterTag</span>(<span class="params">value, row</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value: &quot;</span>,value)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;row: &quot;</span>,row.<span class="property">status</span>)</span><br><span class="line">  <span class="keyword">return</span> row.<span class="property">status</span> === value;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">filterHandler</span>(<span class="params">value, row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> property = column[<span class="string">&#x27;property&#x27;</span>];</span><br><span class="line">  <span class="keyword">return</span> row[property] === value;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c8ea667ebd584b5882a1cfe316c2648a.png" alt=""></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端好用的插件</title>
      <link href="/2023/11/28/e6447774/"/>
      <url>/2023/11/28/e6447774/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="前端好用的插件"><a href="#前端好用的插件" class="headerlink" title="前端好用的插件"></a>前端好用的插件</h3><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><ul><li><p><code>moment</code></p><p><img src="https://img-blog.csdnimg.cn/direct/fae2056eac4b467e89ecf884e71431b4.png" alt=""></p></li><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install moment --save   # npm</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">add moment             # Yarn</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;script&gt; 节点内导入</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:formatter</span>=<span class="string">&quot;productTimeFilter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prop</span>=<span class="string">&quot;product_date&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">&quot;生产日期&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// methods: Nov 27, 2023, 12:00:00 AM =&gt; 2023-11-27</span></span><br><span class="line"><span class="title function_">productTimeFilter</span>(<span class="params">row, column, cellValue, index</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> daterc = row[column.<span class="property">property</span>]</span><br><span class="line">  <span class="keyword">if</span> (daterc != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moment</span>(daterc).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>day.js</code></p></li></ul><h4 id="VueUse"><a href="#VueUse" class="headerlink" title="VueUse"></a>VueUse</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">i @vueuse/core</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>无限滚动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于 vue3</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="网络免费接口"><a href="#网络免费接口" class="headerlink" title="网络免费接口"></a>网络免费接口</h4><ul><li><p>官网</p><blockquote><p><a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a></p></blockquote></li><li><p>图片接口地址</p><blockquote><p><a href="https://jsonplaceholder.typicode.com/photos">https://jsonplaceholder.typicode.com/photos</a></p></blockquote></li></ul><h4 id="nprogress进度条"><a href="#nprogress进度条" class="headerlink" title="nprogress进度条"></a>nprogress进度条</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add --save-dev nprogress</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在所有发送网络请求的地方使用</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="comment">// 导入所需要的样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line">axios 的请求拦截器 调用 <span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line">axios 的响应拦截器 调用 <span class="title function_">done</span>()</span><br></pre></td></tr></table></figure></li></ul><h4 id="Driver-js"><a href="#Driver-js" class="headerlink" title="Driver.js"></a>Driver.js</h4><ul><li>新手引导页</li></ul><h4 id="create-js"><a href="#create-js" class="headerlink" title="create.js"></a>create.js</h4><blockquote><p>一套完整的H5游戏引擎，做2d的动画他就足够了，包括 声音加载库：sound.js，预加载库 ：preload.js，canvas动画库：ease.js，补间动画库：tween.js</p></blockquote><h4 id="onlinenetwork"><a href="#onlinenetwork" class="headerlink" title="onlinenetwork"></a>onlinenetwork</h4><blockquote><p>断网监听</p></blockquote><h4 id="IconPark"><a href="#IconPark" class="headerlink" title="IconPark"></a>IconPark</h4><blockquote><p>IconPark提供了超过2000个高质量图标，并且提供了一个界面来帮你定制图标。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet-Vue-JSON交互</title>
      <link href="/2023/11/28/e7570df1/"/>
      <url>/2023/11/28/e7570df1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Servlet-Vue-JSON交互"><a href="#Servlet-Vue-JSON交互" class="headerlink" title="Servlet-Vue-JSON交互"></a>Servlet-Vue-JSON交互</h3><h4 id="统一结果返回"><a href="#统一结果返回" class="headerlink" title="统一结果返回"></a>统一结果返回</h4><ul><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String message, Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setCode(<span class="number">200</span>);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Integer code, String message, Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setCode(<span class="number">500</span>);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        result.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h4><ul><li><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLonginController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserByUserName(username, password);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 密码脱敏处理</span></span><br><span class="line">            user.setPassword(<span class="string">&quot;********&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(<span class="string">&quot;登录成功&quot;</span>, user);</span><br><span class="line">            resp.getWriter().println(gson.toJson(result));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            <span class="comment">// 输出 json 格式的字符串</span></span><br><span class="line">            resp.getWriter().println(gson.toJson(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><ul><li><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="comment">// es6 语法</span></span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>测试登录接口</p><p><img src="https://img-blog.csdnimg.cn/direct/ccb202c181db47ee981773770c7f0ce0.png" alt=""></p></li></ul><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><ul><li><p><code>post</code>请求</p><ul><li><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserUpdateController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> req.getReader();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用 Gson 解析 JSON 数据</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> gson.fromJson(sb.toString(), JsonObject.class);</span><br><span class="line">        <span class="comment">// 获取 JSON 中的参数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> Integer.valueOf(json.get(<span class="string">&quot;id&quot;</span>).getAsString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> json.get(<span class="string">&quot;username&quot;</span>).getAsString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> json.get(<span class="string">&quot;phone&quot;</span>).getAsString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> json.get(<span class="string">&quot;address&quot;</span>).getAsString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">nickname</span> <span class="operator">=</span> json.get(<span class="string">&quot;nickname&quot;</span>).getAsString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> json.get(<span class="string">&quot;username&quot;</span>).getAsString();</span><br><span class="line">        <span class="comment">// 传递到对象中</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(userId);</span><br><span class="line">        user.setUsername(userName);</span><br><span class="line">        user.setPhone(phone);</span><br><span class="line">        user.setAddress(address);</span><br><span class="line">        user.setNickname(nickname);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isUpdate</span> <span class="operator">=</span> userService.updateById(user);</span><br><span class="line">        <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">            <span class="comment">// 更新成功</span></span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(<span class="string">&quot;数据更新成功!&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            resp.getWriter().println(gson.toJson(result));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(<span class="string">&quot;数据更新失败!&quot;</span>);</span><br><span class="line">            resp.getWriter().println(gson.toJson(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>axios</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/user/update&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">// es6 语法</span></span><br><span class="line">        userId,</span><br><span class="line">        userName,</span><br><span class="line">        phone,</span><br><span class="line">        address,</span><br><span class="line">        email</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm-工具包</title>
      <link href="/2023/11/28/5d2ed447/"/>
      <url>/2023/11/28/5d2ed447/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="npm-工具包"><a href="#npm-工具包" class="headerlink" title="npm-工具包"></a>npm-工具包</h3><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><ul><li><p>介绍</p><blockquote><p><code>npm（Node Package Manager）</code>是用于管理和共享<code>Node.js</code>包（包括代码、工具和资源）的包管理工具</p></blockquote></li><li><p>常用命令</p><ul><li><p>局部安装包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install &lt;package-name&gt;: 安装指定的包</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install &lt;package-name&gt; --save/-S: 安装包并保存到 dependencies(生产环境依赖)中</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install &lt;package-name&gt; --save-dev/-D: 安装包并将其保存到 devDepenrencies(开发环境依赖)中</span></span><br></pre></td></tr></table></figure></li><li><p>全局安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查看已安装的包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">list 查看当前项目的所有已安装的包</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">list -g 查看全局已安装的包</span></span><br></pre></td></tr></table></figure></li><li><p>卸载包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">uninstall &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更新包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">update &lt;package-name&gt; 更新指定的包</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">update -g 全局更新所有包</span></span><br></pre></td></tr></table></figure></li><li><p>查看包信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">show &lt;package-name&gt; 显示有关包的详细信息</span></span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">init -y</span></span><br></pre></td></tr></table></figure></li><li><p>运行脚本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">在</span> <span class="string">package.json 文件中,可以定义一些脚本,然后使用 npm run &lt;script-name&gt; 来运行他们</span></span><br></pre></td></tr></table></figure></li><li><p>搜索包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">search &lt;package-name&gt;: 搜索 npm 仓库中的包</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="下载镜像源的更换"><a href="#下载镜像源的更换" class="headerlink" title="下载镜像源的更换"></a>下载镜像源的更换</h4><ul><li><p>推荐使用<code>nrm</code>管理</p><ul><li><p>下载<code>nrm</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g nrm</span></span><br></pre></td></tr></table></figure></li><li><p>查看已有的镜像源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nrm</span> <span class="string">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f9696877fed94fd5b32b8a32f67a210a.png" alt=""></p></li><li><p>切换镜像源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nrm</span> <span class="string">use taobao</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><ul><li><p>镜像源配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 淘宝镜像源配置</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">config set registry https://registry.npm.taobao.org/</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">config set registry https://mirrors.huaweicloud.com/repository/npm/</span></span><br></pre></td></tr></table></figure></li><li><p>验证配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">config get registry</span></span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">init -y</span></span><br></pre></td></tr></table></figure></li><li><p>安装项目的依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">install</span></span><br></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">add &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>清理缓存</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">cache clean</span></span><br></pre></td></tr></table></figure></li><li><p>检查过时的包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">outdated</span></span><br></pre></td></tr></table></figure></li><li><p>升级</p><ul><li><p>升级所有包到最新你版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">upgrade</span></span><br></pre></td></tr></table></figure></li><li><p>升级特定包到最新版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">upgrade &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>升级指定包到指定版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">upgrade &lt;package-name&gt;@&lt;version&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>交互式升级</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令以交互式方式显示可升级的包列表，让你选择要升级的包及其版本。这种方式可以更精确地控制升级的过程</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">upgrade-interactive</span></span><br></pre></td></tr></table></figure></li><li><p>升级所有开发依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">upgrade --latest --dev</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>列出已安装的包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">list</span></span><br></pre></td></tr></table></figure></li><li><p>更新依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">upgrade &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><ul><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">config set proxy http://proxy-server:port</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">config set https-proxy http://proxy-server:port</span></span><br></pre></td></tr></table></figure></li><li><p>清除</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarn</span> <span class="string">config delete proxy</span></span><br><span class="line"><span class="attr">yarn</span> <span class="string">config delete https-proxy</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2023/11/25/da3e1361/"/>
      <url>/2023/11/25/da3e1361/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h4><ul><li><p>框架的概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>框架(<code>Framework</code>)是整个或部分系统的可重用设计,表现为一组抽象构件实例间交互的方法；另一种认为,框架是可被应用开发者定制的应用骨架,模板</p><p>简单的说,框架其实是半成品软件，就是一组组件,供你使用完成你自己的系统。</p><p>框架是安全的，可复用的,不断升级的软件</p></div></li></ul><h4 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h4><ul><li>缺陷<ul><li>代码比较多,开发效率低</li><li>需要关注<code>Connection，Statement，ResultSet</code>对象创建和销毁</li><li>对<code>ResultSet</code>查询的结果,需要自己封装为<code>List</code></li><li>重复的代码比较多</li><li>业务代码和数据库的操作混在一起</li></ul></li></ul><h4 id="Mybatis-1"><a href="#Mybatis-1" class="headerlink" title="Mybatis"></a>Mybatis</h4><ul><li><p>是什么</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>mybatis</code>是一个<code>sql</code>映射框架,提供了数据库的操作能力。是增强的<code>JDBC</code>，使用<code>mybatis</code>让开发人员集中精神写<code>sql</code>就可以了,不必关心<code>Connection,Statement,ResultSet</code>的创建,销毁,<code>sql</code>的执行</p></div></li><li><p>特点</p><ol><li><code>Mybatis</code>是支持定制化的<code>SQL</code>，存储过程以及高级映射的优秀的持久层框架</li><li><code>Mybatis</code>避免了几乎所有的<code>JDBC</code>代码和手动设置参数以及获取结果集</li><li><code>Mybatis</code>可以使用简单的<code>XML</code>或者注解用于配置和原始映射,将接口和<code>Java</code>的<code>POJO</code>映射成数据库中的记录</li><li><code>Mybatis</code>是一个半自动的<code>ORM</code>框架</li></ol></li><li><p>优点</p><ul><li>轻量级、性能出色</li><li><code>SQL</code>和<code>Java</code>编码分开,功能边界清晰.<code>Java</code>代码专注业务、<code>SQL</code>语句专注数据</li><li>开发效率稍逊于<code>Hibernate</code>，但是完全能够接受</li></ul></li></ul><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><ul><li><p>实现步骤</p><ul><li><p>创建数据库和表</p><ul><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">255</span>)    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>)    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    age   <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>添加测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;john doe&#x27;</span>, <span class="string">&#x27;john.doe@example.com&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;jane smith&#x27;</span>, <span class="string">&#x27;jane.smith@example.com&#x27;</span>, <span class="number">22</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;bob johnson&#x27;</span>, <span class="string">&#x27;bob.johnson@example.com&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;alice williams&#x27;</span>, <span class="string">&#x27;alice.williams@example.com&#x27;</span>, <span class="number">23</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;charlie brown&#x27;</span>, <span class="string">&#x27;charlie.brown@example.com&#x27;</span>, <span class="number">21</span>),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;eva davis&#x27;</span>, <span class="string">&#x27;eva.davis@example.com&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">       (<span class="number">7</span>, <span class="string">&#x27;frank miller&#x27;</span>, <span class="string">&#x27;frank.miller@example.com&#x27;</span>, <span class="number">22</span>),</span><br><span class="line">       (<span class="number">8</span>, <span class="string">&#x27;grace taylor&#x27;</span>, <span class="string">&#x27;grace.taylor@example.com&#x27;</span>, <span class="number">23</span>),</span><br><span class="line">       (<span class="number">9</span>, <span class="string">&#x27;david wilson&#x27;</span>, <span class="string">&#x27;david.wilson@example.com&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">       (<span class="number">10</span>, <span class="string">&#x27;hannah lee&#x27;</span>, <span class="string">&#x27;hannah.lee@example.com&#x27;</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-product<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit5 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql 驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化实体类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实体转 json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需要配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类 =&gt; 保存表中的一行数据</span></span><br><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a604934423f34d2883de4dec374ec546.png" alt="一一对应字段"></p></li><li><p>创建一个持久层<code>dao</code>接口,定义操作数据库的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">xxxDao</span>()&#123;</span><br><span class="line">    <span class="comment">// 增加、删除、修改、查询</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建属性配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件 druid.properties </span></span><br><span class="line"><span class="comment"># 官方文档 https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</span></span><br><span class="line"></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># jdbc 开启预编译参数</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/st0104?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mybatis</code>使用的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sql映射文件: 写 sql 语句的,一般一个表一个 sql 映射文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> sql映射文件: 就是用来写 sql 语句的,mybatis会执行这些sql</span></span><br><span class="line"><span class="comment">    1. 指定约束的文件</span></span><br><span class="line"><span class="comment">    &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">    2. 约束文件的作用: 限制,检查在当前文件中出现的标签,属性必须符合mybatis的要求</span></span><br><span class="line"><span class="comment">    3. mapper是当前文件的根标签</span></span><br><span class="line"><span class="comment">        namespace: 叫做命名空间,唯一值,可以是自定义的字符串,要求使用 dao 接口的全限定名称</span></span><br><span class="line"><span class="comment">    4. 在当前文件中,可以使用特定的标签,表示数据库的特定操作</span></span><br><span class="line"><span class="comment">        select: 表示执行查询</span></span><br><span class="line"><span class="comment">        update: 表示更新数据库的操作</span></span><br><span class="line"><span class="comment">        delete: 表示删除数据库的操作</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select: 表示查询操作</span></span><br><span class="line"><span class="comment">        id: 你要执行的 sql 语法的唯一标识,mybatis会使用这个 id 的值来找到要执行的 sql 语句,可以自定义,但是要求你使用接口中的方法名称</span></span><br><span class="line"><span class="comment">        List&lt;Student&gt; selectAllStudents(); 查询所有学生</span></span><br><span class="line"><span class="comment">        resultType: 表示结果类型,是 sql 语句执行后得到 ResultSet,遍历这个 ResultSet得到java对象的类型,值写的是实体类的全限定名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mybatis</code>的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">一个项目就一个主配置文件</span></span><br><span class="line"><span class="comment"> 主配置文件提供了数据库的连接信息和sql映射文件的位置信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载属性配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        环境配置: 数据库的连接信息</span></span><br><span class="line"><span class="comment">        default: 必须和某个 environment 的id值一样,告诉mybatis使用那个数据库的连接信息,也就是访问那个数据库</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment: 一个数据库信息的环境配置</span></span><br><span class="line"><span class="comment">            id: 一个唯一值,自定义的,表示环境的名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager: mybatis 的事务类型</span></span><br><span class="line"><span class="comment">                type: JDBC(表示使用 jdbc中的Connection对象的commit,rollback做事务处理)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource: 表示数据源,连接数据库的</span></span><br><span class="line"><span class="comment">                type: 表示数据源的类型,POOLED表示使用连接池</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- driver user username password 是固定的,不能自定义 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        sql mapper(sql 映射文件的位置)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个 mapper 标签指定一个文件的位置,从类路径(target/classes)开始的路径信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/dao/StudentDao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 Resources 的包</span></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">studentSelectAllTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 定义 mybatis核心配置文件的名称,从类路径根开始(target/classes)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">// 读取 config 文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">// 创建 SqlSessionFactoryBuilder 对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 创建 SqlSessionFactory 对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(in);</span><br><span class="line">        <span class="comment">// 获取 Sqlsession 对象,从SqlSessionFactory中获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="comment">// 指定要执行的 sql 语句的标识,sql 映射文件中的 namespace+&quot;.&quot;+标签id的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.example.dao.StudentDao&quot;</span> + <span class="string">&quot;.&quot;</span> + <span class="string">&quot;selectAllStudents&quot;</span>;</span><br><span class="line">        <span class="comment">// 执行 sql 语句,通过 sqlId 找到语句</span></span><br><span class="line">        List&lt;Student&gt; stuList = sqlSession.selectList(sqlId);</span><br><span class="line">        <span class="keyword">for</span> (Student student : stuList) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/edb1435835d94defb9bee4312f5a960a.png" alt=""></p></li></ul></li><li><p>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 定义 mybatis核心配置文件的名称,从类路径根开始(target/classes)</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="comment">// 读取 config 文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">    <span class="comment">// 创建 SqlSessionFactoryBuilder 对象</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">// 创建 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(in);</span><br><span class="line">    <span class="comment">// 获取 Sqlsession 对象,从SqlSessionFactory中获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudentTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.example.dao.StudentDao&quot;</span> + <span class="string">&quot;.&quot;</span> + <span class="string">&quot;insertStudent&quot;</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">12</span>, <span class="string">&quot;coder-itl&quot;</span>, <span class="string">&quot;12345678@qq.com&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> sqlSession.update(sqlId, s);</span><br><span class="line">    <span class="comment">// 需要手动提交事务</span></span><br><span class="line">    <span class="comment">// sqlSession.commit();</span></span><br><span class="line">    <span class="keyword">if</span> (update &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证线程安全</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="主要类的介绍"><a href="#主要类的介绍" class="headerlink" title="主要类的介绍"></a>主要类的介绍</h4><ul><li><p><code>Resources</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Resources</code>中的一个类,负责读取核心配置文件</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>SqlSessionFactoryBuilder</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SqlSessionFactoryBuilder</code>创建<code>SqlSessionFactory</code>对象</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactorBuilder</span>();</span><br><span class="line"><span class="comment">// 创建 SqlSessionFactory 对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(in);</span><br></pre></td></tr></table></figure></li><li><p><code>SqlSessionFactory</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>SqlSessionFactory</code>重量级对象,程序创建一个对象耗时比较长,使用资源比较多，在整个项目中,有一个就够用了</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory: 接口，接口的实现类: DefaultSqlSessionFactory</span><br><span class="line">SqlSessionFactory作用: 获取 SqlSession对象</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">openSession()方法说明:</span><br><span class="line"><span class="number">1.</span> openSession(): 无参数的,获取是非自动提交事务的 SqlSession</span><br><span class="line">    <span class="number">2.</span> openSession(<span class="type">boolean</span>):</span><br><span class="line">openSession(<span class="literal">true</span>): 获取自动提交事务的 SqlSession</span><br><span class="line">            <span class="title function_">openSession</span><span class="params">(<span class="literal">false</span>)</span>: 非自动提交事务的 SqlSession 对象</span><br></pre></td></tr></table></figure></li><li><p><code>SqlSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SqlSession接口: 定义了操作数据的方法,例如: selectOne()、selectList()、insert()、update()、commit()、rollback()</span><br><span class="line">SqlSession接口的实现类: DefaultSqlSession</span><br><span class="line">    使用要求: SqlSession 对象不是线程安全的,需要在方法内部使用,在执行sql语句之前,使用openSession()获取SqlSession，在执行完sql语句后,需要关闭它,执行SqlSession.close();这样能保证他的使用是线程安全的</span><br></pre></td></tr></table></figure></li></ul><h4 id="工具类封装"><a href="#工具类封装" class="headerlink" title="工具类封装"></a>工具类封装</h4><ul><li><p>封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Mybatis的工具包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023/12/5 11:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> com.example.utils.MybatisUtils</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态成员变量, 存储 SqlSessionFactory 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态代码块, 在类加载的时候执行, 创建 SqlSessionFactory 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 InputStream 对象, 读取 mybatis-config.xml 文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建 SqlSessionFactoryBuilder 对象</span></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">// 使用 SqlSessionFactoryBuilder 对象创建 SqlSessionFactory 对象</span></span><br><span class="line">            factory = builder.build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 捕获异常, 并抛出运行时异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 SqlSession 对象的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSession 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 SqlSession 对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 判断 SqlSessionFactory 对象是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建 SqlSession 对象</span></span><br><span class="line">            sqlSession = factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 SqlSession 对象</span></span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudentTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(StudentDao.class);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">13</span>, <span class="string">&quot;coderitl&quot;</span>, <span class="string">&quot;12345678@qq.com&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> dao.insertStudent(stu);</span><br><span class="line">    <span class="comment">// 需要手动提交事务</span></span><br><span class="line">    <span class="comment">// sqlSession.commit();</span></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证线程安全</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><ul><li><p>集成<code>loggback+slfj</code>日志框架</p></li><li><p><code>logImpl可配置的 value 值 SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis的核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  设置 mybatis 输出日期  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/63652072f3a34e30ad31e773dd82ae28.png" alt="配置的书写位置"></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>目录下创建名为 <code>logback.xml</code>文件</p></li><li><p>在 <code>logback.xml</code>文件配置日志输出的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 名称必须为: logback.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis log configure --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.apache.ibatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Connection&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Statement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.PreparedStatement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/963647e7292a4f1293f5e86cd8f38f59.png" alt=""></p></li></ul><h4 id="深入理解参数"><a href="#深入理解参数" class="headerlink" title="深入理解参数"></a>深入理解参数</h4><ul><li><p><code>parameterType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameterType: dao接口中方法参数的数据类型</span><br><span class="line">parameterType它的值是 java 的数据类型全限定名称或者是 Mybatis定义的别名</span><br><span class="line">注意: parameterType 不是强制的,mybatis通过反射机制能够发现接口参数的数据类型,所以可以没有,一般不写</span><br></pre></td></tr></table></figure></li><li><p>传入一个简单参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dao 接口中方法的参数只有一个简单类型(java基本数据类型和String),占位符 #&#123;任意字符&#125;,和方法的参数名无关</span><br></pre></td></tr></table></figure></li><li><p>多个参数-<code>@Param</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当<code>dao</code>接口方法有多个参数,需要通过名称使用参数。在方法形参前面加入<code>@Param(&quot;自定义参数名&quot;)</code>,<code>mapper</code>文件使用<code>#{自定义参数名}</code></p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Student&gt; selectMultiparm(@Param(&quot;myName&quot;) String name,@Param(&quot;myEmail&quot;) String email); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiparm&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line">    where name = #&#123;myName&#125;</span><br><span class="line">       or email = #&#123;myEmail&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多个参数-使用对象</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>使用<code>java</code>对象传递参数,<code>java</code>的属性值就是<code>sql</code>需要的参数值.每一个属性就是一个参数</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Student&gt; fuzzStuByName(QueryParam queryParam); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fuzzStuByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line">    where name = #&#123;name&#125;</span><br><span class="line">       or age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>#</code>和<code>$</code></p><ul><li><p><code>#&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 #&#123;&#125; 之后,mybatis执行sql是使用的jdbc中的 PreparedStatement 对象</span></span><br><span class="line"><span class="number">1.</span> mybatis 创建 Connection,PreparedStatement 对象</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,age from student where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pst.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="number">2.</span> 执行sql封装为resultType=<span class="string">&quot;com.example.entity.Student&quot;</span>这个对象</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        <span class="comment">// 从数据库取表的一行数据,存到一个实体对象中(Student)</span></span><br><span class="line">        stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setId(rs.getId());</span><br><span class="line">        stu.setAge(rs.getAge());</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stu;</span><br></pre></td></tr></table></figure></li><li><p><code>$&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $&#123;&#125;: 字符串替换,使用 Statement 把 sql 语句和 $&#123;&#125;的内容连接起来.主要用在替换表名,列名,不同列排序等操作。</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/ff914509f09d488583cfb8b0b66bec84.png" alt="#{}与${}"></p></li></ul></li></ul><h4 id="封装输出结果"><a href="#封装输出结果" class="headerlink" title="封装输出结果"></a>封装输出结果</h4><ul><li><p><code>resultType</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>执行<code>sql</code>得到<code>ResultSet</code>转换的类型,使用类型的完全限定名或别名。注意返回的是集合,那应该设置为集合包含的类型，而不是集合本身。<code>resultType</code>和<code>resultMap</code>不能同时使用</p></div><ul><li>简单类型</li><li>对象类型</li><li><code>Map</code></li></ul></li><li><p>实体类属性名和列名不同的处理方式</p><ul><li><p>使用列别名和<code>resultType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectAllStudents&quot;</span> resultType=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span><br><span class="line">    select id as <span class="string">&quot;myId&quot;</span>,name as <span class="string">&#x27;myName&#x27;</span></span><br><span class="line">    from student</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>resultMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;myResultMap&quot;</span> type=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span><br><span class="line">    &lt;id column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;email&quot;</span> property=<span class="string">&quot;myEmail&quot;</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模糊查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fuzzStuByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line">    where name like concat(&#x27;%&#x27;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="参数使用细节"><a href="#参数使用细节" class="headerlink" title="参数使用细节"></a>参数使用细节</h4><ul><li><p>单字面量值,直接使用变量，见名知意</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User getUserByName(String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多个参数的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLogin(String username,String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username = #&#123;username&#125;</span><br><span class="line">      and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLogin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.checkLogin(<span class="string">&quot;coder-itl&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>出现的问题</p><p><img src="https://img-blog.csdnimg.cn/direct/37c7118162cc44379a654db41282ddc9.png" alt=""></p></li><li><p>解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">checkLogin</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- User <span class="title function_">checkLogin</span><span class="params">(String username,String password)</span>; --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;checkLogin&quot;</span> resultType=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="type">where</span> <span class="variable">username</span> <span class="operator">=</span> #&#123;username&#125;</span><br><span class="line">      <span class="type">and</span> <span class="variable">password</span> <span class="operator">=</span> #&#123;password&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Map</code>参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLoginByMap(Map&lt;String, Object&gt; map); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username = #&#123;username&#125;</span><br><span class="line">      and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;coder-itl&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;coder-itl&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.checkLoginByMap(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参数是实体类对象，直接使用实体类的属性名</p></li></ul><h4 id="Param"><a href="#Param" class="headerlink" title="@Param"></a><code>@Param</code></h4><ul><li><p>使用<code>@Param</code>注解命名参数</p><blockquote><p>此时<code>Mybatis</code>会将这些参数放在一个<code>map</code>集合中,以两种方式进行存储</p></blockquote><ul><li>方式一: 以<code>@Param</code>注解的值为键,以参数为值</li><li>方式二: 以<code>param1,param2</code>为键,以参数为值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLogin(@Param(&quot;username&quot;) String username,@Param(&quot;password&quot;) String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username = #&#123;a&#125;</span><br><span class="line">      and password = #&#123;b&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter <span class="string">&#x27;a&#x27;</span> not found. Available parameters are [password, param1, username, param2]</span><br><span class="line">### Cause: org.apache.ibatis.binding.BindingException: Parameter <span class="string">&#x27;a&#x27;</span> not found. Available parameters are [password, param1, username, param2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>[password, param1, username, param2]</code></p></blockquote></li></ul><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li><p>模糊查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  List&lt;User&gt; getUser(@Param(&quot;username&quot;) String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like &#x27;%$&#123;username&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  List&lt;User&gt; getUser(@Param(&quot;username&quot;) String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like concat(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐: List&lt;User&gt; getUser(@Param(&quot;username&quot;) String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like &quot;%&quot;#&#123;username&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h4><ul><li><p>动态设置表名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="获取添加功能自增的主键"><a href="#获取添加功能自增的主键" class="headerlink" title="获取添加功能自增的主键"></a>获取添加功能自增的主键</h4><ul><li><p>需求</p><ul><li>添加班级信息</li><li>获取新添加的班级的<code>id</code></li><li>为班级分配学生,即将某学省的的班级<code>id</code>修改为新添加的班级的<code>id</code></li></ul></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 数据库的字段要设置为主键自增</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   useGeneratedKeys: true,设置当前标签中的 sql 使用了自增的主键</span></span><br><span class="line"><span class="comment">   keyProperty: 将自增的主键的值赋值给传输到映射文件中参数的某个属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into user(username)</span><br><span class="line">    values (#&#123;username&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot; insert into user(username)  values (#&#123;username&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeerateKeys=true,keyProperty=&quot;数据库中的自增主键字段&quot;)</span></span><br><span class="line">Integer <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="开启驼峰命名自动映射"><a href="#开启驼峰命名自动映射" class="headerlink" title="开启驼峰命名自动映射"></a>开启驼峰命名自动映射</h4><ul><li><p>核心配置文件的的<code>settings</code>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColume --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- STDOUT_LOGGING  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="多对一映射"><a href="#多对一映射" class="headerlink" title="多对一映射"></a>多对一映射</h4><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp</span><br><span class="line">(</span><br><span class="line">    eid   <span class="type">int</span>,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    esex  <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">    did   <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;张晓梅&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept</span><br><span class="line">(</span><br><span class="line">    did    <span class="type">int</span>,</span><br><span class="line">    dname  <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    dcount <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;财务部&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;开发部&#x27;</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;人事部&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>多对一映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Emp 的实体类中创建部门的对象(一个部门有多个员工)</span></span><br></pre></td></tr></table></figure><ul><li><p>查询员工所对应的部门信息</p><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer eid;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String esex;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="comment">// 多个员工同属于一个部门</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>级联查询<code>(方式一)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.dao.EmpDao&quot;</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;empResultMap&quot;</span> type=<span class="string">&quot;emp&quot;</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;eid&quot;</span> column=<span class="string">&quot;eid&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;ename&quot;</span> column=<span class="string">&quot;ename&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;esex&quot;</span> column=<span class="string">&quot;esex&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;did&quot;</span> column=<span class="string">&quot;did&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 级联属性映射 --&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;dept.did&quot;</span> column=<span class="string">&quot;did&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;dept.dcount&quot;</span> column=<span class="string">&quot;dcount&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;dept.dname&quot;</span> column=<span class="string">&quot;dname&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!-- Emp <span class="title function_">getById</span><span class="params">(Integer eid)</span>; --&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;getById&quot;</span> resultMap=<span class="string">&quot;empResultMap&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">                 inner join dept on emp.did = dept.did</span><br><span class="line">        <span class="type">where</span> <span class="variable">eid</span> <span class="operator">=</span> #&#123;eid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>association(多对一)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.EmpDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;esex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;esex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association: 处理多对一的映射关系</span></span><br><span class="line"><span class="comment">            // Dept dept</span></span><br><span class="line"><span class="comment">            property: 需要处理多对一的映射关系的属性名【dept】</span></span><br><span class="line"><span class="comment">            javaType: (property)该属性的类型【dept =&gt; Dept】</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dcount&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dcount&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Emp getById(Integer eid); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">                 inner join dept on emp.did = dept.did</span><br><span class="line">        where eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>分布查询</p><p><img src="https://img-blog.csdnimg.cn/direct/38deac7e99134a9a81da2f134f5c2eaf.png" alt=""></p><ul><li><p>分析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.EmpDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;esex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;esex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            select: 设置分布查询的 sql 的唯一标识(namespace.SQL Id)</span></span><br><span class="line"><span class="comment">            column: 设置分布查询的条件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.example.dao.DeptDao.getById_StepTwo&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Emp getById_StepOne(Integer eid); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById_StepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">        where eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.DeptDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dept getById_StepTwo(@Param(&quot;did&quot;) Integer did); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById_StepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from dept</span><br><span class="line">        where did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>分布查询的优点</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>可以实现延迟加载。但是必须在核心配置文件中设置全局配置信息</p><p><code>lazyLoadingEnabled</code>: 延迟加载的全局开关.当开启时,所有关联的对象都会延迟加载</p><p><code>aggressiveLazyLoading</code>: 当开启时,任何方法都会加载该对象的所有属性。否则,每个属性都会按需加载</p><p>此时就可以试下按需加载，获取的数据是什么,就只会执行相应的<code>sql</code>。此时可通过<code>association</code>和<code>collection</code>中的<code>fetchType</code>属性设置当前的分步查询是否使用延迟加载,<code>fetchType=lazy(延迟加载)|eager(立即加载)</code></p></div><ul><li><p>开启全局的延迟加载(<code>mybatis核心配置文件中</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在开启全局的延迟加载的情况下,局部控制延迟加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  fetchType=&quot; lazy | eager &quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">select</span>=<span class="string">&quot;com.example.dao.DeptDao.getById_StepTwo&quot;</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h4><ul><li><p>多对多映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> Integer dcount;</span><br><span class="line">    <span class="comment">// 多对多映射: 一个部门有多个员工</span></span><br><span class="line">    List&lt;Emp&gt; emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.DeptDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dcount&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dcount&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            一对多</span></span><br><span class="line"><span class="comment">                collection: 处理多对多的映射关系</span></span><br><span class="line"><span class="comment">                ofType: 标识该属性所对应的集合中存储数据的类型</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;esex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;esex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dept getByDid(Integer did); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from dept</span><br><span class="line">                 left join emp on dept.did = emp.did</span><br><span class="line">        where dept.did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>分步查询</p></li></ul><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><ul><li><p>什么是动态<code>SQL</code></p><blockquote><p><code>SQL</code>的内容是变化的,可以根据条件获取到不同的<code>SQL</code>语句</p></blockquote></li><li><p><code>if</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>根据标签中<code>test</code>属性所对应的表达式决定标签中的内容是否需要拼接到<code>SQL</code>中</p></div></li><li><p><code>where</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li><p>当<code>where</code>标签中没有内容时,会自动生成<code>where</code>关键字,并且将内容前多余的<code>and</code>或<code>or</code>去掉</p></li><li><p>当<code>where</code>标签中没有内容时,此时<code>where</code>标签中没有任何效果</p><blockquote><p><code>where</code>标签不能将其中内容后面多余的<code>and</code>或<code>or</code>去掉</p></blockquote></li></ol></div></li><li><p><code>trim</code></p><ul><li><code>prefix</code> | <code>suffix</code>: 将<code>trim</code>标签中内容前或后面<code>添加指定内容</code></li><li><code>suffixOverrides</code> | <code>prefixOverrides</code>: 将<code>trim</code>标签中内容前面或后面去掉指定内容</li></ul></li><li><p><code>forEach</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>collection</code>: 表示接口中的方法参数的类型,如果是数组使用<code>array</code>,如果是<code>list</code>集合使用<code>list</code></p><p><code>item</code>: 自定义的，表示数组和集合成员的变量</p><p><code>open</code>: 循环开始时的字符</p><p><code>close</code>: 循环结束时的字符</p><p><code>separator</code>: 集合成员之间的分隔符</p></div><ul><li><p>用法一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Student&gt; selectForeachOne(List&lt;Integer&gt; idList); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeachOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectForeachOneTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(StudentDao.class);</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Student&gt; studentList = dao.selectForeachOne(list);</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证线程安全</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用法二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    List&lt;Student&gt; selectForeachTwo(List&lt;Student&gt; idList);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeachTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;stu.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectForeachTwoTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(StudentDao.class);</span><br><span class="line">    List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student1.setId(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student2.setId(<span class="number">2</span>);</span><br><span class="line">    Collections.addAll(stuList, student1, student2);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; studentList = dao.selectForeachTwo(stuList);</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证线程安全</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySql&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul><li><p>一级缓存</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>一级缓存是<code>SqlSession</code>级别的,通过同一个<code>SqlSession</code>查询的数据会被缓存,下次查询相同的数据,就会从缓存中直接获取,不会从数据库重新访问</p></div></li><li><p>使一级缓存失效的四种情况</p><ul><li>不同的<code>SqlSession</code>对应不同的一级缓存</li><li>同一个<code>SqlSession</code>但是查询条件不同</li><li>同一个<code>SqlSession</code>两次查询期间执行了任何一次增删改操作</li><li>同一个<code>SqlSession</code>两次查询期间手动清空了缓存</li></ul></li></ul><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><ul><li><p>二级缓存</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>二级缓存是<code>SqlSessionFactory</code>级别,通过同一个<code>SqlSessionFactory</code>创建的<code>SqlSession</code>查询的结果会被缓存；此后若再次执行相同的查询语句,结果就会从缓存中获取</p></div></li><li><p>二级缓存开启的条件</p><ul><li>在核心配置文件中,设置全局配置属性<code>cacheEnabled=true</code>，默认值为<code>true</code>，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache/&gt;</code></li><li>二级缓存必须在<code>SqlSession</code>关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现<code>序列化的接口</code></li></ul></li><li><p>二级缓存失效的情况</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p></div></li><li><p><code>mapper 中 cache</code>标签属性</p><ul><li><p><code>eviction</code>: 缓存回收策略</p><ul><li><p><code>LRU(Least Recently Used)</code>最近最少使用: 移除最长时间不被使用的对象</p></li><li><p><code>FIFO</code>: 先进先出: 按对象进入缓存顺序来移除他们</p></li><li><p><code>SOFT</code>: 软引用: 移除基于垃圾回收器状态和弱引用规则的对象</p></li><li><p><code>WEAK</code>弱引用: 更积极地移除基于垃圾收集器状态和引用规则地对象</p><blockquote><p>默认是<code>LRU</code></p></blockquote></li></ul></li><li><p><code>flushInterval</code>：刷新间隔,单位毫秒</p><blockquote><p>默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新</p></blockquote></li><li><p><code>size</code>: 引用数目,正整数</p><blockquote><p>代表缓存最多可以存储多少个对象,太大容易导致内存泄漏</p></blockquote></li><li><p><code>readOnly</code>: 只读</p><blockquote><p><code>true</code>: 只读缓存，会给所有调用者返回缓存对象的相同实例,因此这些对象不能被修改，这提供了很重要的性能优势</p><p><code>false</code>: 读写缓存,会返回缓存对象的拷贝(通过序列化)，这会慢一些,但是安全,默认是<code>false</code></p></blockquote></li></ul></li></ul><h4 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h4><ul><li>查询顺序<ul><li>先查询二级缓存,因为二级缓存中可能会有其他程序已经查出来的数据,可以拿来直接使用</li><li>如果二级缓存没有命中,在查询一级缓存</li><li>如果一级缓存也没有命中,则查询数据库</li><li><code>SqlSession</code>关闭之后,一级缓存中的数据会写入二级缓存</li></ul></li></ul><h4 id="整合第三方缓存"><a href="#整合第三方缓存" class="headerlink" title="整合第三方缓存"></a>整合第三方缓存</h4><ul><li><p><code>ECache</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j 日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>EHCache</code>的配置文件<code>ehcache.xml(必须是此名称)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘的保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\ehcache&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置缓存管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>maxElementsInMemory</code>: 内存中允许存储的最大元素数量。在这个例子中，设置为 1000，表示内存中最多可以存储1000个元素。</li><li><code>eternal</code>: 一个布尔值，指示缓存中的元素是否是永久的。如果设置为 false，则缓存中的元素会在一定的时间内失效。在这个例子中，设置为 false，表示缓存中的元素不是永久的。</li><li><code>maxElementsOnDisk</code>: 在磁盘上允许存储的最大元素数量。如果缓存中的元素数量达到这个限制，新的元素将覆盖先前的元素。在这个例子中，设置为 10000000，表示磁盘上最多可以存储1000万个元素。</li><li><code>timeToIdleSeconds</code>: 元素在缓存中空闲的最长时间，以秒为单位。如果一个元素在指定的时间内没有被访问，它将被认为是空闲的，并可能被从缓存中移除。</li><li><code>timeToLiveSeconds</code>: 元素在缓存中允许存活的最长时间，以秒为单位。即使元素被访问，如果它在指定的时间内超过了最大存活时间，它也可能被从缓存中移除。</li><li><code>diskExpiryThreadIntervalSeconds</code>: 磁盘上的缓存元素过期线程运行的间隔时间，以秒为单位。过期线程负责检查磁盘上的元素是否过期，并删除过期的元素。</li><li><code>overflowToDisk</code>: 一个布尔值，指示是否允许缓存溢出到磁盘。如果设置为 true，当内存中的元素达到最大限制时，额外的元素将被存储到磁盘上。</li><li><code>memoryStoreEvictionPolicy</code>: 内存中的元素达到最大限制时，用于决定要移除哪些元素的策略,采用了 LRU（最近最少使用）策略，即最近最少被使用的元素会被移除。</li></ul></li><li><p>修改<code>mapper</code>文件中<code>ecache</code>的<code>type</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.EmpDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改为 第三方的缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加入<code>logback</code>日志</p><blockquote><p>存在<code>slf4j</code>时,作为简易日志的<code>log4j</code>将失效,此时我们需要借助<code>SLF4J</code>的具体实现<code>logback</code>来打印日志</p></blockquote><ul><li><p>创建<code>logback</code>的配置文件<code>logback.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;coder-itl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志的输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据分页"><a href="#数据分页" class="headerlink" title="数据分页"></a>数据分页</h4><ul><li><p>下载依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>&lt;envirements&gt;</code>之前加入插件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">studentSelectAllTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line">    <span class="comment">// 指定要执行的 sql 语句的标识,sql 映射文件中的 namespace+&quot;.&quot;+标签id的值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.example.dao.StudentDao&quot;</span> + <span class="string">&quot;.&quot;</span> + <span class="string">&quot;selectAllStudents&quot;</span>;</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 执行 sql 语句,通过 sqlId 找到语句</span></span><br><span class="line">    List&lt;Student&gt; stuList = sqlSession.selectList(sqlId);</span><br><span class="line">    <span class="keyword">for</span> (Student student : stuList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页超页的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页合理化配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页合理化参数,默认值为 false,当该参数设置为 true时,pageNum&lt;=0时会查询第一页,pageNum&gt;pages(超出总数时),会查询最后一页.默认值false,直接根据参数进行查询 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gson</title>
      <link href="/2023/11/23/395f52a6/"/>
      <url>/2023/11/23/395f52a6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h3><ul><li><p>官网文档</p><blockquote><p><a href="https://github.com/google/gson/blob/main/UserGuide.md">https://github.com/google/gson/blob/main/UserGuide.md</a></p></blockquote></li><li><p>获取依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>前端时间格式化类库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment.js</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开发工具配置</title>
      <link href="/2023/11/23/5f710c16/"/>
      <url>/2023/11/23/5f710c16/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="开发工具配置"><a href="#开发工具配置" class="headerlink" title="开发工具配置"></a>开发工具配置</h3><h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h4><ul><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># custom IntelliJ IDEA VM options (expand/override &#x27;bin\idea64.exe.vmoptions&#x27;)</span></span><br><span class="line"><span class="attr">-Xms4096m</span></span><br><span class="line"><span class="attr">-Xmx4096m</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ReservedCodeCacheSize=512m</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">SoftRefLRUPolicyMSPerMB=50</span></span><br><span class="line"><span class="attr">-Xverify</span>:<span class="string">none</span></span><br><span class="line"><span class="attr">-ea</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">CICompilerCount=2</span></span><br><span class="line"><span class="attr">-Dsun.io.useCanonPrefixCache</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">-Djdk.http.auth.tunneling.disabledSchemes</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">-OmitStackTraceInFastThrow</span></span><br><span class="line"><span class="attr">-Dkotlinx.coroutines.debug</span>=<span class="string">off</span></span><br><span class="line"><span class="attr">-Djdk.module.illegalAccess.silent</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">-Dide.no.platform.update</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">-Djdk.attach.allowAttachSelf</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><ul><li><p>插件推荐</p><ul><li><code>ptg</code>在<code>javase</code>阶段快速生成<code>javabean</code></li><li><code>Rainbow brackets</code>彩虹括号</li><li><code>Codota</code>自动补全插件</li><li><code>EasyCode</code>:它可以通过数据库表自动的<code>生成实体类、Controller、Dao、Service、mapper</code>，简单而且强大</li><li><code>Fast Request</code></li></ul></li><li><p>头部模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 File and Code Templates 中配置</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> $&#123;DESCRIPTION&#125; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> $&#123;PACKAGE_NAME&#125;.$&#123;NAME&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><ul><li><p><code>alt+shift+鼠标左键点击</code></p><p><img src="https://img-blog.csdnimg.cn/direct/12c78bec884f48799937c961c7ada8a3.gif" alt=""></p></li><li><p><code>alt+j</code></p><p><img src="https://img-blog.csdnimg.cn/direct/432484de3ffe4e2185ab61b4ecc1747d.gif" alt="先选中要同时修改的数据"></p></li></ul></li><li><p>插件</p><ul><li><code>Extra ToolWindow Colorful Icons 【文件图标美化】</code></li><li><code>GenerateAllSetter 【快速生成设置值时的 set方法】</code></li><li><code>maven-search 【可以在IDEA中搜索依赖,自定义快捷键激活】</code></li><li><code>MybatisX 【mybatis和mapper.xml之间跳转】</code></li><li><code>Properties to YAML Convert 【properties配置转换为 yaml】</code></li><li><code>Rainbow Brackets Lite 【彩虹括号】</code></li></ul></li><li><p>按下<code>Esc</code>进入编辑器问题</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">进入设置,选择快捷键,删除</span> <span class="string">Plugins -&gt; Terminal -&gt; Esc(Switch Focus To Editot去除)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h4><ul><li><p>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 编辑器设置</span></span><br><span class="line">    <span class="attr">&quot;editor.mouseWheelZoom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 鼠标滚轮缩放编辑器</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span> <span class="comment">// 字号</span></span><br><span class="line">    <span class="attr">&quot;editor.lineHeight&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="comment">// 行高</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span> <span class="comment">// 字体连字</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ER Kurier 1251&quot;</span><span class="punctuation">,</span> <span class="comment">// 字体</span></span><br><span class="line">    <span class="attr">&quot;editor.tokenColorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 代码着色定制</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0eeef1&quot;</span><span class="punctuation">,</span> <span class="comment">// 注释的颜色 #0eeef1</span></span><br><span class="line">        <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#737373&quot;</span><span class="punctuation">,</span> <span class="comment">// 关键字颜色 #ff0000</span></span><br><span class="line">        <span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4c4c7e&quot;</span><span class="punctuation">,</span> <span class="comment">// 变量颜色 #0000ff</span></span><br><span class="line">        <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#d73fcd&quot;</span><span class="punctuation">,</span> <span class="comment">// 函数颜色 #00ff00</span></span><br><span class="line">        <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffff00&quot;</span><span class="punctuation">,</span> <span class="comment">// 字符串颜色 #ffff00</span></span><br><span class="line">        <span class="attr">&quot;numbers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff00ff&quot;</span><span class="punctuation">,</span> <span class="comment">// 数字颜色 #ff00ff</span></span><br><span class="line">        <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0000ff&quot;</span><span class="punctuation">,</span> <span class="comment">// 类型颜色 #0000ff</span></span><br><span class="line">        <span class="attr">&quot;textMateRules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;comment.block&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;fontStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bold&quot;</span> <span class="comment">// 加粗注释</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 文件资源管理器</span></span><br><span class="line">    <span class="attr">&quot;explorer.compactFolders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 空文件夹不折叠</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 删除文件时不弹出确认弹窗</span></span><br><span class="line">    <span class="comment">// 终端设置</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span> <span class="comment">// 终端字号</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 光标闪烁</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.lineHeight&quot;</span><span class="punctuation">:</span> <span class="number">1.4</span><span class="punctuation">,</span> <span class="comment">// 行距</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.letterSpacing&quot;</span><span class="punctuation">:</span> <span class="number">0.1</span><span class="punctuation">,</span> <span class="comment">// 字符间距</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontWeightBold&quot;</span><span class="punctuation">:</span> <span class="string">&quot;600&quot;</span><span class="punctuation">,</span> <span class="comment">// 加粗字体粗细</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;line&quot;</span><span class="punctuation">,</span> <span class="comment">// 光标样式</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorWidth&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// 光标宽度</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.scrollback&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span> <span class="comment">// 终端回滚行数</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rightClickBehavior&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copyPaste&quot;</span><span class="punctuation">,</span> <span class="comment">// 终端右键菜单</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.osx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认终端</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Menlo for powerline&quot;</span><span class="punctuation">,</span> <span class="comment">// 字体设置</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bold&quot;</span><span class="punctuation">,</span> <span class="comment">// 字体粗细</span></span><br><span class="line">    <span class="comment">// 搜索设置</span></span><br><span class="line">    <span class="attr">&quot;search.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bower_components&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/target&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/logs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 插件设置</span></span><br><span class="line">    <span class="attr">&quot;RainbowBrackets.depreciation-notice&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 插件名: RainbowBrackets</span></span><br><span class="line">    <span class="attr">&quot;alias-skip.mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// <span class="doctag">TODO:</span> 插件名: &quot;别名路径跳转插件&quot;</span></span><br><span class="line">        <span class="attr">&quot;~@/&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/src&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;views&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/src/views&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/src/assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/src/network&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;common&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/src/common&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编辑器格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在粘贴时自动进行代码格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在输入时自动进行代码格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smart&quot;</span><span class="punctuation">,</span> <span class="comment">// 在按回车键时智能地接受代码建议</span></span><br><span class="line">    <span class="attr">&quot;editor.suggestSelection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置代码建议的默认选择为第一个</span></span><br><span class="line">    <span class="attr">&quot;window.dialogStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span> <span class="comment">// 将对话框样式设置为自定义</span></span><br><span class="line">    <span class="attr">&quot;debug.showBreakpointsInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在概览标尺中显示断点</span></span><br><span class="line">    <span class="comment">// 文件和语言相关</span></span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 自动猜测文件编码</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 文件关联配置</span></span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wpy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 针对 JSONC 文件类型，使用默认的 JSON 格式化器</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span> <span class="comment">// 全局设置默认格式化器</span></span><br><span class="line">    <span class="comment">// 工作台和主题</span></span><br><span class="line">    <span class="attr">&quot;workbench.list.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用工作台列表的平滑滚动</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;One Monokai&quot;</span><span class="punctuation">,</span> <span class="comment">// 工作台颜色主题</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 工作台颜色自定义设置</span></span><br><span class="line">    <span class="comment">// 扩展和建议</span></span><br><span class="line">    <span class="attr">&quot;extensions.autoUpdate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onlyEnabledExtensions&quot;</span><span class="punctuation">,</span> <span class="comment">// onlyEnabledExtensions: 仅为已启用的扩展自动下载并安装更新</span></span><br><span class="line">    <span class="attr">&quot;extensions.ignoreRecommendations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用后，将不会显示扩展建议的通知</span></span><br><span class="line">    <span class="comment">// TypeScript 和 JavaScript 设置</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[css]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在 Live Server 设置中，禁止显示信息消息</span></span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// Emmet 包含 JavaScript 语言</span></span><br><span class="line">    <span class="comment">// 其他设置</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 在编辑器中启用快速建议（代码补全）</span></span><br><span class="line">        <span class="attr">&quot;other&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 其他（变量名等）</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 注释</span></span><br><span class="line">        <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 字符串</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.bracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在 Prettier 格式化时，将大括号放在同一行</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons-mac&quot;</span><span class="punctuation">,</span> <span class="comment">// 在 Prettier 格式化时，使用单引号而不是双引号</span></span><br><span class="line">    <span class="comment">// Vue 3 相关设置</span></span><br><span class="line">    <span class="attr">&quot;vetur.experimental.templateInterpolationService&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;embeddedLanguageFormatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Vue 3 文件中的代码片段支持</span></span><br><span class="line">    <span class="attr">&quot;vetur.useWorkspaceDependencies&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.validation.template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Vue 3 文件中的 IntelliSense</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.tagCasing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;initial&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.useScaffoldSnippets&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.script&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.style&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.completion.emmet&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.emmet.expandTab&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Vue 3 文件中的语法检查</span></span><br><span class="line">    <span class="attr">&quot;vetur.validation.templateProps&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.validation.script&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.validation.style&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Codegeex.Privacy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#181818&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#26e045&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminalCursor.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D8D8D8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminalCursor.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D8D8D8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#181818&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#7CAFC2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#585858&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#7CAFC2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#86C1B9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A1B56C&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#BA8BAF&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AB4642&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiBrightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F7CA88&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#86C1B9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A1B56C&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#BA8BAF&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AB4642&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D8D8D8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.ansiYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F7CA88&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Workspace 配置</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;tab.activeForeground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tab.inactiveForeground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00ff00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tab.unfocusedActiveForeground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0000ff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tab.unfocusedInactiveForeground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffff00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;activityBar.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff00ff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;activityBar.inactiveForeground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00ffff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sideBar.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#f0f0f0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sideBarSectionHeader.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#04ff58&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置快捷键</p><blockquote><p><code>ctrl + k, ctrl + s</code> <strong>进入快捷键配置页面,</strong> 点击箭头所指方向 </p></blockquote><p><img src="https://img-blog.csdnimg.cn/62dfee2a48684c7abae7179aa9ea952a.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Place your key bindings in this file to override the defaultsauto[]</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="comment">// 格式化快捷键</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+alt+l&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editor.action.formatDocument&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorHasDocumentFormattingProvider &amp;&amp; editorHasDocumentFormattingProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !inCompositeEditor&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editor.action.copyLinesDownAction&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus &amp;&amp; !editorReadonly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><ul><li><p>配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># MySQL客户端端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># MySQL默认字符集编码</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># MySQL端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># MySQL数据库默认编码</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 表存储引擎方式 INNODB与MyISAM两种</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=MyISAM</span><br><span class="line"><span class="comment"># SQL验证模式</span></span><br><span class="line"><span class="attr">sql-mode</span>=<span class="string">&quot;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">512</span></span><br><span class="line"><span class="comment"># MySQL查询缓存</span></span><br><span class="line"><span class="attr">query_cache_size</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># 高速缓存的大小</span></span><br><span class="line"><span class="attr">table_cache</span>=<span class="number">256</span></span><br><span class="line"><span class="comment"># 内存表的大小</span></span><br><span class="line"><span class="attr">tmp_table_size</span>=<span class="number">18</span>M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接线程数</span></span><br><span class="line"><span class="attr">thread_cache_size</span>=<span class="number">8</span></span><br><span class="line"><span class="comment"># 重建索引时所允许的最大临时文件的大小</span></span><br><span class="line"><span class="attr">myisam_max_sort_file_size</span>=<span class="number">64</span>G</span><br><span class="line"><span class="comment"># MyISAM表发生变化时重新排序所需的缓冲</span></span><br><span class="line"><span class="attr">myisam_sort_buffer_size</span>=<span class="number">35</span>M</span><br><span class="line"><span class="comment"># 索引缓冲区的大小</span></span><br><span class="line"><span class="attr">key_buffer_size</span>=<span class="number">25</span>M</span><br><span class="line"><span class="comment"># 内存缓冲区大小</span></span><br><span class="line"><span class="attr">read_buffer_size</span>=<span class="number">64</span>K</span><br><span class="line"><span class="comment"># 随机读缓冲区大小</span></span><br><span class="line"><span class="attr">read_rnd_buffer_size</span>=<span class="number">256</span>K</span><br><span class="line"><span class="comment"># 排序缓冲区大小</span></span><br><span class="line"><span class="attr">sort_buffer_size</span>=<span class="number">256</span>K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小</span></span><br><span class="line"><span class="attr">innodb_additional_mem_pool_size</span>=<span class="number">2</span>M</span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">innodb_log_buffer_size</span>=<span class="number">1</span>M</span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span>=<span class="number">47</span>M</span><br><span class="line"><span class="attr">innodb_log_file_size</span>=<span class="number">24</span>M</span><br><span class="line"><span class="attr">innodb_thread_concurrency</span>=<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_bin</span>=<span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################主从服务器配置##########################</span></span><br><span class="line"><span class="comment"># server-id=1             #数据库唯一ID，主从的标识号绝对不能重复。</span></span><br><span class="line"><span class="comment"># log-bin=mysql-bin       #开启bin-log，并指定文件目录和文件名前缀</span></span><br><span class="line"><span class="comment"># binlog-do-db=huanqiu    #需要同步的数据库。如果是多个同步库，就以此格式另写几行即可。如果不指明对某个具体库同步</span></span><br><span class="line"></span><br><span class="line">，就去掉此行，表示同步所有库（除了ignore忽略的库）。</span><br><span class="line"><span class="comment"># binlog-ignore-db=mysql  #不同步mysql系统数据库。如果是多个不同步库，就以此格式另写几行；也可以在一行，中间逗号</span></span><br><span class="line"></span><br><span class="line">隔开。</span><br><span class="line"><span class="comment"># sync_binlog = 1         #确保binlog日志写入后与硬盘同步</span></span><br><span class="line"><span class="comment"># binlog_checksum = none  #跳过现有的采用checksum的事件，mysql5.6.5以后的版本中binlog_checksum=crc32,而低版本都是</span></span><br><span class="line"></span><br><span class="line"><span class="attr">binlog_checksum</span>=none</span><br><span class="line"><span class="comment"># binlog_format = mixed   #bin-log日志文件格式，设置为MIXED可以防止主键重复。</span></span><br></pre></td></tr></table></figure></li><li><p>解决数据库中文乱码</p><p><img src="https://img-blog.csdnimg.cn/3540c6d836994c3b852a1ee0ed6d2359.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG92b2Jpbi5naXRodWIuaW8=,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p></li></ul><h4 id="Windows软件安装"><a href="#Windows软件安装" class="headerlink" title="Windows软件安装"></a>Windows软件安装</h4><ul><li><code>Snipaste</code></li><li><code>FastStone Capture</code></li><li><code>ScreenToGif</code></li><li><code>Utools</code></li><li><code>MobaXterm</code></li><li><code>VMware Workstatioc Pro</code></li><li><code>向日葵</code></li><li><code>Navicat Premium 16</code></li><li><code>火绒</code></li><li><code>IDEA</code></li><li><code>Vscode</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2023/11/23/1401e6d1/"/>
      <url>/2023/11/23/1401e6d1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><ul><li><p>在<code>IDEA</code>中创建一个<code>maven</code>项目,选择<code>webapp</code>的骨架模板</p></li><li><p><code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>web.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Tomcat9 以下的配置是作为快速入门案例的配置,只此一次  --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet的全称类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet.GenericServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动的优先级,数字越小越先启作用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 资源的精确匹配规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>url-pattern</code>定义匹配规则,取值说明<ul><li>精确匹配:<code>/具体的名称</code>,只有<code>url</code>路径是具体的名称的时候才会触发<code>Servlet</code></li><li>后缀匹配: <code>*.xxx</code>只要是以<code>xxx</code>结尾的就匹配触发<code>Servlet</code></li><li>通配符匹配:<code>/*</code> 匹配所有请求,包含服务器的所有资源</li><li>通配符匹配<code>/</code>: 匹配所有请求,包含服务器的所有资源,不包括<code>.jsp</code></li></ul></li><li><code>load-on-startup</code><ol><li>元素标记容器是否应该在<code>web</code>应用程序启动的时候就加载这个<code>servlet</code></li><li>它的值必须是一个整数,表示<code>servlet</code>被加载的先后顺序</li><li>如果该元素的值为负数或者没有设置,则容器会当<code>Servlet</code>被请求时再加载</li><li>如果值为正整数或者<code>0</code>时,表示容器再因公启动时就加载并初始化这个<code>servlet</code>，值越小,<code>servlet</code>的优先级越高,就越先被加载。值相同,容器就会自己选择顺序来加载。</li></ol></li></ul></li><li><p>创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericServletDemo</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// GenericServletDemo info........</span></span><br><span class="line">        System.out.println(<span class="string">&quot;GenericServletDemo info........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>pom.xml</code>带删除线的解决</p><p><img src="https://img-blog.csdnimg.cn/0d950095a630437eba33e2da8dd0f2b2.png" alt=""></p></li><li><p><code>webapp</code>目录失效的解决</p><p><img src="https://img-blog.csdnimg.cn/8d87cb43dd534e59b4616e486b54c09e.png" alt=""></p></li><li><p>目录结构类型的调整</p><p><img src="https://img-blog.csdnimg.cn/e489a29136f84a878b6b29a68e7a758c.png" alt=""></p></li></ul><h4 id="TCP与IP"><a href="#TCP与IP" class="headerlink" title="TCP与IP"></a>TCP与IP</h4><ul><li><p>通信协议</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通信协议是指网络与计算机、计算机与计算机之间完成通信或服务所必须遵守的规则和约定，通过通信信道和设备将多个不同地理位置的数据通信系统互联起来，并使其能协同工作实现信息交换和资源共享,必须要遵守某种互相都能接受的规则,这个规则就是通信协议</p></div></li><li><p><code>TCP/IP</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在互联网发展之初,只有<code>TCP(传输控制协议)</code>和<code>IP(网际协议)</code>这两种协议,随着互联网的发展,数据的类型也越来越多,从最初的文本到图片,视频等各种各样的数据类型,在<code>TCP</code>和<code>IP</code>这两个协议的基础上不断进行扩展丰富,产生了很多新的协议,形成了一个通信协议大集合,通常称为<code>协议簇</code>,统称为<code>TCP/IP</code>协议</p></div></li><li><p><code>TCP/IP</code>特点</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>TCP/IP</code>协议最重要的特点是<code>分层管理</code>,按照分层结构,<code>TCP/IP</code>协议自下而上可分为<code>物理层、数据链路层、网络层、传输层、应用层</code>，可以理解为所有数据在传输的过程中要依次经过这<code>5</code>层模型,每层有不同的功能和用途</p></div></li><li><p><code>URI</code>和<code>URL</code>的区别</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>IP地址</code>能够唯一的标识网络中的某台计算机,如果访问的某个页面中包含了很多诸如图片、视频和音频等的内容,这些资源需要通过<code>URI</code>加载到浏览器中。<code>URI</code>的中文名称是<code>统一资源标识符</code>,使用它能够唯一的标记互联网上的资源.<code>URI</code>另一个常用的表现形式是<code>URL</code>，中文名称是<code>统一资源定位符</code>,也就是<code>网址</code>,它实际上是<code>URI</code>的一个子集</p></div></li></ul><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><ul><li><p>什么是<code>HTTP</code></p><blockquote><p>超文本传输协议，是互联网上应用最为广泛的一种网络协议,是一个基于请求与响应模式的、无状态的、应用层协议、运行于<code>TCP</code>协议基础之上</p></blockquote></li><li><p><code>HTTP</code>协议的特点</p><ul><li><p><code>HTTP</code>协议基于标准的客户端服务模型,主要由<code>请求和响应构成</code>。与其他传输协议相比,它永远都是<code>客户端发起请求,服务器接收到请求后做出响应</code></p></li><li><p><code>HTTP</code>协议允许传输<code>任意类型的数据</code>，他的传输速度很快,当客户端向服务器请求服务时,需传送请求方法和路径,请求方法常用的有<code>GET、POST</code>等,每种方法规定了客户与服务器联系的类型</p></li><li><p><code>HTTP</code>协议是一个<code>无状态</code>的协议,无状态是指<code>HTTP</code>协议<code>对于数据处理没有记忆能力</code>,这意味着如果后续处理需要前面的信息,则它必须<code>重传</code>,这导致每次连接传送的数据量增大</p></li></ul></li><li><p><code>HTTP</code>请求报文</p><blockquote><p>当浏览器向<code>web</code>服务器发出请求时,它向服务器传递了一个数据块,也就是请i去信息(<code>请求报文</code>),<code>HTTP</code>请求报文信息由<code>4</code>部分组成</p></blockquote><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li><p>请求行 请求方法/地址 URL协议/版本</p></li><li><p>请求头(<code>Requet Header</code>)</p></li><li><p>空行</p></li><li><p>请求正文</p><p><img src="https://img-blog.csdnimg.cn/62362b51ede044d6b9226e04f9a6d47d.png" alt=""></p></li></ol></div></li><li><p><code>HTTP</code>响应报文</p><ul><li><p>状态行</p></li><li><p>响应头(<code>Response Header</code>)</p></li><li><p>空行</p></li><li><p>响应正文</p><p><img src="https://img-blog.csdnimg.cn/38704a29bc4541b7908a479842e90b94.png" alt=""></p></li></ul></li></ul><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li><p>常见状态码</p><p><img src="https://img-blog.csdnimg.cn/08fbc6eade0b4f81a29e8de1effc9933.png" alt=""></p></li></ul><h4 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h4><h5 id="核心接口和类"><a href="#核心接口和类" class="headerlink" title="核心接口和类"></a>核心接口和类</h5><ul><li><p><code>Servlet</code>处理客户端请求的流程</p><p><img src="https://img-blog.csdnimg.cn/direct/886a8a8f57674a7aa64263d36109d8f0.png" alt=""></p><ul><li>客户端向<code>Web</code>服务器(<code>Tomcat</code>)发出<code>HTTP</code>请求</li><li><code>Servlet</code>容器解析客户端的<code>HTTP</code>请求,把请求信息交给指定的<code>Servlet</code>处理</li><li><code>Servlet</code>取得包括请求头在内的各种请求信息</li><li><code>Servlet</code>调用其他<code>Java</code>类的方法,完成对请求信息处理的逻辑</li><li><code>Servlet</code>实现到其他<code>Web</code>组件的跳转(<code>包括重定向和请求转发</code>)</li><li><code>Servlet</code>生成响应,并通过<code>Web</code>服务器返回<code>HTTP</code>响应给客户端</li></ul></li><li><p>核心接口和类</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>Servlet</code>体系结构中,除了实现<code>Servlet</code>接口,还可以通过继承<code>GenericServlet</code>或<code>HttpServlet</code>类,完成编写</p></div></li></ul><h5 id="Servlet-接口"><a href="#Servlet-接口" class="headerlink" title="Servlet-接口"></a>Servlet-接口</h5><ul><li><p>接口</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>在<code>Servlet API</code>中最重要的是<code>Servlet</code>接口,所有的<code>Servlet</code>都会直接或间接的与该接口发生联系,或是直接实现该接口，或间接继承自实现了该接口的类</p></div></li><li><p>该接口包含以下五个方法</p><ul><li><code>init</code></li><li><code>ServletConfig getServletConfig()</code></li><li><code>service(ServletRequest req,ServletResponse res)</code></li><li><code>String getServletInfo()</code></li><li><code>destory()</code></li></ul></li><li><p><code>GerericServlet</code>抽象类</p><blockquote><p><code>GerericServlet</code>使编写<code>Servlet</code>变得更容易。它提供生命周期方法<code>init</code>和<code>destory</code>的简单实现,要编写一般的<code>Servlet</code>，只需要重写抽象<code>service</code>方法即可</p></blockquote></li><li><p><code>HttpServlet</code>类</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>HttpServlet</code>是继承<code>GerericServlet</code>的基础上进一步的扩展</p><p>提供将要被子类化以创建适用于<code>Web</code>站点的<code>HTTP Servlet</code>的抽象类。<code>HttpServlet</code>的子类至少必须重写一个方法,该方法通常是以下这些方法之一</p></div><ul><li><code>doGet</code>: 如果<code>servlet</code>支持<code>HTTP GET</code>请求</li><li><code>doPost</code>: 用于<code>HTTP POST</code>请求</li><li><code>doPut</code>: 用于<code>HTTP PUT</code>请求</li><li><code>doDelete</code>: 用于<code>HTTP DELETE</code>请求</li></ul></li></ul><h4 id="GerericServlet"><a href="#GerericServlet" class="headerlink" title="GerericServlet"></a>GerericServlet</h4><ul><li><p>创建一个类,继承<code>GerericServlet</code>，重写<code>service</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericServletDemo</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> vod <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// GenericServletDemo info........</span></span><br><span class="line">        System.out.println(<span class="string">&quot;GenericServletDemo info........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置<code>web.xml</code>中的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet.GenericServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器访问<code>web.xml</code>中配置的映射</p><blockquote><p><code>http://localhost:8080/myServlet</code></p></blockquote></li></ul><h4 id="HttpServet"><a href="#HttpServet" class="headerlink" title="HttpServet"></a>HttpServet</h4><ul><li><p>继承<code>HttpServlet</code>，重写带有<code>http 的 service</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HttpServlet Service.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hs<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet.HttpServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hs<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hs<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器访问</p></li></ul><h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><ul><li><p>在<code>Servlet</code>的类上添加如下注解，删除<code>web.xml</code>中的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;HttpServletDemo&quot;, value = &#123;&quot;/myHttpServlet&quot;, &quot;/myy&quot;&#125;, loadOnStartup = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HttpServlet Service.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>常用属性说明</p><ul><li><code>name</code>:<code>Servlet</code>名字【可选】</li><li><code>value</code>: 配置<code>url</code>路径,可以配置多个</li><li><code>urlPatterns</code>: 配置<code>url</code>路径,和<code>value</code>作用一样,不能同时使用</li><li><code>loadOnStartup</code>: 配置<code>Servlet</code>的创建时机,如果是<code>0</code>或者<code>正数</code>,启动程序时创建,如果是<code>负数</code>，则访问时创建,数字越小优先级越高</li></ul></li></ul><h4 id="Servlet-应用"><a href="#Servlet-应用" class="headerlink" title="Servlet-应用"></a>Servlet-应用</h4><h5 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h5><ul><li><p><code>request</code>对象</p><blockquote><p>在<code>Servlet</code>中用来处理客户端请求需要用<code>doGet</code>或<code>doPost</code>方法的<code>request</code>对象</p></blockquote></li><li><p><code>get</code>和<code>post</code>的区别</p><ul><li><code>get</code><ul><li><code>get</code>提交的数据会放在<code>url</code>之后,以<code>?</code>分割<code>URL</code>和传输数据,参数之间以<code>&amp;</code>相连</li><li><code>get</code>方式明文传递，数据量小,不安全</li><li>效率高,浏览器默认请求方式为<code>GET</code>请求</li><li>对应的<code>Servlet</code>的方法是<code>doGet</code></li></ul></li><li><code>post</code><ul><li><code>post</code>方法是把提交的数据放在<code>HTTP</code>包的<code>Body</code>中</li><li>密文传递数据,数据量大,安全</li><li>效率相对没有<code>get</code>高</li><li>对应的<code>Servlet</code>的方法是<code>doPost</code></li></ul></li></ul></li><li><p><code>request</code>的主要方法</p><p><img src="https://img-blog.csdnimg.cn/1c0dfee591b24e25b4f4da62d0c237b8.png" alt=""></p><ul><li><p><code>get</code>请求收参问题</p><blockquote><p>产生乱码是因为服务器和客户端沟通的编码不一致造成的,因此解决的办法是: 在客户端和服务器之间设置一个统一的编码,之后就按照此编码进行数据的传输和接受</p></blockquote></li><li><p>测试</p><ul><li><p><code>get</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/getFormValue&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// servlet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/getFormValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// req.setCharacterEncoding(&quot;&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;表单提交的数据: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>post</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/getFormValue&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// servlet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/getFormValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// req.setCharacterEncoding(&quot;&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;表单提交的数据: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>post</code>中文数据乱码</p><blockquote><p>由于客户端是以<code>UTF-8</code>字符编码将表单数据传输到服务器的,因此服务器也需要设置以<code>UTF-8</code>字符编码进行接受</p><p>解决方案: 使用从<code>ServletRequest</code>接口继承而来的<code>setCharacterEncoding(charset)</code>方法进行统一的编码设置</p></blockquote></li></ul></li></ul></li></ul></li></ul><h5 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h5><ul><li><p><code>response</code>对象</p><blockquote><p><code>response</code>对象用于响应客户端请求并向客户端输出信息</p></blockquote></li><li><p>主要方法</p><p><img src="https://img-blog.csdnimg.cn/cb591267bd3944af8ff093eb73f04462.png" alt=""></p></li><li><p>响应数据给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时设置服务端的编码格式和客户端响应的文件及响应时的编码格式</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>解决输出中文乱码<ul><li>设置服务端响应的编码格式</li><li>设置客户端响应内容的头内容的文件类型及编码格式</li></ul></li></ul></li></ul><h5 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h5><ul><li><p>转发</p><blockquote><p>转发的作用在服务器端,将请求发送给服务器上的其他资源,以共同完成一次请求的处理</p></blockquote><ul><li><p>页面跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/目标 url-pattern&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>forward</code>跳转时,是在服务器内部跳转,地址栏不发生变化,属于同一次请求</p></li><li><p>数据传递</p><blockquote><p><code>forward</code>表示一次请求,是在服务器内部跳转,可以共享一次<code>request</code>作用域中的数据</p></blockquote><ul><li><code>request</code>作用域: 拥有存储数据的空间,作用范围是一次请求有效(<code>一次请求可以经过多次转发</code>)<ul><li>可以将数据存入<code>request</code>后,在一次请求过程中的任何位置进行获取</li><li>可传递任何数据(<code>基本数据类型、对象、数组、集合等</code>)</li></ul></li><li>存数据:<code>request.setAttribute(key,value)</code><ul><li>以键值对形式存储在<code>request</code>作用域中,<code>key</code>为<code>String</code>类型,<code>value</code>为<code>Object</code>类型</li></ul></li><li>取数据:<code>request.getAttribute(key)</code><ul><li>通过<code>String</code>类型的<code>key</code>访问<code>Object</code>类型的<code>value</code></li></ul></li></ul></li><li><p>转发的特点</p><ul><li>转发是服务器行为</li><li>转发是浏览器只做了一次访问请求</li><li>转发浏览器地址不变</li><li>转发两次跳转之间传输的信息不会丢失,所以可以通过<code>request</code>进行数据的传递</li><li>转发只能将请求转发给同一个<code>web</code>应用中的组件</li></ul></li></ul></li><li><p>重定向</p><blockquote><p>重定向作用在客户端,客户端将请求发送给服务器后,服务器响应给客户端一个新的请求地址,客户端重新发送新请求</p></blockquote><ul><li><p><code>response.sendRedirect(&quot;目标 URL&quot;)</code></p></li><li><p>数据传递</p><blockquote><p><code>sendRedirect</code>跳转时,地址栏改变,代表客户端重新发送的请求。属于两次请求</p></blockquote><ul><li><code>response</code> 没有作用域,两次<code>request</code>请求中的数据无法共享</li><li>传递数据: 通过<code>URI</code>的拼接进行数据传递(<code>/b?username=tom</code>)</li><li>获取数据:<code>request.getParameter(&quot;username&quot;)</code></li></ul></li><li><p>重定向特点</p><ul><li>重定向是客户端行为</li><li>重定向是浏览器做了至少两次的访问请求</li><li>重定向浏览器地址改变</li><li>重定向两次跳转之间传输的信息会丢失</li><li>重定向可以指向任何的资源,包括当前应用程序中的其他资源,同一个站点上的其他应用程序中的资源或者其他站点的资源</li></ul></li></ul></li><li><p>对比</p><p><img src="https://img-blog.csdnimg.cn/direct/a83b89ac1e174115a80a0366a41cd34f.png" alt=""></p></li></ul><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><ul><li><p><code>IDEA</code>控制台乱码解决</p><ul><li><p><code>File Encodings</code>配置为<code>UTF-8</code></p></li><li><p><code>vm options</code>中添加如下参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Tomcat VM</code>添加参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure></li><li><p><code>JSP</code>页面乱码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet-生命周期"></a>Servlet-生命周期</h4><ul><li><p>初始化阶段</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当客户端向<code>Servlet</code>容器发出<code>HTTP</code>请求访问<code>Servlet</code>时,<code>Servlet</code>容器首先会解析请求,检查内存中<code>是否已经有了该 Servlet</code>对象,如果有,直接使用该<code>Servlet</code>对象,如果没有,就创建<code>Servlet</code>实例对象,然后通过调用<code>init()</code>方法完成<code>Servlet</code>的初始化,需要注意的是,在<code>Servlet</code>的整个生命周期内,他的<code>init()</code>方法只被调用一次</p></div></li><li><p>运行阶段</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>完成<code>Servlet</code>初始化以后,服务器会为客户端请求创建一个<code>ServletRequest</code>对象和一个<code>ServletResponse</code>对象,并将他们作为参数传给<code>Servlet</code>的<code>service</code>方法,<code>service()</code>方法通过<code>ServletRequest</code>对象来获取客户端的相关信息和请求信息,处理完成后,通过<code>ServletResponse</code>对象来设置响应信息,在<code>Servlet</code>的整个生命周期中，<code>service()</code>方法可以被调用多次,当有多个客户端并发请求<code>Servlet</code>时,服务器会启动多个线程执行该<code>Servlet</code>的<code>service()</code>方法</p></div></li><li><p>销毁阶段</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当服务器关闭或<code>web</code>应用被移除出容器时,<code>Servlet</code>随着<code>web</code>应用的销毁而销毁.在销毁<code>Servlet</code>之前，<code>Servlet</code>容器会调用<code>Service</code>的<code>destory()</code>方法,以便让<code>Servlet</code>对象释放它所占用的资源。在<code>Servlet</code>的整个生命周期中,<code>destory()</code>也只被调用一次</p><p>需要注意的是,<code>Servlet</code>对象一旦创建就会驻留在内存中等待客户端的访问,直到服务器关闭，或<code>web</code>应用被移除出容器时<code>Servlet</code>对象才会销毁</p></div></li></ul><h4 id="Servlet-特性"><a href="#Servlet-特性" class="headerlink" title="Servlet 特性"></a>Servlet 特性</h4><ul><li><p>线程安全问题</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Servlet</code>在访问之后,会执行实例化操作,创建一个<code>Servlet</code>对象,而我们<code>Tomcat</code>容器可以同时多个线程并发访问同一个<code>Servlet</code>，如果在方法中对成员变量做修改操作,就会有线程安全的问题</p></div></li><li><p>线程安全问题如何解决</p><blockquote><p>尽量使用局部的变量</p></blockquote></li></ul><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><ul><li>状态管理分类<ul><li>客户端状态管理技术: 将状态保存在客户端,代表性的是<code>Cookie</code>技术</li><li>服务器状态管理技术: 将状态保存在服务器端,代表性的是<code>Session</code>技术(服务器传递<code>sessionID</code>时需要使用<code>Cookie</code>的方式)和<code>application</code></li></ul></li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ul><li><p>什么是<code>Cookie</code></p><ul><li><code>Cookie</code>是在浏览器访问<code>web</code>服务器的某个资源时,由<code>web</code>服务器在<code>HTTP</code>响应消息头中附带传给浏览器的一小段数据</li><li>一旦<code>web</code>浏览器保存了某个<code>Cookie</code>,那么它在以后每次访问该<code>web</code>服务器时,都应在<code>HTTP</code>请求头中将这个<code>Cookie</code>回传给<code>Web</code>服务器</li><li>一个<code>Cookie</code>主要由标识该信息的名称(<code>name</code>)和(<code>value</code>)组成</li></ul></li><li><p>创建<code>Cookie</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建 Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">ck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 Cookie 可以被访问的路径</span></span><br><span class="line">        ck.setPath(<span class="string">&quot;/xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// 内存存储</span></span><br><span class="line">        <span class="comment">// 取值有三种: &gt;0:有效期,单位秒</span></span><br><span class="line">        <span class="comment">// =0: 浏览器关闭</span></span><br><span class="line">        <span class="comment">// &lt;=:内存存储,默认 -1</span></span><br><span class="line">        ck.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加到 response 对象中,响应时发送给客户端</span></span><br><span class="line">        resp.addCookie(ck);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取<code>Cookie</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">ck</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取所有的 Cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">// 遍历 Cookie</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="comment">// 检索出自己的 cookie</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;xxx&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="comment">// 记录 cookie 的值</span></span><br><span class="line">                code = ck.getValue();</span><br><span class="line">                ck = <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;&quot;</span>, code);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>Cookie</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需要保证 Cookie 的名和路径一直即可修改</span></span><br></pre></td></tr></table></figure></li><li><p><code>Cookie</code>的编码与解码</p><blockquote><p><code>Cookie</code>默认不支持<code>中文</code>,只能包含<code>ASCII</code>字符,所以<code>Cookie</code>需要对<code>Unicode</code>字符进行编码,否则会出现乱码</p></blockquote><ul><li>编码可以使用<code>java.net.URLEncoder</code>类的<code>encode(String str,String encoding)</code>方法</li><li>解码使用<code>java.net.URLDecoder</code>类的<code>decode(String str,String encoding)</code>方法</li></ul></li><li><p>创建带有中文的<code>Cookie</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">ck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(</span><br><span class="line">                URLEncoder.encode(<span class="string">&quot;姓名-键&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>),</span><br><span class="line">                URLEncoder.encode(<span class="string">&quot;老李-值&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 发送到客户端</span></span><br><span class="line">        resp.addCookie(ck);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Cookie</code>优缺点</p><ul><li>优点<ul><li>可配置到期规则</li><li>简单性: <code>Cookie</code>是一种基于文本的轻量结构,包含简单的键值对</li><li>数据持久性:<code>Cookie</code>默认在国企之前是可以一直存在客户端浏览器上的</li></ul></li><li>缺点<ul><li>大小受限制: 大多数浏览器对<code>Cookie</code>的大小有<code>4k、8k</code>字节的限制</li><li>用户配置为禁用: 有些用户禁用了浏览器或客户端设备接受<code>Cookie</code>的能力,因此限制了这一功能</li><li>潜在安全风险:<code>Cookie</code>可能会被篡改,会对安全性造成潜在风险或者导致依赖于<code>Cookie</code>的应用程序失败</li></ul></li></ul></li></ul><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><ul><li><p>概述</p><ul><li><code>session</code>用于记录用户的状态,<code>Session</code>指的是在一段时间内,单个客户端与<code>web</code>服务器的一连串相关的交互过程</li><li>在一个<code>session</code>中,客户可能会多次请求访问同一个资源,也有可能请求访问各种不同的服务器资源</li></ul></li><li><p><code>session</code>原理</p><ul><li>服务器会为每一次会话分配一个<code>Session</code>对象</li><li>同一个浏览器发起的多次请求,同属于一次会话</li><li>首次使用到<code>Session</code>时,服务器会自动创建<code>sesson</code>，并创建<code>cookie</code>存储<code>sessionId</code>发送回客户端</li><li><code>session 是由服务端创建的</code></li></ul></li><li><p>获取<code>session</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取 session </span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 唯一标记</span></span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Session</code>保存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;key&quot;</span>,value); <span class="comment">// 以键值对的形式存储到 session 作用域中</span></span><br></pre></td></tr></table></figure></li><li><p><code>session</code>获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.getAttribute(<span class="string">&quot;key&quot;</span>); <span class="comment">// 通过 String 类型的 Key 访问类型的 value  </span></span><br></pre></td></tr></table></figure></li><li><p>移除数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.removeAttribute(<span class="string">&quot;key&quot;</span>); <span class="comment">// 从 session 中删除数据</span></span><br></pre></td></tr></table></figure></li><li><p><code>Session</code>与<code>Request</code>应用区别</p><ul><li><code>request</code> 是一次请求有效,请求改变,则<code>request</code>改变</li><li><code>session</code>是一次会话有效,浏览器改变,则<code>session</code>改变</li></ul></li><li><p><code>session</code>的生命周期</p><ul><li><p>开始: 第一次使用到<code>session</code>的请求产生,则创建<code>session</code></p></li><li><p>结束</p><ul><li><p>浏览器关闭,则失效</p></li><li><p><code>session</code>超时,则失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(seconds); <span class="comment">// 设置最大有效时间(单位: 秒)</span></span><br></pre></td></tr></table></figure></li><li><p>手工销毁,则失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.invalidate(); <span class="comment">// 登录退出、注销</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="ServletContext-对象"><a href="#ServletContext-对象" class="headerlink" title="ServletContext 对象"></a>ServletContext 对象</h4><ul><li>概述<ul><li>全局对象,也拥有作用域,对应一个<code>Tomcat</code>中的<code>web</code>应用</li><li>当<code>web</code>服务器启动时,会为每一个<code>web</code>应用程序创建一块共享的存储区域(<code>ServletContext</code>)</li><li><code>ServletContext</code>在<code>web</code>服务器启动时创建,服务器关闭时销毁</li></ul></li><li><p>获取<code>ServletContext</code>对象</p><ul><li><code>GenericServlet</code>提供了<code>getServletContext()</code>方法<code>【推荐 this.getServletContext()】</code></li><li><code>HttpServletRequest</code>提供了<code>getServletContext()</code>方法<code>【推荐】</code></li><li><code>HttpSession</code>提供了<code>getServletContext()</code>方法</li></ul></li><li><p><code>ServletContext</code>作用</p><ul><li><p>获取项目真实路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/realPath&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取当前项目在服务器发布的真实路径</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> ctx.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// G:\wnxy\servlet-demo\target\servlet-demo\</span></span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取项目上下文路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前项目的上下文路径(应用程序名称)</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> ctx.getContextPath();</span><br><span class="line"><span class="type">String</span> <span class="variable">reqContextPath</span> <span class="operator">=</span> req.getContextPath();</span><br><span class="line">System.out.println(<span class="string">&quot;上下文路径: &quot;</span> + contextPath);</span><br><span class="line">System.out.println(<span class="string">&quot;上下文路径: &quot;</span> + reqContextPath);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>全局容器</p><blockquote><p><code>ServletContext</code>拥有作用于,可以存储数据到全局容器中</p></blockquote><ul><li><p>存储数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">ctx.setAttribute(<span class="string">&quot;key&quot;</span>,value);</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>移除数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ServletContext</code> 特点</p><ul><li>唯一性: 一个应用对应一个<code>servlet</code>上下文</li><li>生命周期: 只要容器不关闭或者应用不卸载,<code>servlet</code>上下文就一直在</li></ul></li><li><p>应用</p><blockquote><p>站点的计数器</p></blockquote></li><li><p>作用域总结</p><ul><li><code>HttpServletRequest</code>: 一次请求,请求响应之前有效</li><li><code>HttpSession</code>: 一次会话开始,浏览器不关闭或不超时之前有效</li><li><code>ServletContext</code>: 服务器启动开始,服务器停止之前有效</li></ul></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>过滤器(<code>Filter</code>)是处于客户端与服务器目标资源之间的一道过滤技术</p></div></li><li><p>作用</p><ul><li>执行地位在<code>Servlet</code>之前,客户端发送请求时,会先经过<code>Filter</code>，再到达目标<code>Servlet</code>中;响应时,会根据执行流程再次反向执行<code>Filter</code></li><li>可以解决多个<code>Servlet</code>共性代码的冗余问题(<code>例如: 乱码处理、登录验证</code>)</li></ul></li><li><p>实现过程</p><ul><li><p>编写<code>java</code>类实现<code>Filter</code>接口</p></li><li><p>在<code>doFilter</code>中编写拦截逻辑</p></li><li><p>设置拦截路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/selectAll&quot;)</span> <span class="comment">// 拦截的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置编码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放行,向下传递</span></span><br><span class="line">         filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>过滤器配置</p><ul><li><p>注解配置</p></li><li><p><code>web.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml 配置过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器全类称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.example.filter.GlobalFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 映射路径配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤的 url 匹配规则和 Servlet 类似 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>过滤器链和优先级</p><ul><li><p>过滤器链</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>客户端对服务器请求之后,服务器调用<code>Servlet</code>之前会执行一组过滤器(<code>多个过滤器</code>),那么这组过滤器就称为一条过滤器链</p><p>每个过滤器实现某个特定的功能,当第一个<code>Filter</code>的<code>doFilter</code>方法被调用时,<code>Web</code>服务器会创建一个代表<code>Filter</code>链的<code>FilterChain</code>对象传递给该方法,在<code>doFilter</code>方法中,开发人员如果调用了<code>FilterChain</code>对象的<code>doFilter</code>方法,则<code>web</code>服务器会检查<code>FilterChain</code>对象中是否还有<code>filter</code>，如果有,则调用第二个<code>filter</code>，如果没有,则调用目标资源</p></div></li><li><p>过滤器的优先级</p><ul><li>如果为注解的话,是按照类全名称的字符串顺序决定作用顺序</li><li>如果是<code>web.xml</code>，按照<code>filter-mapping</code>注册顺序,从上往下</li><li><code>web.xml</code>配置高于注解方式</li><li>如果注解和<code>web.xml</code>同时配置,会创建多个过滤器对象,造成过滤多次</li></ul></li></ul></li><li><p><code>Filter</code>的生命周期</p><ul><li><p>初始化阶段</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li><code>Filter</code>的初始化阶段分为两个步骤<ol><li>创建<code>Filter</code>对象,服务器在启动时，它会根据<code>web.xml</code>中声明的<code>Filter</code>顺序依次生成<code>Filter</code>对象</li><li>执行<code>init()</code>方法,创建<code>Filter</code>对象之后,服务器将调用<code>init()</code>方法对<code>Filter</code>对象进行初始化,在这个过程中,<code>Filter</code>对象使用服务器为其提供的<code>FilterConfig</code>对象,从<code>web.xml</code>文件中获取初始化的参数,在<code>Filter</code>的整个生命周期内,<code>init()</code>方法只会被执行一次</li></ol></li></ul></div></li><li><p>执行<code>doFilter()</code>方法</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当客户端请求目标资源时,服务器会筛选出符合映射条件的<code>Filter</code>，并根据<code>web.xml</code>中的配置顺序依次调用他们的<code>doFileter()</code>方法,在对多个拦截器的调用过程中,当前过滤器通过<code>FilterChain</code>对象的<code>doFilter()</code>方法将请求传给下一个过滤器或其他资源</p></div></li><li><p>销毁阶段</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当<code>web</code>应用终止时,服务器调用<code>destory()</code>方法来释放资源,然后销毁<code>Filter</code>对象</p></div></li></ul></li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li><p>前端页面要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">文件上传表单:</span></span><br><span class="line"><span class="comment">1. 表单调教类型: method=&quot;post&quot;</span></span><br><span class="line"><span class="comment">2. 表单类型: enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line"><span class="comment">3. 表单元素类型: 文件域设置 name 属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后台实现</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>使用注解<code>@MultipartConfig</code>将一个<code>Servlet</code>标识为支持文件上传。<code>Servlet</code>将<code>multipart/form-data</code>的<code>POST</code>请求封装成<code>Part</code>,通过<code>Part</code>对上传的文件进行操作</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是文件上传表单,一定要加这个注解</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/uploadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置请求的编码格式</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取普通表单项</span></span><br><span class="line">        <span class="comment">// String name = req.getParameter(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">// 通过 getPart(name) 方法获取 Part 对象 (name代表的是页面中 file 文件域的 name 属性值)</span></span><br><span class="line">        <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;myfile&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过 Part 对象,获取上传的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> part.getSubmittedFileName();</span><br><span class="line">        <span class="comment">// 获取上传文件需要村烦的路径(得到项目存放的真实路径)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 将文件上传到指定位置</span></span><br><span class="line">        part.write(realPath + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li><p>文件下载</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>文件下载,即将服务器上的资源下载(拷贝)到本地,我们可以通过两种方式下载,第一种是通过超链接本身的特性来下载；第二种是通过代码来下载</p></div></li><li><p>默认下载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当超链接遇到浏览器不识别的资源时,会自动下载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;test.zip&quot;</span>&gt;</span>超链接下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定<code>download</code>属性下载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当超链接遇到浏览器识别的资源时,默认不会自动下载。通过 download 属性可进行下载  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;test.txt&quot;</span> <span class="attr">doanload</span>&gt;</span>超链接下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bd4e1d5b538c4d10a63db7b2a721dfb6.png" alt="点击自动打开可识别的文件"></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>download</code>属性可以不写任何信息,会自动使用默认文件名。如果设置了<code>download</code>属性的值,则使用设置的值作为文件名。当用户打开浏览器点击链接的时候就会直接下载文件</p></div></li><li><p>后台实现下载</p><ul><li><p>需要通过<code>response.setContentType</code>方法设置<code>Content-type</code>头字段的值,为浏览器无法使用某种方式或激活某个程序来处理<code>MIME</code>类型，例如:<code>application/octet-stream</code>或<code>application/x-msdownload</code>等</p></li><li><p>需要通过<code>response.setHeader</code>方法设置<code>Content-Disposition</code>头的值为<code>attachment;filename=文件名</code></p></li><li><p>读取下载文件,调用<code>response.getOutputStream</code>方法向客户端写入附件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 设置请求的编码格式</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取参数(得到要下载的文件名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;fileName&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 参数的非空判断 trim(): 去除字符串前后的空格</span></span><br><span class="line">        <span class="keyword">if</span> (fileName == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(fileName.trim())) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;请输入要下载的文件名!&quot;</span>);</span><br><span class="line">            resp.getWriter().close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到文件存放的路径【通过input选择文件也必须在此路径下选择任意文件】</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/file/&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过路径得到 file 对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path + fileName);</span><br><span class="line">        <span class="comment">// 判断文件对象是否存在并且是一个标准文件</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 设置响应类型(浏览器无法使用某种方式或激活某个程序来处理的 MIME 类型)</span></span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置响应头</span></span><br><span class="line">            resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class="line">            <span class="comment">// 得到 file 文件输入流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">// 得到字节输出流</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">            <span class="comment">// 定义 byte 数组</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 定义长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            out.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/download&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="JSP-九大内置对象"><a href="#JSP-九大内置对象" class="headerlink" title="JSP-九大内置对象"></a>JSP-九大内置对象</h4><ul><li><code>pageContext</code>-<code>JSP</code>页面容器</li><li><code>request</code>请求对象</li><li><code>session</code>会话对象</li><li><code>application</code>全局对象</li><li><code>response</code>响应对象</li><li><code>config</code>配置对象(<code>服务器配置信息</code>)</li><li><code>out</code>输出对象</li><li><code>page</code>当前<code>JSP</code>页面对象(<code>相当于 java</code>中的<code>this</code>)</li><li><code>exception</code>异常对象</li></ul><h4 id="四种范围对象作用域"><a href="#四种范围对象作用域" class="headerlink" title="四种范围对象作用域"></a>四种范围对象作用域</h4><ul><li><code>pageContext</code></li><li><code>request</code></li><li><code>session</code></li><li><code>application</code></li></ul><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><ul><li><p>简介</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Listener</code>又称监听器,用于对<code>Web</code>应用中特定的事件进行监听.当被监听的事件发生时,<code>Listener</code>将会触发对应的方法来实现一些特殊的功能。</p><p>一个<code>Listener</code>就是一个实现特定接口的<code>Java</code>类,它用于监听另一个<code>Java</code>类对象的方法调用或属性改变后,<code>Listener</code>的某个方法将立即被执行。<code>Listener</code>的工作原理如下:</p><p><img src="https://img-blog.csdnimg.cn/direct/c38b5f4aaf9445a5ad0a2eefc7e1ff00.png" alt=""></p></div></li><li><p>使用步骤</p><ul><li>定义一个类,实现<code>ServletContextListener</code>接口</li><li>复写方法</li><li>配置<ul><li><code>web.xml</code></li><li><code>注解</code></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离的-JavaWeb</title>
      <link href="/2023/11/23/290842ad/"/>
      <url>/2023/11/23/290842ad/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="前后端分离的-JavaWeb"><a href="#前后端分离的-JavaWeb" class="headerlink" title="前后端分离的-JavaWeb"></a>前后端分离的-JavaWeb</h3><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul><li><p>什么是<code>JavaScript</code></p><ul><li><code>JavaScript(简称 JS)</code>是一门跨平台,面向对象的脚本语言。是用来控制网页行为的,它能使网页可交互</li><li><code>JavaScript</code>和<code>Java</code>是完全不同的语言,不论是概念还是设计。但是基础语法类似</li><li><code>JavaScript</code>在<code>1995</code>年由<code>Brendan Eich</code>发明,并于<code>1997</code>年成为<code>ECMA</code>标准</li><li><code>ECMAScript(ES6)</code>是最新的<code>JavaScript</code>版本(<code>发布于 2015 年</code>)</li></ul></li><li><p>基本使用</p><ul><li><p>引入方式</p><ul><li><p>内部脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部脚本</p></li></ul></li><li><p>基础语法</p><ul><li><p>数据类型、运算符、流程控制语句</p><ul><li><p>数据类型(<code>JavaScript</code>的数据类型分为: <code>原始类型</code>和<code>引用类型</code>)</p><ul><li><code>number</code>: 数字(整数、小数、<code>NaN(not a number)</code>)</li><li><code>String</code>: 字符串(单、双引号皆可)</li><li><code>boolean</code>: <code>true、false</code></li><li><code>null</code>: 对象为空</li><li><code>undefined</code>: 当声明的变量未初始化时,该变量的默认值是<code>undefined</code></li></ul><blockquote><p>使用<code>typeof</code>可以获取数据类型</p></blockquote></li></ul></li><li><p>运算符</p><ul><li><code>==</code>会进行数据类型转换</li><li><code>===</code>不会进行数据类型转换</li></ul></li><li><p>数据类型转换</p><ul><li>字符串类型转为数字<ul><li>将字符串字面值转为数字.如果字面值不是数字,则转为<code>NaN</code></li></ul></li><li>其他类型转为<code>boolean</code><ul><li><code>Number</code>:<code>0</code>和<code>NaN</code>为<code>false</code>,其他均转为<code>true</code></li><li><code>String</code>: 空字符串为<code>false</code>,其他均转为<code>true</code></li><li><code>Null</code>和<code>undefined</code>: 均转为<code>false</code></li></ul></li></ul></li></ul></li><li><p>函数</p></li><li><p>对象</p><ul><li><p><code>Array</code></p><ul><li><p>创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特点: 长度可变，类型可变</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br></pre></td></tr></table></figure></li><li><p>数组属性</p><ul><li><code>length</code>: 设置或返回数组中元素的数量</li></ul></li><li><p>方法</p><ul><li><p><code>forEach()</code>: 遍历数组中的每个有值的元素,并调用一次传入的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>push()</code>: 将新元素添加到数组的末尾,并返回新的长度</p></li><li><p><code>splice()</code>: 从数组中删除元素</p></li></ul></li></ul></li><li><p><code>String</code></p><ul><li><p>创建字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>字符串<code>属性</code></p><ul><li><code>length</code>: 获取字符串的长度</li></ul></li><li><p>字符串方法</p><ul><li><code>charAt()</code>: 返回在指定位置的字符</li><li><code>indexOf()</code>: 检索字符串</li><li><code>trim()</code>: 去除字符串两边的空格</li><li><code>substring()</code>: 提取字符串中两个指定的索引号之间的字符</li></ul></li></ul></li><li><p><code>JSON</code></p><ul><li><p><code>JSON</code>字符串转为<code>JS</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(userStr);</span><br></pre></td></tr></table></figure></li><li><p><code>JS</code>对象转为<code>JSON</code>字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(jsObject);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>BOM</code></p><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Browser Object Model</code>浏览器对象模型,允许<code>JavaScript</code>与浏览器对话,<code>JavaScript</code>将浏览器的各个组成部分封装为对象</p></div></li><li><p>组成</p><ul><li><code>window</code>: 浏览器窗口对象<ul><li>属性<ul><li><code>history</code>: 对<code>History</code>对象的只读引用</li><li><code>location</code>：用于窗口或框架的<code>Location</code>对象</li><li><code>navigator</code>: 对<code>Navigator</code>对象的只读引用</li></ul></li><li>方法<ul><li><code>alert</code>: 显示带有一段消息和一个确认按钮的警告框</li><li><code>confirm</code>: 显示带有一段消息以及确认按钮和取消按钮的对话框</li><li><code>setInterval</code>: 按照指定的周期(<code>以毫秒计</code>)来调用函数或计算表达式</li><li><code>setTimeout</code>: 在指定的毫秒数后调用函数或计算表达式</li></ul></li></ul></li><li><code>Navigator</code>: 浏览器对象</li><li><code>Screen</code>: 屏幕对象</li><li><code>History</code>: 历史记录对象</li><li><code>Location</code>: 地址栏对象<ul><li>属性<ul><li><code>href</code>: 设置或返回完整的<code>URL</code></li></ul></li></ul></li></ul></li></ul></li><li><p><code>DOM</code></p><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>Document Object Model</code>,文档对象模型</p></div></li><li><p>组成</p><ul><li><code>Document</code>: 整个文档对象</li><li><code>Element</code>: 元素对象</li><li><code>Attribute</code>: 属性对象</li><li><code>Text</code>：文本对象</li><li><code>Comment</code>: 注释对象</li></ul></li></ul></li></ul></li><li><p>事件监听</p></li></ul></li></ul><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h5 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h5><ul><li><p>常见指令</p><p><img src="https://img-blog.csdnimg.cn/cef8b50e9dda4e75bf17ef887251a04f.png" alt=""></p></li></ul><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><ul><li>生命周期: 指一个对象从创建到销毁的整个过程</li><li>生命周期的八个阶段: 每触发一个生命周期事件,会自动执行一个生命周期方法(<code>钩子函数</code>)</li></ul><h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><ul><li>概念: <code>Asynchronous JavaScript And XML</code>，异步的<code>JavaScript</code>和<code>XML</code></li><li><p>作用</p><ul><li>数据交换: 通过<code>Ajax</code>可以给服务器发送请求,并获取服务器响应的数据</li><li>异步交互: 可以在<code>不重新加载整个页面</code>的情况下,与服务器交换数据并<code>更新部分网页</code>的技术</li></ul></li><li><p>同步与异步</p><ul><li><p>同步</p><p><img src="https://img-blog.csdnimg.cn/6c5a679315e44ba8b76cc9b01c6c8be2.png" alt=""></p></li><li><p>异步</p><p><img src="https://img-blog.csdnimg.cn/69c8cf380a7c44458a792444d551b52b.png" alt=""></p></li></ul></li><li><p>原生<code>Ajax</code></p><ul><li><p>创建<code>XMLHttpRequest</code>对象: 用于和服务器交换数据</p></li><li><p>向服务器发送请求</p></li><li><p>获取服务器响应数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 创建 XMLHttpRequest</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 发送异步请求</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="title function_">send</span>(); <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 获取服务响应数据</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>).<span class="property">innerHTML</span> =</span></span><br><span class="line"><span class="language-javascript">              xmlHttpRequest.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>axios</code></p></li></ul><h4 id="yApi"><a href="#yApi" class="headerlink" title="yApi"></a>yApi</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g yapi-cli --registry https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行 yapi server 启动可视化部署程序，输入相应的配置和点击开始部署，就能完成整个网站的部署。部署完成之后，可按照提示信息，执行 node/&#123;网站路径/server/app.js&#125; 启动服务器。在浏览器打开指定url, 点击登录输入您刚才设置的管理员邮箱，默认密码(ymfe.org) 登录系统（默认密码可在个人中心修改）。</span></span><br><span class="line"><span class="attr">yapi</span> <span class="string">server</span></span><br></pre></td></tr></table></figure></li><li><p>访问地址</p><blockquote><p><code>127.0.0.1:9090</code></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/11/22/8fe47ff4/"/>
      <url>/2023/11/22/8fe47ff4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><ul><li><p>修改<code>root</code>账户密码</p><ul><li><p>先使用原始密码(<code>安装时设置的密码</code>)登录</p></li><li><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改 root 用户的密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用于重新加载用户权限表</span></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 退出</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> [jdbc]</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8</span><br><span class="line">  <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><p><img src="https://img-blog.csdnimg.cn/0ce28dd58bae42e79df53640e08fa676.png" alt=""></p><ul><li><p>添加测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;开发部&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;测试部&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;行政部&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;对对对&#x27;</span>, <span class="string">&#x27;NULL&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;测试部1&#x27;</span>, <span class="string">&#x27;暂无&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;kkk&#x27;</span>, <span class="string">&#x27;rrrr&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;1112&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept  <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>规范</p><p><img src="https://img-blog.csdnimg.cn/d844b2d2880544daa892d246ced2e1ff.png" alt=""></p></li><li><p>概念</p><ul><li><code>JDBC</code>就是使用<code>Java</code>语言操作关系数据库的一套<code>API</code></li><li>全程:(<code>Java DataBase Connectivity</code>)  <code>Java</code> 数据库连接</li></ul></li><li><p>本质</p><ul><li>官方(<code>sun</code>公司)定义的一套操作所有关系型数据库的规则,即<code>接口</code></li><li>各个数据库厂商去实现这套接口,提供数据库驱动的<code>jar</code>包</li><li>我们可以实现这套接口(<code>JDBC</code>)编程,真正执行的代码是驱动<code>jar</code>包中的实现类</li></ul></li><li><p>好处</p><ul><li>各数据库厂商使用相同的接口,<code>Java</code>代码不需要针对不同数据库分别开发</li><li>可随时替换底层数据库,访问数据库的<code>Java</code>代码基本不变</li></ul></li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li><p>下载 <code>jar</code>包</p><ul><li><p>查看当前系统安装的<code>MySQL</code>版本</p><p><img src="https://img-blog.csdnimg.cn/61c1add3413245dcb08e266b0dc71d81.png" alt=""></p></li><li><p>浏览器进入<code>https://mvnrepository.com/</code></p></li><li><p>搜索<code>MySQL Connector/J</code></p><p><img src="https://img-blog.csdnimg.cn/4e676fbd0c6e41aa9ec1d59ce0d1f37a.png" alt="前两根据安装的版本选择驱动"></p></li><li><p>下载<code>jar</code>包</p><p><img src="https://img-blog.csdnimg.cn/de252fdcbe6e4236aa3b3cd63096b672.png" alt="根据使用量选择下载,点击2处,进入下图"></p><p><img src="https://img-blog.csdnimg.cn/f12515f1b77943b0a94ebcf08ed08311.png" alt=""></p></li><li><p>在<code>IDEA</code>新建项目,之后新建一个<code>lib</code>文件夹,存放<code>mysql</code>的<code>jar</code>包</p><ol><li><p>点击下图的<code>Add as Library</code></p><p><img src="https://img-blog.csdnimg.cn/6943e01e5fce4141961d61e03ea0b3b8.png" alt=""></p></li><li><p>后续的弹窗直接点击<code>OK</code></p></li></ol></li></ul></li><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC 快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 定义 SQL 语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update dept set deptName=&#x27;政教处&#x27; where did=&#x27;5&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 执行 SQL 对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 5. 执行 SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">isUpdate</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6. 处理返回结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="API-详解"><a href="#API-详解" class="headerlink" title="API-详解"></a>API-详解</h4><ul><li><p><code>DriverManager</code></p><ul><li><p>功能</p><ol><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5+ 之后的版本可以省略不写</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>Driver</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// static</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取连接</p><ul><li><code>url</code>: <code>jdbc:mysql://localhost:3306/jdbc?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</code></li><li><code>user</code>: 数据库登录用户</li><li><code>password</code>: 数据库登录密码</li><li><code>MySQL8</code>配置<code>url</code>的一些细节<ol><li><code>Driver =&gt; com.mysql.cj.jdbc.Driver</code></li><li><code>MySQL8</code>以上版本不需要建立<code>SSL</code>连接的,需要显示关闭</li><li><code>allowPublicKeyRetrieval=true</code>允许客户端从服务器获取公钥</li><li>最后还需要设置<code>CST【时区】</code></li></ol></li></ul></li></ol></li></ul></li><li><p><code>Connection</code></p><ol><li><p>获取执行<code>SQL</code>对象</p><ul><li><p>普通执行<code>SQL</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">statement</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>预编译<code>SQL</code>的执行<code>SQL</code>对象: <code>防止 SQL</code>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">preparedStatement</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure></li><li><p>执行存储过程的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement <span class="title function_">callableStatement</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>事务管理</p><ul><li><p><code>MySQL</code>事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务: begin; start transaction;</span></span><br><span class="line"><span class="comment">-- 提交事务: commit;</span></span><br><span class="line"><span class="comment">-- 回滚事务: rollback;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL 默认自动提交事务</span></span><br></pre></td></tr></table></figure></li><li><p><code>JDBC</code>事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启事务: setAutoCommit(boolean autoCommit); true为自动提交事务;false为手动提交事务,即显示手动的开启事务</span></span><br><span class="line"><span class="comment">// 提交事务: commit()</span></span><br><span class="line"><span class="comment">// 回滚事务: rollback();</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC 快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 手动开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 3. 定义 SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update dept set deptName=&#x27;政教处&#x27; where did=&#x27;5&#x27;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update dept set deptName=&#x27;政教处&#x27; where did=&#x27;5&#x27;&quot;</span>;</span><br><span class="line">            <span class="comment">// 4. 执行 SQL 对象</span></span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            <span class="comment">// 5. 执行 SQL</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">isUpdate1</span> <span class="operator">=</span> statement.executeUpdate(sql1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">isUpdate2</span> <span class="operator">=</span> statement.executeUpdate(sql1);</span><br><span class="line">            <span class="comment">// 成功后提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 事务回滚</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 处理返回结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p><code>Statement</code></p><ul><li><p>作用: 执行<code>SQL</code>语句</p></li><li><p>执行<code>SQL</code>语句</p><ul><li><p>增、删、改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(sql)</span>: 执行 DML、DDL 语句</span><br></pre></td></tr></table></figure><ul><li>返回值<ul><li><code>DML</code>语句影响的行数</li><li><code>DDL</code>语句执行后,执行成功也可能返回<code>0</code></li></ul></li></ul></li><li><p>查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(sql)</span>: 执行 DQL 语句</span><br></pre></td></tr></table></figure><ul><li>返回值: <code>ResultSet</code>结果集对象</li></ul></li></ul></li></ul></li><li><p><code>ResultSet</code></p><ul><li><p>作用: 封装了<code>DQL</code>查询语句的结果</p></li><li><p>获取查询结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">next</span><span class="params">()</span>; </span><br><span class="line"><span class="comment">// 1. 将光标从当前位置向前移动一行</span></span><br><span class="line"><span class="comment">// 2. 判断当前行是否为有效行</span></span><br></pre></td></tr></table></figure><ul><li>返回值<ul><li><code>true</code>: 有效行,当前行有数据</li><li><code>false</code>: 无效行,当前行没有数据</li></ul></li></ul></li><li><p>数据获取</p><ul><li><code>int</code>类型: <code>getInt(参数)，int 列的编号,从 1 开始</code></li><li><code>String</code>类型: <code>getString(参数)</code></li></ul></li></ul></li><li><p><code>PreparedStatement</code></p><ul><li><p>作用: 预编译<code>SQL</code>语句并执行: 预防<code>SQL</code>注入问题</p></li><li><p><code>SQL</code>注入</p><blockquote><p><code>SQL</code>注入是通过操作输入来修改实现定义好的<code>SQL</code>语句,用以达到执行代码对服务器进行<code>攻击</code>的方法</p></blockquote></li><li><p>基本使用</p><ol><li><p>获取<code>PreparedStatement</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQL 语句中的参数值,使用 ？ 占位符代替</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept where did=?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过 conn 对象获取 preparedStatement,并传入对应的 SQL</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure></li><li><p>设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PreparedStatement 对象: setXxx(参数1,值): 给出现的 ? 赋值;</span></span><br><span class="line"><span class="comment">// 3. 定义 SQL 语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept where did=?&quot;</span>;</span><br><span class="line"><span class="comment">// 4. 执行 SQL 对象</span></span><br><span class="line">preparedStatement = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 1: 第一个出现的 ?,3: did=3[条件]</span></span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行<code>SQL</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executeUpdate();/executeQuery();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>具体使用</p><ol><li><p><code>PreparedStatement</code>预编译功能开启:<code>useServerPrepStmts=true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/st0104?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true&quot;</span>, userName, password);</span><br></pre></td></tr></table></figure></li><li><p>配置<code>MySQL</code>执行日志(<code>需要重启MySQL服务后生效</code>)</p><ul><li><p><code>windows</code>中<code>my.ini</code>配置文件位置查找</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以在以下命令显示的路径中查找/或者上一级目录中【没有创建一个空的】</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;datadir&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@basedir</span>; </span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log-output</span>=FILE</span><br><span class="line"><span class="attr">general-log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">general_log_file</span>=<span class="string">&quot;D:\mysql.log&quot;</span></span><br><span class="line"><span class="attr">slow-query-log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=<span class="string">&quot;mysql_slow.log&quot;</span></span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>原理</p><ol><li>在获取<code>PreparedStatement</code>对象时,将<code>sql</code>语句发送给<code>mysql</code>服务器进行检查,编译(<code>这些步骤很耗时</code>)</li><li>执行时就不用在进行这些步骤了,速度很快</li><li>如果<code>sql</code>模板一样,则只需要进行一次检查、编译</li></ol></li><li><p>好处</p><ul><li>预编译<code>SQL</code>，性能更高</li><li>防止<code>SQL</code>注入: <code>将敏感字符进行转义</code></li></ul></li><li><p>完整操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderitl.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderitl.entity.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接 st0104</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">// 更换了数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/st0104?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;</span>, userName, password);</span><br><span class="line">        <span class="comment">// 3. 获取 PreparedStatement</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">update</span> <span class="operator">=</span> <span class="string">&quot;update account set accpass=?,tb_accname=? where accid=&#x27;1091&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">upDateSql</span> <span class="operator">=</span> conn.prepareStatement(update);</span><br><span class="line">        upDateSql.setString(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        upDateSql.setString(<span class="number">2</span>, <span class="string">&quot;asd2&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">isUpdate</span> <span class="operator">=</span> upDateSql.executeUpdate();</span><br><span class="line">        <span class="keyword">if</span> (isUpdate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功...........&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败...........&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        List&lt;Account&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">accid</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;accid&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">accName</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;tb_accname&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">accpass</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;accpass&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">accstate</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;accstate&quot;</span>);</span><br><span class="line"></span><br><span class="line">            account.setAccid(accid);</span><br><span class="line">            account.setTbAccname(accName);</span><br><span class="line">            account.setAccpass(accpass);</span><br><span class="line">            account.setAccstate(accstate);</span><br><span class="line">            list.add(account);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><ul><li>数据库连接池简介<ul><li><code>数据库连接池</code>是个容器,负责分配、管理数据库连接</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li></ul></li><li>好处<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li><li><p><code>Druid</code>数据库连接池</p><ul><li>数据库连接池实现<ul><li>标准接口<code>DataSource</code><ul><li>官方(<code>SUN</code>)提供的数据库连接池标准接口,由第三方组织实现此接口</li><li>功能: 获取连接</li></ul></li></ul></li><li>常见的数据库连接池<ul><li><code>DBCP</code></li><li><code>C3P0</code></li><li><code>Druid</code></li></ul></li><li><code>Druid(德鲁伊)</code><ul><li><code>Druid</code>连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大,性能优秀,是<code>Java</code>语言最好的数据库连接池之一</li></ul></li></ul></li><li><p><code>Durid</code>使用步骤</p><ol><li><p>导入<code>jar</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件 druid.properties </span></span><br><span class="line"><span class="comment"># 官方文档 https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</span></span><br><span class="line"></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/st0104?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b08dc0918ac641a892abb61cd8e4f727.png" alt=""></p></li><li><p>加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 加载配置文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\network-class\\jdbc\\src\\main\\resources\\druid.properties&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>获取数据库连接池对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 获取数据库连接池对象</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"><span class="comment">// com.mysql.cj.jdbc.ConnectionImpl@543c6f6d</span></span><br><span class="line">System.out.println(conn);</span><br></pre></td></tr></table></figure><ul><li><p>完整部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderitl.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid 连接池的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line">        <span class="comment">// 1. 导入 jar =&gt; pom.xml</span></span><br><span class="line">        <span class="comment">// 2. 定义配置文件 =&gt; druid.properties</span></span><br><span class="line">        <span class="comment">// 3. 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\network-class\\jdbc\\src\\main\\resources\\druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">// 4. 获取数据库连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        <span class="comment">// com.mysql.cj.jdbc.ConnectionImpl@543c6f6d</span></span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h4 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h4><ul><li><p>通用性工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderitl.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 存储配置文件的 map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Properties</span> <span class="variable">PROPERTIES</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次使用工具类时加载驱动</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过复用本类自带流,读取配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DBUtils.class.getResourceAsStream(<span class="string">&quot;/druid.properties&quot;</span>);</span><br><span class="line">            <span class="comment">// 通过 PROPERTIES 对象流中的配置信息分割成键值对</span></span><br><span class="line">            PROPERTIES.load(is);</span><br><span class="line">            <span class="comment">// 加载驱动</span></span><br><span class="line">            Class.forName(PROPERTIES.getProperty(<span class="string">&quot;driverClassName&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(</span><br><span class="line">                    PROPERTIES.getProperty(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">                    PROPERTIES.getProperty(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">                    PROPERTIES.getProperty(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeAll</span><span class="params">(Connection conn, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><ul><li><p><code>ORM(Object Relational Mapping)</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>从数据库查询到的结果集(<code>ResultSet</code>)在进行遍历时,逐行遍历，取出的都是零散数据。在实际应用开发中,我们需要将零散的数据进行封装整理</p></div></li><li><p>实体类(<code>entity</code>)</p><ul><li>零散数据的载体</li><li>一行数据中,多个零散的数据进行整理</li><li>通过<code>entity</code>的规则对表中的数据进行对象的封装</li><li>表名=类名;列名=属性名;提供各个属性的<code>get、set</code>方法</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新一代终端下载工具</title>
      <link href="/2023/11/14/ec1b637d/"/>
      <url>/2023/11/14/ec1b637d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="新一代终端下载工具"><a href="#新一代终端下载工具" class="headerlink" title="新一代终端下载工具"></a>新一代终端下载工具</h3><ul><li><p><code>ubuntu</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aria2</span><br></pre></td></tr></table></figure></li><li><p><code>Centos</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum insyall aria2</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础到入门</title>
      <link href="/2023/08/15/d2a6dd99/"/>
      <url>/2023/08/15/d2a6dd99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA-插件"></a>IDEA-插件</h3><ul><li><code>Ptg</code>：快速生成<code>JavaBean</code>的插件</li><li><code>MybatisX</code>: 实现跳转</li><li><code>One Dark Theme</code></li><li><code>Bito</code>:<code>ChatGpt</code>插件</li><li><code>Rainbow Brackets</code></li></ul><h3 id="Java-基础到入门"><a href="#Java-基础到入门" class="headerlink" title="Java-基础到入门"></a>Java-基础到入门</h3><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><h5 id="启动-CMD"><a href="#启动-CMD" class="headerlink" title="启动 CMD"></a>启动 CMD</h5><ul><li><p><code>win+R</code></p><p><img src="https://img-blog.csdnimg.cn/69a871458d7c4061a86e64b8bd876786.png" style="zoom:33%;" /></p></li></ul><ul><li><p>输入<code>cmd</code></p><p><img src="https://img-blog.csdnimg.cn/6a3cd6d3e01644f19b69827d06ec6a08.png" style="zoom:33%;" /></p></li></ul><ul><li><p>按下回车键</p><p><img src="https://img-blog.csdnimg.cn/1d0fdcc5abc04bd5bb092c9ec44f8124.png" style="zoom:33%;" /></p></li></ul><h5 id="CMD-常见命令"><a href="#CMD-常见命令" class="headerlink" title="CMD-常见命令"></a>CMD-常见命令</h5><ul><li><p>切换盘符: <code>盘符名称:</code></p><p><img src="https://img-blog.csdnimg.cn/2713e2bdd635413380357ff73f6ef54c.png" alt=""></p></li><li><p>查看目录下内容: <code>dir</code></p><p><img src="https://img-blog.csdnimg.cn/11ef736671fc4c62b7459cdaff2a448f.png" style="zoom:50%;" /></p></li><li><p>目录切换:<code>cd 目录名</code></p><p><img src="https://img-blog.csdnimg.cn/6dcb857c1b6c4ba0b67b15121df7d8af.png" alt=""></p></li><li><p>返回上一级目录: <code>cd ..</code></p><p><img src="https://img-blog.csdnimg.cn/65e2544acce64dae97bdb288a0ce60ae.png" alt=""></p></li></ul><ul><li><p>退回到盘符根目录:<code>cd \</code></p><p><img src="https://img-blog.csdnimg.cn/af18d22a5f5845ca9ce29abddd4d2ead.png" alt=""></p></li></ul><ul><li>退出命令提示符窗口: <code>exit</code></li></ul><h4 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java-基础"></a>Java-基础</h4><h5 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h5><ul><li><p>下载</p><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p></blockquote><ul><li><p><code>jdk17</code>: 选择对应的系统选择安装</p><p><img src="https://img-blog.csdnimg.cn/e8e7534d0d1f43d180843f57e823b49d.png" alt="windows-JDK"></p></li><li><p><code>jdk8</code>:  <code>jdk17 的页面内下拉寻找 jdk8</code></p><p><img src="https://img-blog.csdnimg.cn/0864ee03e5bf412391f2829e91e708a1.png" alt="Java8"></p></li></ul></li><li><p>安装下载的<code>jdk</code></p></li><li><p>配置环境变量</p><ul><li><p><code>JAVA_HOME</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要根据自己安装的JDK实际路径配置</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c5d660ac55e94ba58630a2929937936a.png" alt="JAVA_HOME"></p></li><li><p><code>CLASSPATH</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span> <span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/47fafb08a09649ef881f72281a25fcf6.png" alt="CLASSPATH"></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><strong>注意：如果使用 1.5 以上版本的 JDK，不用设置 CLASSPATH 环境变量，也可以正常编译和运行 Java 程序。</strong></p></div></li><li><p><code>Path</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><ul><li><p>使用记事本打开并创建一个后缀名为<code>.java</code>的文件</p></li><li><p>编译: <code>javac HelloWorld.java</code></p></li><li><p>运行: <code>java HelloWorld</code></p></li><li><p>输出</p><p><img src="https://img-blog.csdnimg.cn/50853d7ea8da4d1aa291897645015fd8.png" alt=""></p><ul><li><p>源程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">          <span class="comment">// 作用: 输出 Hello World</span></span><br><span class="line">  System.out.println(<span class="string">&quot;Hello World Java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Java-跨平台原理"><a href="#Java-跨平台原理" class="headerlink" title="Java-跨平台原理"></a>Java-跨平台原理</h5><ul><li><code>Java</code> 语言的跨平台是通过虚拟机实现的</li><li><code>Java</code>语言不是直接运行在操作系统里面的,而是运行在虚拟机中的</li><li>针对于不同的操作系统,安装不同的虚拟机就可以了</li></ul><h5 id="JRE-和-JDK"><a href="#JRE-和-JDK" class="headerlink" title="JRE 和 JDK"></a>JRE 和 JDK</h5><ul><li><p><code>jdk(Java Development kit)</code>: Java 开发工具包</p><p><img src="https://img-blog.csdnimg.cn/09924929c45b490c8b46451bc712bf20.png" style="zoom:50%;" /></p><ul><li>JVM 虚拟机: Java 程序运行的地方</li><li>核心类库: Java 已经写好的东西,我们可以直接用</li><li>开发工具: <code>javac、java、...</code></li></ul></li><li><p><code>jre(Java Runtime Environment)</code>: Java 的运行环境 </p><p><img src="https://img-blog.csdnimg.cn/6b3ae0090c564bdbbf790c4dc9b27b0e.png" style="zoom:50%;" /></p></li></ul><h5 id="JDK-、JRE、JVM-三者的包含关系"><a href="#JDK-、JRE、JVM-三者的包含关系" class="headerlink" title="JDK 、JRE、JVM 三者的包含关系"></a>JDK 、JRE、JVM 三者的包含关系</h5><ul><li><p>jdk 包含了 jre</p></li><li><p>jre 包含了 jvm</p></li></ul><h5 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h5><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><ul><li><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure></li><li><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h6><ul><li><p>是被<code>Java</code>赋予了<code>特定含义的英文单词</code></p></li><li><p>关键字的特点</p><ul><li>关键字的字母<code>全部小写</code></li><li>常用的代码编辑器,对关键字有特殊颜色标记</li></ul></li><li><p><code>class</code>关键字是什么意思</p><blockquote><p><code>class</code>关键字表示定义一个类,后面跟随类名</p></blockquote></li></ul><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><ul><li><p>字面量的分类</p><blockquote><p>字面量就是数据</p></blockquote><ul><li><p>整数类型： 不带小数点的数字</p></li><li><p>小数类型：带小数点的数字</p></li><li><p>字符串类型：用双引号括起来的内容</p></li><li><p>字符类型：用单引号括起来的,内容只有一个</p></li><li><p>布尔类型：布尔值,表示真假</p></li><li><p>空类型：一个特殊的值，空值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 学习目标: 掌握常见的数据类型如何书写</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">20.09</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;coder-itl&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="制表符"><a href="#制表符" class="headerlink" title="制表符"></a>制表符</h6><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><strong> 制表符(<code>\t</code>): 在打印的时候,把前面字符串的长度补齐到 8，或者 8 的整数倍.最少补 1 个空格,最多补 8 个空格。</strong></p></div></li></ul><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><ul><li><p>变量的定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 值;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量的使用方式</p><ul><li><p>输出打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">       <span class="comment">// 变量输出</span></span><br><span class="line">       System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参与运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 变量参与运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num + count;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量的注意事项</p><ul><li>只能存一个值</li><li>变量名不允许重复定义</li><li>一条语句可以定义多个变量</li><li>变量在使用之前一定要进行赋值</li><li>变量的作用域范围</li></ul></li></ul><h6 id="计算机的存储规则"><a href="#计算机的存储规则" class="headerlink" title="计算机的存储规则"></a>计算机的存储规则</h6><ul><li><p>二进制</p><ul><li><p>任意进制转十进制</p><ul><li>系数: 就是每一位上的数字</li><li>基数: 当前进制数</li><li>权: 从右往左,以此为 <code>0 1 2 3 4 5</code></li></ul><p><img src="https://img-blog.csdnimg.cn/55873177f0b24e4ab349f95e9c573eb7.png" alt=""></p></li></ul></li></ul><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><ul><li><p>包的作用</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>包就是文件夹,用来管理各种不同功能的<code>Java</code>类</p></div></li><li><p>书写规则</p><blockquote><p>公司的域名反写+包的作用,需要全部英文小写,见名知意</p></blockquote></li><li><p>什么是全类名</p><blockquote><p>包名+类名</p></blockquote></li><li><p>什么时候需要导包</p><ul><li>使用同一个包中的类时,不需要导包</li><li>使用<code>java.lang</code>包中的类时,不需要导包</li><li>其他情况都需要导包</li></ul></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p>当使用双引号直接赋值,系统会检查该字符串在串池中是否存在,如果不存在,则创建新的,否则就直接复用</p></li><li><p>字符串的比较</p><ul><li><p><code>==</code></p><ul><li><p>比较基本数据类型时,比较的是具体的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    System.out.println(i1 == i2); <span class="comment">// true</span></span><br><span class="line">    System.out.println(i1 == i3); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>比较引用引用数据类型时,比较的是地址值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1 == s3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;d&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s4 + s5; <span class="comment">// +: 底层调用了 new</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    System.out.println(s6 == s7); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>equals</code></p><ul><li><p>比较引用数据类型,比较的是内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1 == s3); <span class="comment">// false</span></span><br><span class="line">    System.out.println(s1.equals(s3)); <span class="comment">// true</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;d&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s4 + s5; <span class="comment">// +: 底层调用了 new</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    System.out.println(s6 == s7); <span class="comment">// false</span></span><br><span class="line">    System.out.println(s6.equals(s7)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>字符串的遍历</p><ul><li><p><code>public char charAt(int index)</code>: 根据索引返回字符</p></li><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;agsajdsnkana&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// a g s a j d s n k a n a </span></span><br><span class="line">        System.out.print(str.charAt(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>案例练习</p><ul><li><p>金额转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.day11_21.ext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyToNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">2135</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>; <span class="comment">// 取个位</span></span><br><span class="line">            money = money / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">            <span class="comment">// 将转换后的金额拼接</span></span><br><span class="line">            moneyStr = capitalNumber + moneyStr; <span class="comment">// &quot;&quot;+&quot;伍&quot;=&gt;&quot;伍&quot;,&quot;叁&quot;+&quot;伍&quot;=&gt;&quot;叁伍&quot;</span></span><br><span class="line">            <span class="comment">// 如果数字上的每一位都取到了,那么 money记录的就是 0,循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (money == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(moneyStr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        count = <span class="number">7</span> - moneyStr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个数组表示单位</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;佰&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;万&quot;</span>, <span class="string">&quot;仟&quot;</span>, <span class="string">&quot;佰&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">            result = result + c + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数子变成大写的中文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        String[] chineseUppercaseAmount = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> chineseUppercaseAmount[number];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>敏感词替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;17768027899&quot;</span>;</span><br><span class="line">    <span class="comment">// 6802 replace ****</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> phoneNumber.replace(phoneNumber.substring(<span class="number">3</span>, <span class="number">7</span>), <span class="string">&quot;****&quot;</span>);</span><br><span class="line">    <span class="comment">// 177****7899</span></span><br><span class="line">    System.out.println(replace);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>StringBuilder</code></p><ul><li><p><code>String</code>拼接的弊端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        str += <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 7137ms</span></span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>StringBuilder</code></p><blockquote><p><code>StringBuilder</code>可以看成是一个容器,创建之后里面的内容是可变的</p></blockquote><ul><li><p>作用: 提高字符串的操作效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        str.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 5 ms</span></span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>StringJoiner</code></p><ul><li><p>常用方法</p><p><img src="https://img-blog.csdnimg.cn/56a23fa28f894aba92b86a4987418889.png" alt=""></p></li><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// delimiter: 分隔符</span></span><br><span class="line">    <span class="comment">// prefix: 前缀</span></span><br><span class="line">    <span class="comment">// suffix: 后缀</span></span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sj.add(arr[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串类的相关底层原理</p><ul><li><p>字符串存储的内存原理</p><ul><li>直接赋值会复用字符串常量池中的</li><li><code>new</code>出来不会复用,而是开辟一个新的空间</li></ul></li><li><p><code>==</code>号比较的是什么</p><ul><li>基本数据类型比较的是值</li><li>引用数据类型比较的是地址值</li></ul></li><li><p>字符串拼接的底层原理</p><ul><li><p>等号的右边没有变量</p><p><img src="https://img-blog.csdnimg.cn/ce0df13c39e0400eb21378912cce0736.png" alt=""></p></li><li><p>等号的右边有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建了两个对象:</span></span><br><span class="line">    <span class="comment">// 1. StringBuilder</span></span><br><span class="line">    <span class="comment">// 2. toString =&gt; new String</span></span><br><span class="line">    <span class="comment">// new StringBuilder().append(s1).append(&quot;b&quot;).toString();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结(字符串拼接的底层原理)</p><ul><li><p>如果没有变量参与,都是字符串直接相加,编译之后就是拼接之后的结果,会复用串池中的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果有变量参与,每一行拼接的代码,都会在内存中创建新的字符串,浪费内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1 + s2;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>StringBuilder</code>提高效率的原理图</p><blockquote><p>所有要拼接的内容都会往<code>StringBuilder</code>中放,不会创建很多无用的空间,节约内存</p></blockquote></li><li><p><code>StringBuilder</code>的源码分析</p><ul><li><p>两个基本概念</p><ul><li><p>容量: 最多能装多少</p></li><li><p>长度: 已经装了多少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// 容量和长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> str2.capacity();</span><br><span class="line"><span class="comment">// 默认容量: 16</span></span><br><span class="line">System.out.println(<span class="string">&quot;默认容量: &quot;</span> + capacity);</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str2.length();</span><br><span class="line"><span class="comment">// 实际长度: 0</span></span><br><span class="line">System.out.println(<span class="string">&quot;实际长度: &quot;</span> + length);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>默认创建一个长度为<code>16</code>的字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// capacity: 16</span></span><br><span class="line">AbstractStringBuilder(<span class="type">int</span> capacity) &#123;</span><br><span class="line">    value = <span class="keyword">new</span> <span class="title class_">char</span>[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加的内容长度小于<code>16</code>，直接存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容量和长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> str2.capacity();</span><br><span class="line">str2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">str2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">str2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">// 默认容量: 16</span></span><br><span class="line">System.out.println(<span class="string">&quot;默认容量: &quot;</span> + capacity);</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str2.length();</span><br><span class="line"><span class="comment">// 实际长度: 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;实际长度: &quot;</span> + length);</span><br></pre></td></tr></table></figure></li><li><p>添加的内容大于<code>16</code>会扩容(<code>扩容机制 = 原来的容量 * 2 + 2</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">// 容量和长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> str2.capacity();</span><br><span class="line">    str2.append(<span class="string">&quot;qwertyuiopasdfghjklzxcvb1234567890&quot;</span>);</span><br><span class="line">    <span class="comment">// 默认容量: 16</span></span><br><span class="line">    System.out.println(<span class="string">&quot;默认容量: &quot;</span> + capacity);</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str2.length();</span><br><span class="line">    <span class="comment">// 实际长度: 34</span></span><br><span class="line">    System.out.println(<span class="string">&quot;实际长度: &quot;</span> + length);</span><br></pre></td></tr></table></figure></li><li><p>如果扩容之后还不够,以实际长度为准</p></li></ul></li></ul></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>概念</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名并通过编号的方式对这些数据进行统一管理</p></div></li><li><p>静态初始化</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>静态初始化: <wavy>数组变量的赋值与元素的赋值操作</wavy><code>同时进行</code></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>动态初始化: 数组变量的赋值与数组元素的赋值操作分开进行</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 元素赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>一维数组的内存解析</p><p><img src="https://i.imgs.ovh/2023/11/15/noExN.png" alt=""></p></li><li><p>特征值的计算</p><ul><li><p>求和</p></li><li><p>最大值</p></li><li><p>最小值</p></li><li><p>平均值</p></li><li><p>数组赋值与复制</p><ul><li><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.exts;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组的复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysCopyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr1 的地址值: &quot;</span> + arr1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组复制</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">        System.out.println(<span class="string">&quot;arr2 的地址值: &quot;</span> + arr2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            arr2[i] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改 arr2 不会影响 arr1</span></span><br><span class="line">        arr2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            System.out.print(arr2[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/11/15/n7WNX.png" alt="修改不影响原数组"></p></li></ul></li></ul></li><li><p>数组反转、扩容、缩容</p><ul><li><p>反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.exts;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysReverseDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">// 正序输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正序输出: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 倒叙 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">            arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 倒叙输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二,定义新数组</span></span><br></pre></td></tr></table></figure></li><li><p>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组扩容 1 倍</span></span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[name.length &lt;&lt; <span class="number">1</span>];</span><br><span class="line">System.out.println(newArr.length);</span><br></pre></td></tr></table></figure></li><li><p>缩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 删除元素,依次向前顶替,不改变数组长度,最后一位设置为 0</span></span><br><span class="line"><span class="comment">// 方式二: 新建数组比原数组长度少 1</span></span><br><span class="line"><span class="comment">// 方式三: arr = Arrays.copyOf(arr,arr.length-1);</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查找</p><ul><li><p>线性查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.exts;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组元素的线性查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayLinerSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">// 默认未找到</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == arr[i]) &#123;</span><br><span class="line">                <span class="comment">// 输出元素所在的索引</span></span><br><span class="line">                System.out.println(target + <span class="string">&quot; 出现的下标是: &quot;</span> + i);</span><br><span class="line">                <span class="comment">// 找见了</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到该元素!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二分查找</p><ul><li><p>前提条件: <code>数组中的元素必须是有序的</code></p></li><li><p>核心逻辑: 每次排除一半的查找范围</p></li><li><p>实现思路</p><ol><li><code>min</code>和<code>max</code>表示当前要查找的范围</li><li><code>mid</code>是在<code>min</code>和<code>max</code>中间的</li><li>如果要查找的元素在<code>mid</code>的左边,缩小范围时,<code>min</code>不变,<code>max</code>等于<code>mid -1</code></li><li>如果要查找的元素在<code>mid</code>的右边,缩小范围时,<code>max</code>不变,<code>min等于 mid + 1</code></li></ol><p><img src="https://img-blog.csdnimg.cn/fe43ab859d6e4a468d9ffd56cacfb425.png" alt="二分查找"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>排序</p><ul><li><p>冒泡排序</p><ul><li><p>思想</p><ol><li>相邻的元素两两比较,大的放右边,小的放左边</li><li>第一轮比较完毕之后,最大值就已经确定,第二轮可以少循环一次,后面以此类推</li></ol></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 外层循: 表示我要执行多少轮,如果有 n 个数据,那么执行 n - 1 轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循: 每一轮中我如何比较数据并找到当前的最大值</span></span><br><span class="line">        <span class="comment">// -1: 为了防止索引越界</span></span><br><span class="line">        <span class="comment">// -i: 提高效率,每一轮执行的次数应该比上一轮少一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换 arr[j] 和 arr[j+1]</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>快速排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.exts;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numArr = &#123;<span class="number">9</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        quickSort(numArr, <span class="number">0</span>, numArr.length - <span class="number">1</span>);</span><br><span class="line">        print(numArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numArr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numArr.length; i++) &#123;</span><br><span class="line">            System.out.print(numArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一轮: 把 0 索引的数字作为基准数,确定基准数在数组中正确的位置,比基准数小的全部在左边,比基准数大的全部在右边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   快速排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  最小索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 末尾索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用的出口</span></span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span> (start != end) &#123;</span><br><span class="line">            <span class="comment">// 利用 end 从后往前开始找,找比基准数小的数字</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (end &lt;= start || arr[end] &lt; baseNumber) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 利用 start 从前往后找,找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (end &lt;= start || arr[start] &gt; baseNumber) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把 end 和 start 指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当 start 和 end 指向了同一个元素的位置,那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">// 表示已经找到了基准数在数组中应当存入的位置</span></span><br><span class="line">        <span class="comment">// 基准数归位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定 基准数 左边的范围,重复刚刚做的事情</span></span><br><span class="line">        quickSort(arr, left, start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 确定 基准数 右边的范围,重复刚刚做的事情</span></span><br><span class="line">        quickSort(arr, start + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Arrays</code></p><p><img src="https://img-blog.csdnimg.cn/89ccfe1bbe0c495f86cc0115dd7f42e1.png" alt=""></p></li></ul><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><h5 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h5><h6 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h6><ul><li><p>封装</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>指的是将一个对象的状态(数据)和行为(方法)封装在一个单元中,并对外部隐藏对象的内部实现细节.封装通过将对象的成员(<code>字段、方法</code>)声明为私有的(<code>private</code>)，并提供公共的访问方法(<code>getter 和 setter</code>等)来实现</p></div></li><li><p>简单说法: <wavy>暴露简单,封装复杂</wavy></p></li><li><p>封装的目的</p><ul><li><p>隐藏实现细节</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>封装允许对象隐藏其实现细节,只对外部提供必要的接口。这样就可以防止外部直接访问对象的内部数据，从而保护数据的完整性和安全性</p></div></li><li><p>简化接口</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通过提供有限的、清晰定义的接口，封装可以简化对象的使用方式，使得对象更易于理解和操作。外部用户只需知道如何使用公共方法，而不需要了解对象的内部实现</p></div></li><li><p>提高可维护性</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>封装使得对象的内部实现可以被修改而不影响外部代码。只要对象的接口保持不变,其他部分的代码就不需要修改。这有助于提高代码的可维护性</p></div></li></ul></li><li><p>访问修饰符</p><p><img src="https://img-blog.csdnimg.cn/116e03403cac4241aa8451258392bac4.png" alt="访问修饰符"></p></li></ul><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><ul><li><p>概念: 继承是面向对象三大特征之一,可以让类跟类之间产生父子的关系</p></li><li><p>继承的特点</p><blockquote><p>继承只支持单继承，但是允许多层继承</p></blockquote></li><li><p>继承案例</p><ul><li><p>题目要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写狗类，有以下</span></span><br><span class="line"><span class="comment">     属性：昵称、年龄;</span></span><br><span class="line"><span class="comment">     行为：吃、玩、狩猎.</span></span><br><span class="line"><span class="comment"> * 编写猫类，有以下</span></span><br><span class="line"><span class="comment">     属性：昵称、品种、年龄；</span></span><br><span class="line"><span class="comment">     行为：吃、玩、抓老鼠。</span></span><br><span class="line"><span class="comment"> * 提出父类，并测试</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/11/15/noFG0.png" alt="继承UML描述" style="zoom:67%;" /></p></li></ul></li><li><p>方法重写</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>子类对父类继承过来的方法进行的覆盖、覆写的操作,就称为方法的重写</p></div><ul><li><p>具体规则</p><ul><li><p>父类被重写的方法与子类重写的方法的方法名和形参列表必须相同</p></li><li><p>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><blockquote><p>子类不能重写父类中声明为<code>private</code>权限修饰的方法</p></blockquote></li><li><p>关于返回值类型</p><ul><li>父类被重写的方法的返回值类型是<code>void</code>，则子类重写的方法的返回值类型必须是<code>void</code></li><li>父类被重写的方法的返回值类型是基本数据类型,则子类重写的方法的返回值类型必须与被重写的方法的返回值类型相同</li><li>父类被重写的方法的返回值类型是引用数据类型(<code>比如类</code>),则子类重写的方法的返回值类型可以与被重写的方法的返回值类型相同或是被重写方法的返回值类型的子类</li></ul></li><li><p>子类重写的方法抛出的异常类型可以与父类被重写的方法派出的异常类型相同,或者是父类被重写的方法抛出的异常的子类</p></li></ul></li></ul></li><li><p>重写和重载的区别</p></li></ul><h6 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h6><ul><li><p>抽象类</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>如果一个类中存在抽象方法,那么该类就<code>必须</code>声明为抽象类,声明抽象类的关键字是<code>abstract</code></p></div></li><li><p>抽象方法</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>将共性的行为(方法)抽取到父类之后,由于每一个子类执行的内容是不一样的,所以,在父类中<code>不能确定具体的方法体</code>,该方法就可以定义为抽象方法</p></div></li><li><p>抽象类的特点</p><ul><li>抽象类不能直接创建对象</li><li>可以包含抽象方法和具体方法</li><li>可以包含构造方法,用于在子类实例化时初始化一些共有的属性</li></ul></li><li><p>案例练习</p><p><img src="https://i.imgs.ovh/2023/11/15/nOLlC.png" alt="抽象类" style="zoom:100%;" /></p></li></ul><h6 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h6><ul><li><p>概念</p><blockquote><p>同类型的对象,表现出的不同形态</p></blockquote></li><li><p>多态的表现形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类类型 对象名称 = 子类对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZhangSan</span>();</span><br></pre></td></tr></table></figure></li><li><p>多态的前提</p><ul><li>有继承/实现关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul></li><li><p>案例实现</p><p><img src="https://img-blog.csdnimg.cn/ed99738a6cfd455fb2528283839eba6e.png" alt="多态案例"></p></li><li><p>多态调用成员的特点</p><ul><li><p>变量调用: 编译看左边,运行也看左边</p><p><img src="https://img-blog.csdnimg.cn/ce85ae2fc43e4f1c9ae49799909e539f.png" alt="多态变量调用"></p></li><li><p>方法调用: 编译看右边,运行看右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成员方法的调用</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animalDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">// 调用成员方法: 编译看左边,运行看右边</span></span><br><span class="line"><span class="comment">// 编译看左边: javac 运行代码的时候,会看左边的父类中有没有这个方法,如果有,编译成功,如果没有,编译失败</span></span><br><span class="line"><span class="comment">// 运行看右边: java 运行代码的时候,实际上运行的是子类中的方法</span></span><br><span class="line">animalDog.show(); <span class="comment">// Dog Show.....</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>instanceof</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 14 新特性</span></span><br><span class="line"><span class="comment">// 先判断 animalDog 是不是 Dog 类型,如果是 强转为 Dog 类型,转换之后的变量名为 d</span></span><br><span class="line"><span class="comment">// 如果不是则不强转,结果直接是 false</span></span><br><span class="line"><span class="keyword">if</span> (animalDog <span class="keyword">instanceof</span> Dog d) &#123;</span><br><span class="line">    <span class="comment">// 结果为真.....: Dog</span></span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真.....: &quot;</span> + d.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多态的优势</p><blockquote></blockquote></li><li><p>多态的弊端</p><blockquote><p>不能使用子类的特有功能</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a5a9736538d14d2c9a61fc65338241b1.png" alt="不能使用子类的特有功能"></p></li><li><p>引用数据的数据类型转换有几种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 自动类型转换</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">// 2. 强制类型转换</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)person; </span><br></pre></td></tr></table></figure><ul><li><p>强制类型转换能解决什么问题</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>可以转换成真正的子类类型,从而调用子类独有的功能</li><li>转换类型与真实对象类型不一致会报错,所以在转换的时候使用<code>instanceof</code>关键字进行判断</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Animal</span> <span class="variable">animalDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    animalDog.show(); <span class="comment">// Dog Show.....</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// jdk1.8 使用 instanceof 的强转方式</span></span><br><span class="line">    <span class="keyword">if</span> (animalDog <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animalDog;</span><br><span class="line">        <span class="comment">// 调用子类独有的功能</span></span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多态的案例练习</p><p><img src="https://img-blog.csdnimg.cn/4178f301f67e4f0ba774273a2b0ebb2a.png" alt=""></p><ul><li><p><code>Annimal</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Cat</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义猫类:</span></span><br><span class="line"><span class="comment"> * 属性: 年龄、颜色</span></span><br><span class="line"><span class="comment"> * 行为:</span></span><br><span class="line"><span class="comment"> * eat(String something)</span></span><br><span class="line"><span class="comment"> * 逮老鼠 catchMouse(无参)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(getColor() + <span class="string">&quot; 的小猫正在吃 &quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getColor() + <span class="string">&quot; 颜色的小猫正在逮老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Dog</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义狗类:</span></span><br><span class="line"><span class="comment"> * 属性: 年龄、颜色</span></span><br><span class="line"><span class="comment"> * 行为: eat(String something)(something 表示吃的东西)</span></span><br><span class="line"><span class="comment"> * 看家: lookHome(无参)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(getColor() + <span class="string">&quot; 的小狗正在吃 &quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookHome</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getColor() + <span class="string">&quot; 的小狗正在看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饲养员:</span></span><br><span class="line"><span class="comment"> * 属性: 姓名、年龄</span></span><br><span class="line"><span class="comment"> * 行为:</span></span><br><span class="line"><span class="comment"> * keepPet(Dog dog,String something)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal animal, String food)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为 &quot;</span> + getAge() + <span class="string">&quot; 岁的&quot;</span> + getName() + <span class="string">&quot;养了一只&quot;</span> + dog.getColor() + <span class="string">&quot;颜色的&quot;</span> + dog.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            System.out.println(dog.getAge() + <span class="string">&quot;岁的&quot;</span> + dog.getColor() + <span class="string">&quot;颜色的狗两只前腿死死的抱住骨头猛吃&quot;</span>);</span><br><span class="line">            <span class="comment">// 特有方法的调用</span></span><br><span class="line">            dog.lookHome();</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为 &quot;</span> + getAge() + <span class="string">&quot; 岁的&quot;</span> + getName() + <span class="string">&quot;养了一只&quot;</span> + cat.getColor() + <span class="string">&quot;颜色的&quot;</span> + cat.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            System.out.println(cat.getAge() + <span class="string">&quot;岁的&quot;</span> + cat.getColor() + <span class="string">&quot;颜色的猫咪着眼睛侧着头吃鱼&quot;</span>);</span><br><span class="line">            <span class="comment">// 子类特有方法的调用</span></span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><ul><li><p>修饰符<code>static</code></p><ul><li><p>修饰变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static 修饰的变量叫 静态变量</span></span><br></pre></td></tr></table></figure></li><li><p>静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要通过 static 关键字修饰,随着类的加载而加载,并且自动触发,只执行一次</span></span><br><span class="line"><span class="comment">// 使用场景: 在类加载的时候,做一些数据初始化的时候使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块不能访问非静态的属性,涉及到加载时机问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修饰方法</p><ul><li>推荐使用<code>类名.方法名()</code>直接调用</li></ul></li></ul></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li><p>接口用关键字<code>interface</code>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publc interface 接口名&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口不能实例化</p></li><li><p>接口和类之间的关系是<code>实现关系</code>,通过<code>implements</code>关键字表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 implements 接口名&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口的子类(<code>实现类</code>)，要么重写接口中的所有抽象方法,要么是抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要么是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">InterfaceDemo</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要么重写接口中的所有方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li><p>接口和类的实现关系，可以单实现，也可以多实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">InterfaceDemo</span>,AbstractDemo &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类还可以在继承一个类的同时实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemoImpl</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">InterfaceDemo</span>, AbstractDemo &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>接口中成员的特点</p><ul><li><p>成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能是常量</span></span><br><span class="line"><span class="comment">// 默认修饰符: public static final</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/371d95946fdb4dbcb764f67fc11a494c.png" alt="成员变量"></p></li><li><p>构造方法: 没有</p></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能是抽象方法</span></span><br><span class="line"><span class="comment">// 默认修饰符: public abstract</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2471d04090f84e7b8d24f2129e2d3802.png" alt="成员方法"></p></li><li><p><code>JDK7</code>以前: 接口中只能定义抽象方法</p></li></ul></li></ul><ul><li><p>综合练习(继承、接口、抽象)</p><ul><li><p>需求</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>我们现在有乒乓球运动员和篮球远动员、乒乓球教练和篮球教练，为了出国交流,跟乒乓球相关的人员都需要学习英语。请用所学知识分析,在这个案例中,那些是具体类,哪些是抽象类,那些是接口</p><ul><li><p>乒乓球运动员: 姓名、年龄，学打乒乓球、说英语</p></li><li><p>篮球运动员: 姓名、年龄、学打篮球</p></li><li><p>乒乓球教练: 姓名、年龄，教打乒乓球、说英语</p></li><li><p>篮球教练: 姓名、年龄、教打篮球</p><p><img src="https://img-blog.csdnimg.cn/283d3f2eef5d43c49a9caa10e7507f63.png" alt="定义的类型"></p></li></ul></div><p><img src="https://img-blog.csdnimg.cn/1a236eed72e9415c918cb0e06fa24842.png" alt="代码实现"></p></li></ul></li><li><p><code>JDK8</code>开始接口中新增的方法</p><ul><li><p><code>JDK7</code>以前: 接口中只能定义抽象方法</p></li><li><p><code>JDK8</code>的新特性: 接口中可以定义有方法体的方法(<code>默认、静态</code>)</p><ul><li><p>默认方法</p><ul><li><p>作用: 解决接口升级的问题</p></li><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  public default void xxx()&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="comment">// jdk8 新增特性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">v1_0</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 作用解决接口升级的问题</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1.0版本的默认&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中默认方法的注意事项</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li>默认方法不是抽象方法,所以不强制被重写。但如果被重写,重写的时候要去掉<code>default</code>关键字</li><li>定义时<code>default</code>关键字不能省略</li><li>如果实现了多个接口,多个接口中存在相同名字的默认方法,子类就必须对该方法进行重写</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">v1_0</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被重写了......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态方法</p><blockquote><p>静态方法只能通过<code>接口名调用</code>,不能通过实现类名或者对象名调用，不能重写接口中的静态方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">InterfaceDemoImpl</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceDemoImpl</span>();</span><br><span class="line">    <span class="comment">// 调用默认方法</span></span><br><span class="line">    demo.v1_0();</span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    InterfaceDemo.staticMethod();</span><br><span class="line">    <span class="comment">// demo.staticMethod(); 不被允许</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>JDK9</code>的新特性: 接口中可以定义私有方法</p><ul><li><p>格式一: 为默认方法服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式: private 返回值类型 方法名(参数列表)&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="comment">// jdk8 新增特性</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">v1_0</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 作用解决接口升级的问题</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1.0版本的默认&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽取一些共性代码,被外部访问无用,所以添加权限访问修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">serviceForDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是专门为 default 服务的私有方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式二: 为静态方法服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式: private static 返回值类型 方法名(参数列表)&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽取一些共性代码,被外部访问无用,所以添加权限访问修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serviceForStatic</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是专门为 static 服务的私有方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>适配器设计模式</p><ul><li><p>设计模式</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>设计模式<code>(Design pattern)</code>是一套被反复使用,多数人只晓的、经过分类编目的、代码设计经验的总结</p><p>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码的可靠性、程序的重用性</p></div></li><li><p>适配器设计模式: 解决接口与接口实现类之间的矛盾问题</p><ul><li><p>问题复现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个接口,但只想用其中某一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdapterInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现类必须重写所有的方法,可是,只想用其中一个</span></span><br></pre></td></tr></table></figure></li><li><p>适配器模式</p><ul><li><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写中间类，进行接口空实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UserDaoAdapter</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>适配器的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">UserDaoAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;完成使用特定的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试适配器设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        adapter.method1();</span><br><span class="line">        adapter.method2();</span><br><span class="line">        adapter.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>适配器设计模式的总结</p><ul><li><p>使用时机</p><blockquote><p>当一个接口中抽象方法过多,但是我只要使用其中一部分的时候,就可以使用适配器设计模式</p></blockquote></li><li><p>使用步骤</p><ul><li>编写中间类<code>xxxAdapter(xxx-接口名)</code>,实现对应的接口，对接口中的抽象方法进行<code>空实现</code></li><li>让真正的实现类继承中间类<code>(xxxAdapter)</code>，并重写需要用的方法</li><li>为了避免其他类创建适配器类的对象,中间的适配器类用<code>abstract</code>修饰</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="OOA、OOD、OOP"><a href="#OOA、OOD、OOP" class="headerlink" title="OOA、OOD、OOP"></a>OOA、OOD、OOP</h4><ul><li><p><code>OOA</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>OOA(Object Orlented Analysls)</code>： 面向对象分析</p><ul><li><code>OOA</code>是面向对象方法的第一步,主要关注问题领域中的对象和对象之间的关系</li><li>他的目标是识别和描述系统中各种实体(<code>对象</code>)以及他们之间的交互</li><li><code>OOA</code>通常包括使用<code>用例图、类图、状态图</code>等来捕捉和表示系统的需求和结构</li></ul></div></li><li><p><code>OOD</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>OOD(Object Orlented Design)</code>： 面向对象设计</p><ul><li><code>OOD</code>是在分析完成后,根据分析的结果进行系统设计的阶段</li><li>在<code>OOD</code>阶段、开发者考虑如何将系统分解为各种对象,并定义他们的属性和方法</li><li><code>OOD</code>使用类图、时序图等工具来描述系统的结构和对象之间的交互,以便更好地实现系统的需求</li></ul></div></li><li><p><code>OOP</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>OOP(Object Orlented Programming)</code>： 面向对象编程</p><ul><li><code>OOP</code>是面向对象方法的最后一步,是将对象模型转换为实际的可执行的代码的过程</li><li>在面向对象编程中,程序由对象组成,这些对象通过消息传递进行交互</li></ul></div></li></ul><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><ul><li><p>一个类中包含的内容: <code>属性、方法、构造方法、代码块、内部类</code></p></li><li><p>内部类的访问特点</p><ul><li><p>内部类可以直接访问外部类的成员，包括私有</p></li><li><p>外部类要访问内部类的成员,必须创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 外部类的成员属性和方法</span></span><br><span class="line">    String carName;</span><br><span class="line">    <span class="type">int</span> carAge;</span><br><span class="line">    String carColor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(carName); <span class="comment">// 外部类访问自己的成员属性</span></span><br><span class="line">        <span class="comment">// System.out.println(engineName); 外部类无法直接访问内部类的成员属性</span></span><br><span class="line">        <span class="comment">// 如果外部类想要访问内部类的成员,就需要先行创建内部类的对象,再去访问</span></span><br><span class="line">        <span class="type">Engine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Engine</span>();</span><br><span class="line">        System.out.println(engine.engineName);</span><br><span class="line">        System.out.println(carName + <span class="string">&quot;正在高速公路上狂奔....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">        String engineName;</span><br><span class="line">        <span class="type">int</span> engineAge;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInnerInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(carName); <span class="comment">// 内部类可以访问外部类的成员属性</span></span><br><span class="line">            System.out.println(engineName);</span><br><span class="line">            System.out.println(<span class="string">&quot;一些重要的信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 访问内部类</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        <span class="comment">// 外部类</span></span><br><span class="line">        car.<span class="keyword">new</span> <span class="title class_">Engine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>内部类的分类</p><ul><li><p>成员内部类</p></li><li><p>局部内部类</p></li><li><p>静态内部类</p></li><li><p>匿名内部类(<code>*</code>)</p><ul><li><p>使用场景</p><blockquote><p>如果实现类只要使用一次,就可以用匿名内部类简化代码</p></blockquote></li></ul></li></ul></li></ul><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><ul><li><p>概述</p><ul><li>泛型: 是<code>JDK5</code>中引入的新特性,可以在编译阶段约束操作的数据类型,并进行检查</li><li>泛型的格式:<code>&lt;数据类型&gt;</code></li><li>注意: 泛型只支持<code>引用数据类型</code></li></ul></li><li><p>优点</p><ul><li>统一数据类型</li><li>把运行时期的问题提前到了编译期间,避免了强制类型转换可能出现的异常,因为在编译阶段类型就能确定下来</li></ul></li><li><p>泛型类</p><ul><li><p>使用场景: 当一个类中,某个变量的数据类型不确定时,就可以定义带有泛型的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span>&lt;类型&gt;&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰符&lt;类型&gt; 返回值类型 方法名(类型 变量名)&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xxx</span><span class="params">(E e)</span>&#123;&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ul><li><p>译义: <code>最终的</code></p></li><li><p>修饰方法</p><blockquote><p>表示方法是最终方法,不能被重写</p></blockquote></li><li><p>修饰类</p><blockquote><p>表示该类是最终类,不能被继承</p></blockquote></li><li><p>修饰变量</p><blockquote><p>被<code>final</code>修饰的变量叫做常量,只能被赋值一次</p></blockquote><ul><li><p>常量的实际应用</p><blockquote><p>实际开发中,常量一般作为系统的配置信息,方便维护,提高可读性</p></blockquote></li><li><p>命名规范</p><ul><li>单个单词: 全部大写</li><li>多个单词: 全部大写,单词之间用下划线隔开</li></ul></li><li><p>细节</p><ul><li><p><code>final</code>修饰的变量是基本类型: 那么变量存储的<code>数据值</code>不能发生改变</p><p><img src="https://img-blog.csdnimg.cn/fb78654f13d54324927caf4ff013f749.png" alt=""></p></li><li><p><code>final</code>修饰的变量是引用类型: 那么变量存储的<code>地址值</code>不能发生改变,对象内部的可以改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(student); <span class="comment">// com.wnxy.day11_20.Student@682a0b20</span></span><br><span class="line">        student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">13</span>); <span class="comment">// com.wnxy.day11_20.Student@3d075dc0</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储的`地址值`不能发生改变,对象内部的可以改变</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(student);</span><br><span class="line">student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内容可以改变</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(student.toString()); <span class="comment">// Student&#123;name=&#x27;zhangsan&#x27;, age=12&#125;</span></span><br><span class="line">        <span class="comment">// 内容可以改变</span></span><br><span class="line">        student.setName(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">100</span>);</span><br><span class="line">        System.out.println(student.toString()); <span class="comment">// Student&#123;name=&#x27;lisi&#x27;, age=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4bb2235901604cf9aba2c85c60e5adb3.png" alt="验证地址值不能发生改变"></p></li></ul></li></ul></li></ul><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h5><ul><li><p>集合体系结构</p><p><img src="https://img-blog.csdnimg.cn/85b7c41970ad4a409e7145ac6b2aab64.png" alt=""></p><ul><li><code>List</code>系列集合: 添加的元素是有序、可重复、有索引的</li><li><code>Set</code>系列集合: 添加的元素是无序、不重复、无索引的</li></ul></li></ul><h5 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h5><ul><li><p><code>Collection</code></p><blockquote><p><code>Collection</code>是单列集合的祖宗接口,他的功能是全部单列集合都可以继承使用的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4d4f497427ba418da5679b9b04ee51ae.png" alt=""></p></li></ul><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><ul><li><p><code>List</code>集合</p><ul><li><p>特点</p><ul><li>有序: 存和取的元素顺序一致</li><li>有索引: 可以通过索引操作元素</li><li>可重复: 存储的元素可以重复</li></ul></li><li><p>实现类<code>ArrayList</code>的成员方法</p><p><img src="https://img-blog.csdnimg.cn/dbb1c27a87bb4a9f93ed9d46761e47db.png" alt=""></p></li><li><p><code>E set（inedex,E e）</code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">setDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">// 向元素中添加值: 1,2,3,4</span></span><br><span class="line">Collections.addAll(setDemo, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line"><span class="comment">// 修改索引 2 的值为: 我是修改后的值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">originValue</span> <span class="operator">=</span> setDemo.set(<span class="number">2</span>, <span class="string">&quot;我是修改后的值&quot;</span>);</span><br><span class="line"><span class="comment">// 输出: 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回值是被修改前的值: &quot;</span> + originValue);</span><br></pre></td></tr></table></figure></li><li><p>遍历</p><ul><li><p>迭代器遍历</p></li><li><p>增强<code>for</code>遍历</p></li><li><p><code>Lamdba</code>表达式遍历</p></li><li><p>普通<code>for</code>循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List 的六种循环方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListLoopDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        loopByIterator();</span><br><span class="line">        <span class="comment">// 增强`for`遍历</span></span><br><span class="line">        loopByForEach();</span><br><span class="line">        <span class="comment">// `Lamdba`表达式遍历</span></span><br><span class="line">        loopLamdba();</span><br><span class="line">        <span class="comment">// 普通`for`循环遍历</span></span><br><span class="line">        loopByFor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loopByFor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;普通for遍历: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.print(list.get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loopLamdba</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Lambda遍历: &quot;</span>);</span><br><span class="line">        list.forEach(item -&gt; System.out.print(item + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loopByForEach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;增强for遍历: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loopByIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">        System.out.print(<span class="string">&quot;迭代器遍历: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.print(next + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素的移除问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list1.add(<span class="number">11</span>);</span><br><span class="line">    list1.add(<span class="number">22</span>);</span><br><span class="line">    list1.add(<span class="number">33</span>);</span><br><span class="line">    list1.add(<span class="number">44</span>);</span><br><span class="line">    list1.add(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误的移除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            list1.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// [11, 33, 55]</span></span><br><span class="line">    System.out.println(list1);</span><br><span class="line">    <span class="comment">// 正确的移除</span></span><br><span class="line">    List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list2.add(<span class="number">11</span>);</span><br><span class="line">    list2.add(<span class="number">22</span>);</span><br><span class="line">    list2.add(<span class="number">33</span>);</span><br><span class="line">    list2.add(<span class="number">44</span>);</span><br><span class="line">    list2.add(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list2.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            list2.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// [11]</span></span><br><span class="line">    System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>源码的理解</p><ul><li>扩容机制<ul><li>利用空参创建的集合,在底层创建一个默认长度为<code>0</code>的数组</li><li>添加第一个元素时,底层会创建一个新的长度为<code>10</code>的数组</li><li>存满时,会扩容<code>1.5</code>倍</li><li>如果一次添加多个元素,<code>1.5</code>倍还放不下,则新创建数组的长度以实际为准</li></ul></li></ul></li></ul></li><li><p><code>LinkedList</code></p><ul><li>底层数据结构是双向链表,查询慢，增删快,但是如果操作的是首尾元素,速度也是极快的</li></ul></li></ul><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><ul><li><p>特点</p><ul><li>无序: 存取顺序不一致</li><li>不重复: 可以去除重复</li><li>无索引: 没有带索引的方法,所以不能使用普通<code>for</code>循环遍历,也不能通过索引来获取元素</li></ul></li><li><p><code>Set</code>集合实现类</p><ul><li><code>HashSet</code>： 无序、不重复，无索引</li><li><code>LinkedHashSet</code>：<code>有序</code>、不重复、无索引</li><li><code>TreeSet</code>：<code>可排序(外置比较器进行排序)</code>、不重复、无索引</li></ul></li><li><p><code>HashSet</code>的底层原理</p><ul><li><p><code>HashSet</code>集合底层采取<code>哈希表</code>存储数据</p></li><li><p>哈希表是一种对于增删改查数据性能都较好的结构</p><ul><li><p>哈希表的组成</p><ul><li><code>JDK8</code>之前: 数组+链表</li><li><code>JDK8</code>开始: 数组+链表+红黑树</li></ul></li><li><p>哈希值: 对象的整数表现形式</p><ul><li>哈希值就是根据<code>hashCode</code>方法算出来的<code>int</code>类型的整数</li><li>该方法定义在<code>Object</code>类中,所有对象都可以调用,默认使用地址值进行计算</li><li>一般情况下，会重写<code>hashCode</code>方法,利用对象内部的属性值计算哈希值</li></ul></li><li><p>对象的哈希值特点</p><ul><li><p>如果没有重写<code>hashCode</code>方法,不同对象计算出的哈希值是不同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCodeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 如果没有重写 hashCode 方法,不同对象计算出的哈希值是不同的</span></span><br><span class="line">        System.out.println(stu1.hashCode()); <span class="comment">// 1808253012</span></span><br><span class="line">        System.out.println(stu2.hashCode()); <span class="comment">// 589431969</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果已经重写<code>hashCode</code>方法,不同的对象只要属性值相同,计算出的哈希值就是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, student.name) &amp;&amp; Objects.equals(age, student.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCodeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果已经重写 hashCode 方法,不同的对象只要属性值相同,计算出的哈希值就是一样的</span></span><br><span class="line">        System.out.println(stu1.hashCode()); <span class="comment">// -1461067303</span></span><br><span class="line">        System.out.println(stu2.hashCode()); <span class="comment">// -1461067303</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在小部分情况下,不同的属性值或者不同的地址值计算出来的哈希值也有可能一样(<code>哈希值</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在小部分情况下,不同的属性值或者不同的地址值计算出来的哈希值也有可能一样(`哈希值`)</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>.hashCode()); <span class="comment">// 96354</span></span><br><span class="line">System.out.println(<span class="string">&quot;acD&quot;</span>.hashCode()); <span class="comment">// 96354</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>底层原理的分析</p><ol><li><p>创建一个默认长度<code>16</code>，默认加载因子为<code>0.75</code>的数组,数组名<code>table</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">HashSet&lt;String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 底层实际创建了一个 HashMap 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用默认初始容量 (16) 和默认负载因子 (0.75) 构造一个空的 HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据元素的哈希值跟数组的长度计算出应存入的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index: 元素应存入的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (数组长度 - <span class="number">1</span>) &amp; 哈希值</span><br></pre></td></tr></table></figure></li><li><p>判断当前位置是否为<code>null</code>，是<code>null</code>则直接存入</p></li><li><p>如果位置不为<code>null</code>，表示有元素,则调用<code>equals</code>方法比较属性值</p></li><li><p>一样: 不存储，不一样: 存入数组，形成链表</p><ul><li><code>JDK8</code>以前：新元素存入数组,老元素挂在新元素下面</li><li><code>JDK8</code>以后: 新元素直接挂在老元素下面</li></ul></li><li><p><code>JDK8</code>以后，当链表长度<code>超过8</code>，而且数组长度<code>大于等于 64</code>时,自动转换为<code>红黑树</code></p></li><li><p>如果集合中存储的是自定义对象，必须要重写<code>hashCode</code>和<code>equals</code>方法</p></li></ol></li></ul></li><li><p><code>HashSet</code>的三个问题</p><ul><li><code>HashSet</code>为什么存和取的顺序不一样</li><li><code>HashSet</code>为什么没有索引</li><li><code>HashSet</code>是利用什么机制保证数据去重的</li></ul></li></ul></li><li><p><code>LinkedHashSet</code></p><ul><li><p><code>有序</code>、不重复、无索引</p><ul><li>这里的有序指的是保证存储和取出的元素顺序一致</li></ul></li><li><p>原理: 底层数据结构依然是哈希表，只是每个元素又额外的多了一个<code>双链表的机制记录存储的顺序</code></p></li><li><p>测试存取有序性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 LinkedHashSet，插入顺序</span></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出时观察顺序</span></span><br><span class="line"><span class="keyword">for</span> (String element : set) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在以后如果要数据去重,我们使用那个</p><blockquote><p>默认使用<code>HashSet</code>、如果要求去重且存取有序,才使用<code>LinkedHashSet</code></p></blockquote></li><li><p>求出一个字符串中出现过哪些字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 求出一个字符串中出现过哪些字符</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">charSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;dhifhwfoi999908w)--+==_+=&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        charSet.add(str.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(charSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>TreeSet</code></p><ul><li><p>特点</p><ul><li>不重复、无索引、<code>可排序</code><ul><li>可排序: 按照元素的默认规则(<code>由小到大</code>)排序</li></ul></li><li><code>TreeSet</code>集合底层是基于<code>红黑树的数据结构</code>实现排序的,增删改查性能都较好</li></ul></li><li><p>排序规则</p><ul><li>对于数值类型:<code>Interger、Double</code>默认按照从小到大的顺序进行排序</li><li>对于字符、字符串类型: 按照字符在<code>ASCII</code>码表中的数字升序进行排序</li></ul></li><li><p>比较器</p><ul><li><p>内置比较器</p><ul><li><p>实体类实现<code>Comparable</code>接口,重写<code>CompareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getA() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用<code>Collections.sort(集合对象名)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListSortDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 集合的引用类型排序 =&gt;  Collections.sort =&gt; CompareTo(a,b)</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">        stuList.add(stu1);</span><br><span class="line">        stuList.add(stu2);</span><br><span class="line">        stuList.add(stu3);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = sortByAge(stuList);</span><br><span class="line">        Collections.sort(stuList);</span><br><span class="line">        System.out.println(students);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>this.getA() - o.getAge();</code> 中的<code>this</code>和<code>o</code></p><ul><li><p><code>this</code>: 表示当前要添加的元素</p></li><li><p><code>o</code>: 表示已经在红黑树中存在的元素</p></li><li><p>返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getA() - o.getAge();</span><br></pre></td></tr></table></figure><ul><li><p>负数: 认为要添加的元素是小的,存左边(<code>和根元素比较</code>)</p></li><li><p>正数: 认为要添加的元素是大的,存右边(<code>和根元素比较</code>)</p></li><li><p>0: 认为要添加的元素已经存在,舍弃</p></li></ul></li></ul></li></ul></li><li><p>外置比较器</p><ul><li><p>创建新类,实现接口<code>Comparator</code>，重写<code>compare</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparerSalaryDesc</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Emp&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Emp o1, Emp o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getSalary() - o1.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>调用<code>Collections.sort(集合对象名,比较规则)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; empList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(empList,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">38</span>, <span class="number">8500</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">18</span>, <span class="number">2500</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">78</span>, <span class="number">500</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="string">&quot;wangmazi&quot;</span>, <span class="number">48</span>, <span class="number">5000</span>)</span><br><span class="line">    );</span><br><span class="line">    Collections.sort(empList, <span class="keyword">new</span> <span class="title class_">ComparerAgeAsc</span>());</span><br><span class="line">    System.out.println(empList);</span><br><span class="line">    Collections.sort(empList, <span class="keyword">new</span> <span class="title class_">ComparerSalaryDesc</span>());</span><br><span class="line">    System.out.println(empList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h4 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda-表达式"></a>Lambda-表达式</h4><ul><li><p>基本作用</p><blockquote><p>简化函数式接口的匿名内部类的写法</p></blockquote></li><li><p>使用前提</p><blockquote><p>必须是接口的匿名内部类,接口中只能有一个抽象方法</p></blockquote></li><li><p>好处</p><blockquote><p><code>Lamdba</code>是一个匿名函数,我们可以把<code>Lambda</code>表达式理解为是一段可以传递的代码,它可以写出更简洁，更灵活的代码,作为一种更紧凑的代码风格,使<code>java</code>语言表达能力得到了提升</p></blockquote></li></ul><h4 id="System"><a href="#System" class="headerlink" title="System"></a>System</h4><ul><li><p>常用方法</p><p><img src="https://img-blog.csdnimg.cn/3f95566bed4146969f2a155943e735d2.png" alt=""></p></li><li><p>验证</p><ul><li><p><code>exit</code></p><ul><li><code>status: 0</code>: 表示当前虚拟机正常停止</li><li><code>status: 非0</code>: 表示当前虚拟机异常停止 </li></ul></li><li><p><code>arraycopy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">    System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, arr1.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">        System.out.print(arr2[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/98cbe5c0781f414faba7f29f5b8f6083.png" alt=""></p></li></ul></li></ul><h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><ul><li><p>常用方法</p><p><img src="https://img-blog.csdnimg.cn/40e1dce103ab407c8d5a2b72448e541d.png" alt=""></p></li></ul><h4 id="BigInteger-和-BigDecimal"><a href="#BigInteger-和-BigDecimal" class="headerlink" title="BigInteger 和 BigDecimal"></a>BigInteger 和 BigDecimal</h4><ul><li><p><code>BigInteger</code></p><ul><li><p><code>public BigInteger(int num,Random rnd)</code>: 随机大整数,范围<code>[0~ 2的num次方-1]</code></p></li><li><p><code>public BigInteger(String val)</code>: 获取指定的大整数</p></li><li><p><code>public static BigInteger valueOf(long val)</code>: 内部对<code>-16 ~ 16</code>之间的<code>BigInteger</code>做了优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 产生一个 [0,2^num-1] 的随机大整数</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">Random</span>());</span><br><span class="line">        System.out.print(bd1 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">BigInteger</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;9999919912919919219291929192&quot;</span>);</span><br><span class="line">    <span class="comment">// add(): + [加法]</span></span><br><span class="line">    System.out.println(bd2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>BigDecimal</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">0.09</span> + <span class="number">0.01</span>); <span class="comment">// 0.09999999999999999 不精确</span></span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.01&quot;</span>);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.09&quot;</span>);</span><br><span class="line">    <span class="comment">// 相加的方法</span></span><br><span class="line">    System.out.println(bd1.add(bd2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>BigDecimal</code>的作用是什么</p><blockquote><p>表示较大的小数和解决小数运算精度失真的问题</p></blockquote></li><li><p><code>BigDecimal</code>的对象如何获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0.09999999999999999 小数计算问题</span></span><br><span class="line">System.out.println(<span class="number">0.09</span> + <span class="number">0.01</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;较大的小数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd3</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">0.1</span>);</span><br></pre></td></tr></table></figure></li><li><p>常见的操作</p><ul><li><code>add</code></li><li><code>subtract</code></li><li><code>multiply</code></li><li><code>divide(四舍五入: RoundingMode.HALF_UP)</code></li></ul></li></ul></li></ul><h4 id="JDK-时间"><a href="#JDK-时间" class="headerlink" title="JDK-时间"></a>JDK-时间</h4><ul><li><p><code>Date</code>时间类</p><ul><li><p>成员方法</p><ul><li><code>getDate()</code>: 获取日期(<code>可以获取一个月有多少天</code>)</li><li><code>getDay()</code>: 获取星期(<code>可以获取一个月中的起始星期</code>)</li><li><code>getTime()</code>: 获得一个毫秒数</li></ul></li><li><p>需求一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印时间原点开始一年之后的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 打印时间原点开始一年之后的时间</span></span><br><span class="line">    <span class="comment">// 定义一个时间原点</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">originTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">    <span class="comment">// 获取时间毫秒值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> originTime.getTime();</span><br><span class="line">    <span class="comment">// 一年的时间(1000[1s] * 60[s] * 60[min] * 24[day] * 365[year])</span></span><br><span class="line">    time = time + <span class="number">1000L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>;</span><br><span class="line">    <span class="comment">// 把计算后的毫秒值,在设置回 originTime 中</span></span><br><span class="line">    originTime.setTime(time);</span><br><span class="line">    System.out.println(<span class="string">&quot;原点一年以后的时间: &quot;</span> + originTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需求二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义任意两个 Date 对象,比较一下那个时间在前,那个时间在后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(Math.abs(random.nextInt()));</span><br><span class="line">    <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(Math.abs(random.nextInt()));</span><br><span class="line">    <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> d1.getTime();</span><br><span class="line">    <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> d2.getTime();</span><br><span class="line">    <span class="keyword">if</span> (time1 &gt; time2) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个时间在前,第二个时间在后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time1 &lt; time2) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个时间在前,第一个时间在后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个时间相等...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印月历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.day11_22.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2023</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        <span class="comment">// 使用 Date</span></span><br><span class="line">        monthlyCalendarByDate(year, month);</span><br><span class="line">        <span class="comment">// 使用 Calendar</span></span><br><span class="line">        monthlyByCalendar(c, year, month);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">monthlyByCalendar</span><span class="params">(Calendar c, <span class="type">int</span> year, <span class="type">int</span> month)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year  打印的年份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month 打印的月份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">monthlyCalendarByDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year - <span class="number">1900</span>, month, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 一个月有多少天 30</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> d1.getDate();</span><br><span class="line">        <span class="comment">// 这个月第一天星期几</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year - <span class="number">1900</span>, month - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3: 获得本月第一天是星期几</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> d2.getDay();</span><br><span class="line">        <span class="comment">// 打印表头</span></span><br><span class="line">        System.out.println(<span class="string">&quot;日\t一\t二\t三\t四\t五\t六&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dayOfWeek; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印月历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dayOfMonth; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> ((dayOfWeek + i) % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>SimpleDateFormat</code></p><ul><li><p>作用</p><ul><li><p>格式化: 把时间变成我们喜欢的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">    <span class="comment">// 2023-11-20 04:59:25</span></span><br><span class="line">    System.out.println(format);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解析: 把字符串表示的时间变成<code>Date</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> <span class="string">&quot;2023-11-20 17:02:04&quot;</span>;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="comment">// &quot;2023-11-20 17:02:04&quot; =&gt; Mon Nov 20 17:02:04 CST 2023</span></span><br><span class="line">    System.out.println(sdf.parse(strDate));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>Calendar</code>: 日历</p><ul><li><p><code>Calendar</code>代表了系统当前时间的日历对象,可以单独修改、获取时间中的年、月、日</p></li><li><p>细节: <code>Calendar</code>是一个抽象类,不能直接创建对象</p></li><li><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="comment">// 获取日历的实例对象</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取日期对象</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> instance.getTime();</span><br><span class="line">    <span class="comment">// Wed Nov 22 15:45:57 CST 2023</span></span><br><span class="line">    System.out.println(time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给日历设置 Date 对象</span></span><br><span class="line">    instance.setTime(time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取时间的毫秒值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">timeInMillis</span> <span class="operator">=</span> instance.getTimeInMillis();</span><br><span class="line">    System.out.println(timeInMillis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取日历中某个字段的信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> instance.get(Calendar.MONTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改日历的某个字段的信息</span></span><br><span class="line">    instance.set(Calendar.MONTH, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为某个字段增加/减少指定的值</span></span><br><span class="line">    instance.add(Calendar.MONTH, -<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>JDK8</code>新增的时间相关类</p><ul><li><p><code>Date</code>类</p><ul><li><code>ZoneId</code>: 时区</li><li><code>Instant</code>: 时间戳</li><li><code>ZoneDateTime</code>: 带时区的时间</li></ul></li><li><p>日期格式化类</p><ul><li><p><code>DateTimeFormatter</code>: 用于时间的格式化和解析</p><ul><li><p><code>static DateTimeFormatter ofPattern(格式)</code>: 获取格式对象</p></li><li><p><code>String format(时间对象)</code>: 按照指定方式格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.day11_20.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8Time</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Instant.now(): 标准时间 + .atZone(ZoneId.of(&quot;Asia/Shanghai&quot;));</span></span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now().atZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">        <span class="comment">// 东八区时间</span></span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss EE a&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatNowTime</span> <span class="operator">=</span> dateTimeFormatter.format(now);</span><br><span class="line">        <span class="comment">// 输出格式化后的当前时间: 2023-11-20 19:46:53 星期一 下午</span></span><br><span class="line">        System.out.println(formatNowTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="comment">// 要解析的日期字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> <span class="string">&quot;2023-11-21 15:30:00&quot;</span>;</span><br><span class="line">        <span class="comment">// 定义日期时间格式</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">// 解析字符串日期为LocalDateTime对象</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parsedDateTime</span> <span class="operator">=</span> LocalDateTime.parse(dateString, formatter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印解析后的LocalDateTime对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;解析后的日期时间: &quot;</span> + parsedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>日历类</p><ul><li><code>LocalDate</code>: 年月日</li><li><code>LocalTime</code>: 时分秒</li><li><code>LocalDateTime</code>: 年月日时分秒</li></ul></li><li><p>工具类</p><ul><li><code>Duration</code>: 时间间隔(秒，纳秒)</li><li><code>Period</code>: 时间间隔(年，月，日)</li><li><code>ChronoUnit</code>: 时间间隔(所有单位)</li></ul></li></ul></li></ul><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li><p>迭代器在遍历集合的时候是不依赖索引的</p></li><li><p>迭代器需要掌握三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    coll.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;44&quot;</span>);</span><br><span class="line">    Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">nextEl</span> <span class="operator">=</span> it.next();</span><br><span class="line">        System.out.println(nextEl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器的四个细节</p><ul><li>如果当前位置没有元素,还要强行获取,回报<code>NoSuchElementException</code></li><li>迭代器遍历完毕,指针不会复位</li><li>循环中只能用一次<code>next</code>方法</li><li>迭代器遍历时,不能用集合的方法进行增加或者删除</li></ul></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><ul><li><p>度: 每一个节点的<code>子节点</code>数量</p></li><li><p>树高: 树的总层数</p></li><li><p>根节点: 最顶层的节点</p></li><li><p>左子节点: 左下方的节点</p></li><li><p>右子节点: 右下方的节点</p></li><li><p>树的遍历</p><p><img src="https://img-blog.csdnimg.cn/0a1a852888554b18a30e887c4cfccd26.png" alt=""></p><ul><li>前序遍历: 从根节点开始,然后按照<code>当前</code>节点,左子节点，右子节点的顺序遍历(<code>根左右: 20、18、16、19、23、22、24</code>)</li><li>中序遍历: 从最左边的子节点开始,然后按照<code>左</code>子节点,当前节点,右子节点的顺序遍历(<code>左根右: 16、18、19、20、22、23、24</code>)</li><li>后序遍历: 从最左边的子节点开始,然后按照左子节点，右子节点,当前节点的顺序遍历(<code>左右根:16、19、18、22、24、23、20</code>)</li><li>层序遍历: 一层一层的遍历:<code>20、18、23、16、19、22、24</code></li></ul></li></ul><h5 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h5><ul><li><p>二叉查找树: 又称二叉排序树或者二叉搜索树</p><p><img src="https://img-blog.csdnimg.cn/e8d2648e06f747aaa6704e0db81e46fb.png" alt=""></p></li></ul><ul><li><p>特点</p><ul><li>每一个节点上最多右两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ul></li><li><p>添加节点的规则</p><ul><li>小的存左边</li><li>大的存右边</li><li>一样的不存</li></ul></li><li><p>节点的内部结构</p><p><img src="https://img-blog.csdnimg.cn/b0899b88b229463da201021726a724b7.png" alt=""></p></li></ul><ul><li><p>二叉查找树的弊端</p><p><img src="https://img-blog.csdnimg.cn/ab586908040641c1896e3aca6e1f07c7.png" alt=""></p><blockquote><p>查询的效率会变低</p></blockquote></li></ul><h5 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h5><ul><li><code>任意节点</code>左右子树高度差不超过<code>1</code></li></ul><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><ul><li><p>红黑树是一种自平衡的二叉查找树,是计算机科学中用到的一种数据结构</p></li><li><p><code>1972</code>年出现,当时被称之为<code>平衡二叉B树</code>.后来,<code>1978</code>年被修改为如今的<code>红黑树</code></p></li><li><p>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色</p></li><li><p><code>每一个节点可以是红或者黑</code>;红黑树<code>不是高度平衡的</code>,它的平衡是通过<code>红黑规则</code>进行实现的</p><p><img src="https://img-blog.csdnimg.cn/14d8c64e09094daa8a005681ae01e507.png" alt="红黑树"></p></li><li><p>红黑树的红黑规则</p><ul><li>每一个节点或是红色的、或者是黑色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为<code>Nil</code>，这些<code>Nil</code>被视为叶节点,每个叶节点(<code>Nil</code>)是黑色的</li><li>如果某一个节点是红色的,那么他的子节点必须是黑色(<code>不能出现两个红色节点相连的情况</code>)</li><li>对每一个节点,从该节点到其他所有后代叶节点的简单路径上,均包含相同数目的黑色节点</li></ul></li></ul><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul><li><p>统计字符串中出现过哪些字符及个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wnxy.day11_21.classroom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计字符串中出现过哪些字符及个数。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountStrCategories</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;avab()bg*gc&amp;&amp;c&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Integer&gt; characterIntegerMap1 = countCharacter(str);</span><br><span class="line">        <span class="comment">// 打印结果</span></span><br><span class="line">        printResult(characterIntegerMap1);</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Integer&gt; characterIntegerMap2 = characterCategoryCount(str);</span><br><span class="line">        <span class="comment">// 打印结果</span></span><br><span class="line">        printResult(characterIntegerMap2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printResult</span><span class="params">(Map&lt;Character, Integer&gt; characterIntegerMap)</span> &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entries = characterIntegerMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Character, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Character, Integer&gt; nextEl = iterator.next();</span><br><span class="line">            System.out.println(nextEl.getKey() + <span class="string">&quot;: &quot;</span> + nextEl.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回各个字符对应的出现次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title function_">countCharacter</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;log info countCharacter.........&quot;</span>);</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> s : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(s);</span><br><span class="line">                count++;</span><br><span class="line">                map.put(s, count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不存在</span></span><br><span class="line">                map.put(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getOrDefault() 方法获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回各个字符对应的出现次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title function_">characterCategoryCount</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;log info characterCategoryCount.........&quot;</span>);</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历字符串中的每个字符</span></span><br><span class="line">        <span class="comment">// toCharArray() 方法将字符串转换为字符数组。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 更新字符的计数</span></span><br><span class="line">            <span class="comment">// getOrDefault() 方法获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值。</span></span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h4><ul><li><code>DTO，全称为 Data Transfer Object</code>即数据传输对象,一般用于展示层与服务层之间的数据传输</li><li>作用: 用于封装页面提交的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/07/23/b543ced0/"/>
      <url>/2023/07/23/b543ced0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>安装并启动<code>docker</code></p></li><li><p>进入自定义目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/local/docker/rabbitmq</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>docker-compose.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/rabbitmq:management</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker-compose</span> <span class="string">up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/74dff48877dd4753b229e6baaafb5fd7.png" alt=""></p></li></ul><ul><li><p>访问浏览器,以<code>ip:15672</code>访问,账户密码使用<code>guest</code></p><p><img src="https://img-blog.csdnimg.cn/eb207fbbf04947dcad42cd513058163d.png" alt=""></p></li></ul><h4 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h4><ul><li><code>Publisher</code>-生产者: 发布消息到<code>RabbitMQ</code>中的<code>Exchange</code></li><li><code>Consumer</code>-消费者: 监听<code>RabbitMQ</code>中的<code>Queue</code>中的消息</li><li><code>Exchange</code>-交换机: 和生产者建立连接并接收生产者的消息</li><li><code>Queue</code>-队列: <code>Exchange</code>会将消息分发到指定的<code>Queue</code>，<code>Queue</code>和消费者进行交互</li><li><code>Routes</code>-路由: 交换机以什么样的策略将消息发布到<code>Queue</code></li></ul><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><ul><li><p>概念</p><blockquote><p>虚拟主机就是用来将一个<code>rabbitmq</code>内部划分成多个主机,给不同的用户来使用,而不会冲突</p></blockquote></li></ul><h4 id="队列模式"><a href="#队列模式" class="headerlink" title="队列模式"></a>队列模式</h4><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><ul><li><p>创建一个简单的<code>maven</code>项目</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写生产者程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.ControlFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者: Hello World Producer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProducer</span> &#123;</span><br><span class="line">    <span class="comment">// 队列的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 2. 设置连接的主机地址</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.32.128&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 设置连接的端口号</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 4. 设置虚拟主机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 5. 设置连接的账户信息</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">// 6. 从连接工程获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 7. 通过连接对象获取 channel,channel 是之后用于发送消息的对象</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 8. 声明队列(队列不存在则创建,存在则直接使用队列)</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String queue: 队列的名称</span></span><br><span class="line"><span class="comment">         *  boolean durable: 是否持久化</span></span><br><span class="line"><span class="comment">         *  boolean exclusive: 是否独占(是否给当)</span></span><br><span class="line"><span class="comment">         *  boolean autoDelete: 是否自动删除</span></span><br><span class="line"><span class="comment">         *  Map&lt;String, Object&gt; arguments</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 9. 定义消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String exchange(交换机): Hello World模式一定是空串,不能是 null</span></span><br><span class="line"><span class="comment">         *  String routingKey(路由键):  当 exchage 是空串的时候,此时  routingKey == 队列的名称</span></span><br><span class="line"><span class="comment">         *  mandatory: 强制的</span></span><br><span class="line"><span class="comment">         *  BasicProperties props(封装描述信息的元数据):</span></span><br><span class="line"><span class="comment">         *  immediate: 立即的,一般不使用</span></span><br><span class="line"><span class="comment">         *  byte[] body(消息内容)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 10. 发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送完毕................&quot;</span>);</span><br><span class="line">        <span class="comment">// 11. 关闭连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写生产者程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.32.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 创建一个 Consumer 对象,知名具体处理消息的程序</span></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 设置消费者监听某个队列</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, consumer);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Consumer 对象,知名具体处理消息的程序 使用 lambda 处理</span></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    System.out.println(delivery.getBody());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// deliverCallback：存在订阅时的处理方法 consumerTag：取消订阅时的处理方法</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>简单队列的问题</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>当多个消费者消费同一个队列时,这个时候<code>rabbitmq</code>的公平调度机制就开启了,于是,无论消费者的消费能力如何,每个消费者都能公平均分到相同数量的消息,而不能出现能者多劳的情况</p></div></li></ul><h5 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h5><ul><li><p>工作模式</p><p><img src="https://img-blog.csdnimg.cn/6ff75b1272104d319686b45713471eaf.png" alt=""></p></li></ul><ul><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client.work.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.ControlFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者: Hello World Producer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProducer</span> &#123;</span><br><span class="line">    <span class="comment">// 队列的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 2. 设置连接的主机地址</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.32.128&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 设置连接的端口号</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 4. 设置虚拟主机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 5. 设置连接的账户信息</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">// 6. 从连接工程获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 7. 通过连接对象获取 channel,channel 是之后用于发送消息的对象</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 8. 声明队列(队列不存在则创建,存在则直接使用队列)</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String queue: 队列的名称</span></span><br><span class="line"><span class="comment">         *  boolean durable: 是否持久化</span></span><br><span class="line"><span class="comment">         *  boolean exclusive: 是否独占(是否给当)</span></span><br><span class="line"><span class="comment">         *  boolean autoDelete: 是否自动删除</span></span><br><span class="line"><span class="comment">         *  Map&lt;String, Object&gt; arguments</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 9. 定义消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;work_queue &quot;</span> + i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  String exchange(交换机): Hello World模式一定是空串,不能是 null</span></span><br><span class="line"><span class="comment">             *  String routingKey(路由键):  当 exchage 是空串的时候,此时  routingKey == 队列的名称</span></span><br><span class="line"><span class="comment">             *  mandatory: 强制的</span></span><br><span class="line"><span class="comment">             *  BasicProperties props(封装描述信息的元数据):</span></span><br><span class="line"><span class="comment">             *  immediate: 立即的,一般不使用</span></span><br><span class="line"><span class="comment">             *  byte[] body(消息内容)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">// 10. 发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;发送完毕................&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 11. 关闭连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>消费者(能者多劳<code>设置手动 ack</code>)</p><ul><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client.work.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConsumer1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.32.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 创建一个 Consumer 对象,知名具体处理消息的程序</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client.work.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConsumer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.32.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明一次只接受一条消息</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 创建一个 Consumer 对象,知名具体处理消息的程序</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300l</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  进行手动 ack:</span></span><br><span class="line"><span class="comment">             *      消息标识: delivery.getEnvelope().getDeliveryTag()</span></span><br><span class="line"><span class="comment">             *      multiple: 是否批量签收</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h5><ul><li><p>模式</p><p><img src="https://img-blog.csdnimg.cn/522fc80dbfe5421cb4f608604b0782a8.png" alt=""></p></li><li><p>说明</p><ul><li><p><code>P</code>: 生产者,也就是要发送消息的程序,但是不再发送到队列中,而是发送给交换机</p></li><li><p><code>C</code>: 消费者,消息的接收者,会一直等待消息到来</p></li><li><p><code>Queue</code>: 消息队列,接受消息,缓存消息</p></li><li><p><code>Exchange</code>: 交换机(<code>X</code>)。一方面,接受生产者发送的消息.另一方面,知道如何处理消息,例如递交给某个特别的队列、递交给所有队列、或是将消息丢弃。到底如何操作,取决于<code>Exchange</code>的类型</p><ul><li><code>Fanout</code>: 广播,将消息交给所有绑定到交换机的队列</li><li><code>Direct</code>: 定向,把消息交给符合指定<code>routing key</code>的队列</li><li><code>Topic</code>:  通配符,把消息交给符合<code>routing pattern</code>的队列</li></ul><blockquote><p><code>Exchange</code>只负责转发消息,不具备存储消息的能力,因此如果没有任何队列与<code>Exchange</code>绑定,或者没有符合路由规则的队列,那么消息会丢失</p></blockquote></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-整合定时任务</title>
      <link href="/2023/07/14/347da3a4/"/>
      <url>/2023/07/14/347da3a4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h3><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>任务</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartzdemo.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务: 类似与 Timer 的 run 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzTask</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务的上下文信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 任务逻辑执行的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;quartz task run...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartzdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.quartzdemo.quartz.QuartzTask;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">printJobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  构建 Job 明细</span></span><br><span class="line"><span class="comment">         *  storeDurably: 持久化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(QuartzTask.class).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">printJobTrigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="comment">// 绑定对应工作明细</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(printJobDetail()).withSchedule(scheduleBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartzdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(QuartzDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring  Task"></a>Spring  Task</h3><ul><li><p>启动类开启配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartzdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(QuartzDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTask</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say Hello task........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-多平台部署</title>
      <link href="/2023/07/01/1de90629/"/>
      <url>/2023/07/01/1de90629/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Hexo-多平台部署"><a href="#Hexo-多平台部署" class="headerlink" title="Hexo-多平台部署"></a>Hexo-多平台部署</h3><h4 id="电脑配置多-GIT"><a href="#电脑配置多-GIT" class="headerlink" title="电脑配置多-GIT"></a>电脑配置多-GIT</h4><ul><li><p>参考地址</p><blockquote><p><code>gitee Pages</code>:  <a href="https://coderitl.gitee.io/2023/06/23/bbf8718d/">https://coderitl.gitee.io/2023/06/23/bbf8718d/</a></p><p><code>github Pages</code>: <a href="https://itl-coder.github.io/2023/06/23/bbf8718d/">https://itl-coder.github.io/2023/06/23/bbf8718d/</a></p></blockquote></li></ul><h4 id="Gitee-仓库"><a href="#Gitee-仓库" class="headerlink" title="Gitee-仓库"></a>Gitee-仓库</h4><ul><li><p>创建一个与账户名同名的仓库地址</p><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>原因:  如果你想你的 <code>pages</code> 首页访问地址不带二级目录，如 <code>ipvb.gitee.io</code>,你需要建立一个与自己个性地址同名的仓库，如<code>https://gitee.com/ipvb（用户名）</code>这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以<code>ipvb.gitee.io</code>直接访问，那么他就可以创建一个名字为<code>ipvb</code>的仓库<code>https://gitee.com/ipvb/ipvb</code>部署完成后，就可以以 <a href="https://ipvb.gitee.io/">https://ipvb.gitee.io</a> 进行访问了。</p></div><p><img src="https://i.imgloc.com/2023/07/01/VRUybN.png" alt="必须与用户名同名的仓库才可以,后续访问时不会出现多一级目录"></p></li></ul><h4 id="Hexo的配置文件"><a href="#Hexo的配置文件" class="headerlink" title="Hexo的配置文件"></a>Hexo的配置文件</h4><ul><li><p>推送配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">-</span> <span class="string">type: &quot;git&quot;</span></span><br><span class="line">    <span class="attr">repo</span>: <span class="string">git@github.com:example/example.git</span></span><br><span class="line">    <span class="attr">branch</span>: <span class="string">main</span></span><br><span class="line">  <span class="attr">-</span> <span class="string">type: &quot;git&quot;</span></span><br><span class="line">    <span class="attr">repo</span>: <span class="string">git@gitee.com:example/example.git</span></span><br><span class="line">    <span class="attr">branch</span>: <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令推送</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2023/06/28/de7c53fe/"/>
      <url>/2023/06/28/de7c53fe/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程池概述"><a href="#线程池概述" class="headerlink" title="线程池概述"></a>线程池概述</h4><ul><li><p>什么是线程池</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>线程池其实就是一种多线程处理形式,处理过程中可以将任务添加到队列中,然后在创建线程后自动启动这些任务。这里的线程就是我们前面学过的线程,这里的任务就是我i们之前学过的实现了<code>Runnable</code>或<code>Callable</code>接口的实例对象</p></div></li><li><p>为什么使用线程池</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>使用线程池最大的原因就是可以根据系统的需求和硬件环境灵活的控制线程的数量,且可以对所有线程进行统一的管理和控制,从而提高系统的运行效率,降低系统运行压力,当然了,使用线程池的原因不仅仅只有这些,我们可以从线程池自身的优点上来进一步了解线程池的好处</p></div></li><li><p>线程池有哪些优势</p><ol><li>线程和任务分离,提升线程重用性</li><li>控制线程并发数量,降低服务器压力,统一管理所有线程</li><li>提升系统响应速度,假如创建线程用的时间为<code>T1</code>，执行任务用的时间为<code>T2</code>，销毁线程用的时间为<code>T3</code>，那么使用线程池就免去了<code>T1</code>和<code>T3</code>的时间</li></ol></li></ul><h4 id="应用场景介绍"><a href="#应用场景介绍" class="headerlink" title="应用场景介绍"></a>应用场景介绍</h4><ul><li><p>应用场景</p><ol><li>网购商品秒杀</li><li>云盘文件上传和下载</li><li><code>12306</code>网上购票系统</li></ol></li><li><p>总结</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>只要有并发的地方,任务数量大或小,每个任务执行时间长或短的都可以使用线程池;</p><p>只不过在使用线程池的时候,注意一下设置合理的线程池大小即可</p></div></li></ul><h4 id="线程池使用"><a href="#线程池使用" class="headerlink" title="线程池使用"></a>线程池使用</h4><ul><li><p><code>java</code>内置线程池</p><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="type">int</span> corePoolSize, // 核心线程数量</span></span><br><span class="line"><span class="params">            <span class="type">int</span> maximumPoolSize, // 最大线程数</span></span><br><span class="line"><span class="params">            <span class="type">long</span> keepaliveTime, // 最大空闲时间</span></span><br><span class="line"><span class="params">            TimeUnit unit, // 时间单位</span></span><br><span class="line"><span class="params">            BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列</span></span><br><span class="line"><span class="params">            ThreadFactory threadFactory, // 线程工厂</span></span><br><span class="line"><span class="params">            RejectedExecutionHandler handler // 饱和处理机制</span></span><br><span class="line"><span class="params">    )</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>线程池工作流程</p><p><img src="https://i.imgloc.com/2023/06/28/V3iUUN.png" alt=""></p></li></ul></li></ul></li><li><p>自定义线程池</p><ul><li><p>参数设计分析</p><ul><li><p>核心线程数</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>核心线程数的设计需要依据任务的处理时间和每秒产生的任务数量来确定,例如: 执行一个任务需要<code>0.1s</code>，系统<code>80%</code>的时间每秒都会产生<code>100</code>个任务,那么想要在<code>1s</code>内处理完这<code>100</code>个任务,就需要<code>10</code>个线程,此时我们就可以设计核心线程数为<code>10</code>，当然实际情况不可能这么平均,所以我们一般按照<code>8020</code>原则设计即可,即按照<code>80</code>的情况设计核心线程数,剩下的<code>20%</code>可以利用最大线程数处理；</p></div></li><li><p>任务队列长度</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>任务队列长度一般设计为:<code>核心线程数/单个任务执行时间*2</code>;例如上面的场景中,核心线程数设计为<code>10</code>，单个任务执行时间为<code>0.1s</code>，则队列长度可以设计为<code>200</code></p></div></li><li><p>最大线程数</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>最大线程数的设计除了需要参照核心线程数的条件外,还需要参照系统每秒产生的最大任务数决定: 例如: 上述环境中,如果系统每秒最大产生的任务是<code>1000</code>个,那么,最大线程数=(最大任务数 - 任务队列长度)<em>单个任务执行时间;即: 最大线程数 = `(1000 - 200)</em>0.1 = 80`个</p></div></li><li><p>最大空闲时间</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>这个参数的设计完全参考系统运行环境和硬件压力设定,没有固定的参考值,用户可以根据经验和系统产生任务的时间间隔合理设置一个值即可；</p></div></li></ul></li></ul></li><li><p>自定义线程池步骤</p><ol><li>编写任务类(<code>MyTask</code>)，实现<code>Runnable</code>接口</li><li>编写线程类(<code>MyWorker</code>)，用于执行任务,需要持有所有任务</li><li>编写线程池类(<code>MyThreadPool</code>)，包含提交任务,执行任务的能力</li><li>编写测试类(<code>MyTest</code>)，创建线程池对象,提交多个任务测试</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-项目部署</title>
      <link href="/2023/06/27/1df6ba8c/"/>
      <url>/2023/06/27/1df6ba8c/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringBoot-项目部署"><a href="#SpringBoot-项目部署" class="headerlink" title="SpringBoot-项目部署"></a>SpringBoot-项目部署</h3><ul><li><p>打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jar 的文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>coder-itl<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot 所依赖的打包插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Linux</code>安装相关环境</p><ul><li><p><code>JDK</code></p><ul><li><p>配置环境变量</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME=/usr/local/src/jdk8.0.372/</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span></span><br><span class="line"><span class="attr">export</span> <span class="string">CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>使得配置文件生效</p></li></ul></li><li><p><code>MySQL</code></p><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL 8.0</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d -p 3306:3306 --privileged=true \</span></span><br><span class="line"><span class="string">--restart=always  \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/log:/var/log/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string">-v /coderitl/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string">-e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string">--name mysql \</span></span><br><span class="line"><span class="string">mysql</span></span><br></pre></td></tr></table></figure></li><li><p>上传<code>sql</code>脚本</p><ul><li><p>执行<code>sql</code>脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source <span class="operator">/</span>xx<span class="operator">/</span>xxx<span class="operator">/</span>xx.sql</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>后台启动部署</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出到 msg 文件中</span></span><br><span class="line"><span class="attr">nohup</span> <span class="string">java -jar coder-itl.jar &gt;./msg.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分离标准输出和标准错误到不同的文件中</span></span><br><span class="line"><span class="attr">nohup</span> <span class="string">java -jar coder-itl.jar &gt; stdout.log 2&gt; stderr.log &amp;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问</p><blockquote><p>虚拟机<code>IP:Port/项目的相关资源路径</code></p><p><a href="http://192.168.32.128:8080/account/queryAccount">http://192.168.32.128:8080/account/queryAccount</a></p></blockquote><p><img src="https://i.imgloc.com/2023/06/27/VrbiUE.png" alt="部署成功后的访问测试"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-优雅参数校验</title>
      <link href="/2023/06/26/6dc3b65e/"/>
      <url>/2023/06/26/6dc3b65e/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringBoot-优雅参数校验"><a href="#SpringBoot-优雅参数校验" class="headerlink" title="SpringBoot-优雅参数校验"></a>SpringBoot-优雅参数校验</h3><h4 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h4><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgloc.com/2023/06/26/VNUlvk.png" alt="高版本的springboot自动引入了实现"></p></li><li><p>低版本的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="空和非空检查"><a href="#空和非空检查" class="headerlink" title="空和非空检查"></a>空和非空检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@NotBlank</td><td>只能用于字符串不为<code>null</code>，并且字符串<code>#trim()</code>以后<code>length</code>要大于<code>0</code></td></tr><tr><td>@NotEmpty</td><td>集合对象的元素不为<code>0</code>，即集合不为空<code>也可用于字符串不为 null</code></td></tr><tr><td>@NotNull</td><td>不能为<code>null</code></td></tr><tr><td>@Null</td><td>必须为<code>null</code></td></tr></tbody></table></div><h4 id="数值检查"><a href="#数值检查" class="headerlink" title="数值检查"></a>数值检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@decimalMax(value)</td><td>被注释的元素必须是一个数字,其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字,其值必须小于等于指定的最小值</td></tr><tr><td>@Digits(integer,fraction)</td><td>被注释的元素必须是一个数字,其值必须在可接受的范围内</td></tr><tr><td>@Positive</td><td>判断正数</td></tr><tr><td>@Max(value)</td><td>该字段的值只能小于或等于该值</td></tr><tr><td>@Min(value)</td><td>该字段的值只能大于或等于该值</td></tr></tbody></table></div><h4 id="Boolean检查"><a href="#Boolean检查" class="headerlink" title="Boolean检查"></a>Boolean检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>被注释的元素必须为<code>true</code></td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为<code>false</code></td></tr></tbody></table></div><h4 id="长度检查"><a href="#长度检查" class="headerlink" title="长度检查"></a>长度检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Size(max,min)</td><td>检查该字段的<code>size</code>是否在<code>min</code>和<code>max</code>之间,可以是字符串、数组、集合、Map等</td></tr></tbody></table></div><h4 id="日期检查"><a href="#日期检查" class="headerlink" title="日期检查"></a>日期检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td>@FutureOrPresent</td><td>判断日期是否是将来或现在日期</td></tr><tr><td>@Past</td><td>检查该字段的日期是在过去</td></tr><tr><td>@PastOrPresent</td><td>判断日期是否是过去或现在日期</td></tr></tbody></table></div><h4 id="其他检查"><a href="#其他检查" class="headerlink" title="其他检查"></a>其他检查</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Email</td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table></div><h4 id="Hibername-Validator-附加的约束注解"><a href="#Hibername-Validator-附加的约束注解" class="headerlink" title="Hibername Validator 附加的约束注解"></a>Hibername Validator 附加的约束注解</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Range(min,max)</td><td>被注释的元素必须是在合适的范围内</td></tr><tr><td>@Length</td><td>被注释的字符串的大小必须在指定的范围内</td></tr></tbody></table></div><h4 id="Valid-和-Validated"><a href="#Valid-和-Validated" class="headerlink" title="@Valid 和 @Validated"></a>@Valid 和 @Validated</h4><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@valid</td><td>是<code>Bean validation</code>所定义,可以添加在普通方法、构造方法、方法参数、方法返回、成员变量上，表示他们需要进行约束检查，当有嵌套校验时使用</td></tr><tr><td>@Validated</td><td>是<code>Spring Validation</code>所定义的，可以添加在类、方法参数、普通方法上,表示他们需要进行约束校验.同时,@Validated的<code>value</code>属性,支持分组校验,绝大多数场景使用</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>&#123;</span><br><span class="line">    <span class="comment">// 嵌套</span></span><br><span class="line">    <span class="meta">@valid</span></span><br><span class="line">    Student student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud - Alibaba</title>
      <link href="/2023/06/23/a138dab4/"/>
      <url>/2023/06/23/a138dab4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SpringCloud-全家桶"><a href="#SpringCloud-全家桶" class="headerlink" title="SpringCloud-全家桶"></a>SpringCloud-全家桶</h3><h4 id="微服务架构的概念以及优势"><a href="#微服务架构的概念以及优势" class="headerlink" title="微服务架构的概念以及优势"></a>微服务架构的概念以及优势</h4><h5 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h5><ul><li>官方定义: 微服务就是由一系列围绕自己业务开发的微小服务构成，他们独立部署运行在自己的进程里,基于分布式的管理</li><li>通俗定义: 微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能,包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露<code>api</code>来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中</li></ul><h5 id="单体应用架构优缺点"><a href="#单体应用架构优缺点" class="headerlink" title="单体应用架构优缺点"></a>单体应用架构优缺点</h5><ul><li>优点: 单一架构模式在项目初期很小的时候开发方便,测试方便,部署方便，运行良好</li><li>缺点: 应用随着时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很有可能数百万行的代码，互相之间繁琐的<code>jar</code>包。久而久之，开发的效率低，代码维护困难。还有一个如果想整体应用采用新的技术，新的框架或者语言，那是不可能的，任意模块的漏洞或者错误都会影响整个应用，降低系统的可靠性</li></ul><h5 id="微服务加入的优缺点"><a href="#微服务加入的优缺点" class="headerlink" title="微服务加入的优缺点"></a>微服务加入的优缺点</h5><ul><li>优点: 将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信，每个服务应该有自己单独的管理团队，高度自治，服务各自有各自单独的职责，服务之间松耦合，避免因一个模块的问题导致服务崩溃</li><li>缺点<ol><li>开发人员需要处理分布式的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>服务治理和服务监控是关键</li></ol></li></ul><h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><h5 id="什么是-SpringCloud"><a href="#什么是-SpringCloud" class="headerlink" title="什么是 SpringCloud"></a>什么是 SpringCloud</h5><ul><li><p>官网</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://spring.io/projects/spring-cloud</span></span><br><span class="line"><span class="attr">Spring</span> <span class="string">Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</span></span><br></pre></td></tr></table></figure><blockquote><p><code>springcloud</code>为开发人员提供了分布式系统中快速构建一些通用模式的工具(例如: 配置管理、服务发现、断路器、微代理、控制总线)。分布式系统的协调导致了锅炉版模式。使用<code>springcloud</code>开发人员可以快速地建立实现这些模式的服务和应用程序</p></blockquote></li><li><p>通俗理解</p><blockquote><p><code>springcloud</code>是一个涵盖多个子项目的开发工具集，集合了众多的开源框架，他利用了<code>Spring Boot</code>开发的便利性实现了很多功能，如服务注册，服务注册发现，负载均衡等。<code>SpringCloud</code>在整合过程中主要是针对<code>Neflilx</code>开源组件的封装,<code>SpringCloud</code>的出现真正的简化了分布式架构的开发。<code>Netflix</code>是美国的一个在线视频网站,微服务业的翘楚，它是公认的大规模生产微服务的杰出实践者，<code>Netflix</code>的开源组件已经在它的大规模分布环境中经过多年的生产实践验证，因此<code>SpringCloud</code>中很多组件都是基于<code>Netflix</code></p></blockquote></li></ul><h4 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h4><ul><li><p>版本映射</p><p><img src="https://img-blog.csdnimg.cn/0dfcd73cac7347a88999fa42a7f62273.png" alt=""></p></li></ul><h4 id="IDEA-模拟集群实现"><a href="#IDEA-模拟集群实现" class="headerlink" title="IDEA-模拟集群实现"></a>IDEA-模拟集群实现</h4><ul><li><p>集群配置<br><img src="https://img-blog.csdnimg.cn/3e86848145db45c49351e14e11af7431.png" alt=""></p></li><li><p>配置修改</p><p><img src="https://img-blog.csdnimg.cn/0beb8c3ddbc14d9293fd3ea3efc7c9e6.png" alt=""> </p></li></ul><h4 id="SpringCloud-环境搭建"><a href="#SpringCloud-环境搭建" class="headerlink" title="SpringCloud-环境搭建"></a>SpringCloud-环境搭建</h4><h5 id="服务远程调用"><a href="#服务远程调用" class="headerlink" title="服务远程调用"></a>服务远程调用</h5><ul><li><p>创建父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>dependencyManagement</code>和<code>dependencies</code></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ul><li><p><code>maven</code>使用<code>dependencyManagement</code>元素来提供了一种管理依赖版本号的方式,通常会在一个组织者的最顶层的父<code>pom</code>中看到<code>dependencyManagement</code>元素</p></li><li><p>使用<code>pom.xml</code>中的<code>dependencyManagement</code>元素能让所有在子项目中引用一个依赖而不需<code>显示的列出版本号</code>,<code>maven</code>会沿着父子层次向上走,直到找到一个拥有<code>dependencyManagement</code>元素的项目,然后他就会使用这个<code>dependencyManagement</code>元素中指定的版本号</p></li><li><p>这样做的好处就是: 如果有多个子项目都引用同一样的依赖,则可以避免在每个使用的子项目里都声明一个版本号,这样当想升级或切换到另一个版本时,只需在顶层父容器里更新,而不需要一个一个子项目的修改,另外如果某个子项目需要另外的一个版本,只需要声明<code>version</code>就可以了</p></li><li><p><code>dependencyManagement</code>里<code>只是声明依赖,并不实现引入</code>，因此子项目需要显示的声明需要使用的依赖，如果子项目中指定了版本号,那么就会使用子项目中指定的<code>jar</code>版本</p></li></ul></div></li><li><p>创建<code>order-service</code>子模块</p><ul><li><p>修改<code>xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_order where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Order <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建<code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据id查询订单并返回</span></span><br><span class="line">        <span class="keyword">return</span> orderService.queryOrderById(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.user.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br></pre></td></tr></table></figure></li><li><p><code>sql</code>脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database cloud_order;</span><br><span class="line"><span class="comment">-- 创建表与测试数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `username` (`name`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">109</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 ROW_FORMAT<span class="operator">=</span>COMPACT</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">101</span>, <span class="number">1</span>, <span class="string">&#x27;Apple 苹果 iPhone 12 &#x27;</span>, <span class="number">699900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="number">2</span>, <span class="string">&#x27;雅迪 yadea 新国标电动车&#x27;</span>, <span class="number">209900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="number">3</span>, <span class="string">&#x27;骆驼（CAMEL）休闲运动鞋女&#x27;</span>, <span class="number">43900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">104</span>, <span class="number">4</span>, <span class="string">&#x27;小米10 双模5G 骁龙865&#x27;</span>, <span class="number">359900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">105</span>, <span class="number">5</span>, <span class="string">&#x27;OPPO Reno3 Pro 双模5G 视频双防抖&#x27;</span>, <span class="number">299900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">106</span>, <span class="number">6</span>, <span class="string">&#x27;美的（Midea) 新能效 冷静星II &#x27;</span>, <span class="number">544900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">107</span>, <span class="number">2</span>, <span class="string">&#x27;西昊/SIHOO 人体工学电脑椅子&#x27;</span>, <span class="number">79900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order <span class="keyword">VALUES</span> (<span class="number">108</span>, <span class="number">3</span>, <span class="string">&#x27;梵班（FAMDBANN）休闲男鞋&#x27;</span>, <span class="number">31900</span>, <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建<code>user-service</code>子模块</p><ul><li><p>修改<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径： /user/110</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/cloud_user?useSSL=false</span></span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-<span class="keyword">package</span>: com.example.user.pojo</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-<span class="keyword">case</span>: <span class="literal">true</span></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.example: debug</span><br><span class="line">  pattern:</span><br><span class="line">    dateformat: MM-dd HH:mm:ss:SSS</span><br></pre></td></tr></table></figure></li><li><p>创建<code>sql</code>脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database cloud_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表与测试数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line">(</span><br><span class="line">    `id`       <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收件人&#x27;</span>,</span><br><span class="line">    `address`  <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `username` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">109</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb3</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> COMPACT</span><br><span class="line">  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="string">&#x27;湖南省衡阳市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;文二狗&#x27;</span>, <span class="string">&#x27;陕西省西安市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;华沉鱼&#x27;</span>, <span class="string">&#x27;湖北省十堰市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;张必沉&#x27;</span>, <span class="string">&#x27;天津市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;郑爽爽&#x27;</span>, <span class="string">&#x27;辽宁省沈阳市大东区&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user  <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;范兵兵&#x27;</span>, <span class="string">&#x27;山东省青岛市&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动访问测试</p><ul><li><p>order</p><p><img src="https://img-blog.csdnimg.cn/f6517e1fc9104d6d830a71373a801b41.png" alt="order"></p></li><li><p>user</p><p><img src="https://img-blog.csdnimg.cn/7c048a1ad4ae40988eb4234a63d0cf6f.png" alt=""></p></li><li><p>需求: 根据订单<code>id</code>查询订单功能的同时,把订单所属的用户信息一起返回</p><ul><li><p>修改一: 在<code>order-service</code>中注册<code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// order-service 启动类下注册 </span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 RestTemplate 并注入 spring 容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改二: 修改<code>order-service</code>的控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">/******************************************/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">// 发起远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 封装 user 到 order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">/******************************************/</span></span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/53d738c6668243918931512b490ebcd6.png" alt="实现服务远程调用"></p></li></ul></li></ul></li></ul><h5 id="服务注册中心介绍"><a href="#服务注册中心介绍" class="headerlink" title="服务注册中心介绍"></a>服务注册中心介绍</h5><ul><li><p>远程调用的问题</p><p><img src="https://img-blog.csdnimg.cn/4156195fd1d64f51bb98519df69c6b7c.png" alt="问题原因"></p><blockquote><p>在远程调用过程中,如果书写硬编码则在使用时是很不方便的，如果服务出现集群，那么如何抉择地址呢？在此种问题下，服务注册中心出现，解决上述的问题</p></blockquote></li><li><p>什么是服务注册中心</p><blockquote><p>所谓服务注册中心就是在整个的微服务架构中单独提出一个服务，这个服务不完成系统的任何业务功能，仅仅用来完成对整个服务系统的服务注册和服务发现，以及对服务健康状态的监控和管理功能</p></blockquote><ul><li><p>无服务注册中心</p><p><img src="https://img-blog.csdnimg.cn/29b2786f1fc3422182438327d31f8a2f.png" alt=""></p></li><li><p>服务注册中心</p><p><img src="https://img-blog.csdnimg.cn/a226daec0be148e887b15b2eaa79c546.png" alt=""></p></li></ul></li><li><p>服务注册中心</p><ol><li>可以对所有的微服务的信息进行存储，如服务的名称、<code>IP</code>、端口等</li><li>可以在进行服务调用时通过服务发现查询可用的微服务列表及网络地址进行服务调用</li><li>可以对所有的微服务进行心跳检测，如发现某实例长时间无法访问，就会从服务注册表移除该实例</li></ol></li></ul><h5 id="服务注册中心组件"><a href="#服务注册中心组件" class="headerlink" title="服务注册中心组件"></a>服务注册中心组件</h5><h6 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h6><ul><li><p>作用</p><p><img src="https://img-blog.csdnimg.cn/00ebb1d0f7974d8e9e8971cd3e191975.png" alt="作用介绍"></p><blockquote><p>不论是服务消费者还是服务提供者,统称<code>client</code>,首先作为客户端(<code>client</code>),<code>client</code>会注册服务信息到<code>Eureka-Server(注册中心)</code>,通过服务拉取,获取信息,在通过远程调用,选择一个进行调用</p></blockquote></li><li><p>创建<code>Eureka-Server</code>模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka-Server的 pom.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承父项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>blr-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka-Server 的 application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span> <span class="comment"># 执行服务端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">EUREKA-SERVER</span> <span class="comment"># 指定服务名称 唯一标识</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># eureka 服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># false表示不在注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># false 表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与 Eureka server 交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.eureka.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coder-itl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 开启当前应用是一个服务注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动后在浏览器访问:<code>http://localhost:8761/</code></p><p><img src="https://img-blog.csdnimg.cn/b1fc4d4ba9534f75910dc25d06c4a30f.png" alt="需要的关注信息"></p></li></ul></li><li><p>创建<code>Eureka-Client</code>模块，这个模块是一个功能应用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>blr-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span> <span class="comment"># 自定义启动端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">EUREKACLIENT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 表示是否将自己注册进 EurekaServer 默认为 true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 是否从 EurekaServer 抓取已有的注册信息,默认为 true,单节点无所谓,集群必须设置为 true 才能配合 ribbon 使用负载均衡</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与 Eureka server 交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动顺序为:<code>server-&gt;client</code></p></li><li><p>启动</p><p><img src="https://img-blog.csdnimg.cn/b7fb195c49c846b9a254f76851a5ccf6.png" alt="在注册中心查看到已成功注册"></p></li></ul></li><li><p>自我保护机制</p><blockquote><p><code>EurekaClient</code>会通过心跳的方式去和<code>EurekaServer</code>进行连接(<code>默认 30s EurekaClient</code>会发送一次心跳请求，如果超过了<code>90s</code>还没有发送心跳信息的话,<code>EurekaServer</code>就认为你宕机了,将当前<code>EurekaClient</code>从注册表中移除)</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EurekaServer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span> </span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment"># 心跳的间隔</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment"># 多久没发送,就认为你宕机了</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EurekaClient</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span> <span class="comment"># 默认 每隔多久去更新一下本地的注册表缓存信息</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Eureka</code>的自我保护机制,统计<code>15</code>分钟内,如果一个服务的心跳发送比例低于<code>85%</code>,<code>EurekaServer</code>就会开启自我保护机制</p><ul><li><p>不会从<code>EurekaServer</code>中去除长时间没有收到的心跳的服务</p></li><li><p><code>EurekaServer</code>还是可以正常提供服务的</p></li><li><p>网络比较稳定时,<code>EurekaServer</code>才会开始将自己的信息被其他节点同步过去</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EurekaServer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">true</span> <span class="comment"># 默认开启自我保护机制</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>CAP</code>定理</p><ul><li><code>C</code>一致性</li><li><code>A</code>可用性</li><li><code>P</code>分区容错性</li></ul><blockquote><p> 这三个特性在分布式情况环境下,只能满足<code>2个</code>,而且分区容错性在分布式环境下,是必须要满足的,只能在<code>AC</code>之间进行权衡</p></blockquote><ul><li>如果先择<code>CP</code>: 保证了一致性,可能会造成你系统在一定时间内是不可用的,如果你同步数据的时间比较长,造成的损失大</li><li><code>Eureka</code>就是一个<code>AP</code>的效果,高可用的集群,<code>Eureka</code>集群是无中心的(无<code>master</code>)<code>Eureka</code>即便宕机几个也不会影响系统的使用,不需要重新的去推举一个<code>master</code>，也会导致一定时间内数据不一致</li></ul></li></ul></li><li><p>集群搭建</p><p><img src="https://img-blog.csdnimg.cn/202550563630417ab743b322fcfb7b2c.png" alt="分析"></p><ul><li><p><code>EurekaServer</code>集群实现步骤</p><ul><li><p>创建多个<code>EurekaServer</code>项目</p><p><img src="https://img-blog.csdnimg.cn/7f9f1a2a7e0044d1ba1783617ad8346e.png" alt="idea通过修改端口模拟集群"></p></li><li><p>引入<code>eureka server</code>依赖</p></li><li><p>配置文件</p><ul><li><p><code>node1</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line">  <span class="string">http://localhost:8762/eureka,</span> <span class="string">http://localhost:8763/eureka</span></span><br></pre></td></tr></table></figure></li><li><p><code>node2</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line">  <span class="string">http://localhost:8761/eureka,</span> <span class="string">http://localhost:8763/eureka</span></span><br></pre></td></tr></table></figure></li><li><p><code>node3</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8763</span></span><br><span class="line"><span class="string">http://localhost:8761/eureka,</span> <span class="string">http://localhost:8762/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/185bbabbca40484a98e2c33317625f96.png" alt="在同一个EurekaServer配置文件中，启动时修改如下"></p></li></ul></li><li><p>在每个启动类添加注解<code>@EnableEurekaServer</code></p></li></ul></li></ul></li><li><p>将<code>user-service</code>和<code>order-service</code>作为客户端加入</p><ul><li><p>添加客户端依赖</p></li><li><p>添加客户端配置</p></li><li><p>启动类添加客户端注解</p></li><li><p>修改<code>order-service</code>的远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String url = &quot;http://localhost:8081/user/&quot; + order.getUserId();</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://USERSERVICE/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 负载均衡配置</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7e57d687d7a6497cb03dca5355faeca2.png" alt="列表"></p><p><img src="https://img-blog.csdnimg.cn/ac3bf31ec28b404bb96d02f70d36a7e8.png" alt="负载均衡流程"></p></li></ul></li></ul><h6 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h6><div class="tabs" id="zookeeper"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#zookeeper-1">连通测试</button></li><li class="tab"><button type="button" data-href="#zookeeper-2">创建项目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="zookeeper-1"><ul><li><p>前往<code>Zookper</code>,了解安装与使用</p><blockquote><p><a href="https://coderitl.github.io/2022/07/20/15264.html">https://coderitl.github.io/2022/07/20/15264.html</a></p></blockquote></li><li><p>测试主机到虚拟机网络连通性</p><p><img src="https://img-blog.csdnimg.cn/d4401088e71c46b48b15f42f42f92b8f.png" alt="测试主机到虚拟机网络连通性"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="zookeeper-2"><ul><li><p>创建名为<code>cloud-provider-payment8004</code>的子模块</p></li><li><p>修改<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coderitl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   整合 zookeeper 客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  先排除自带的 zookeeper 3.5.3 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   在添加新版本 zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coderitl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 该注解用于向 consul 或这 zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8004</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8004 代表注册到 zookeeper 服务器的支付服务提供者的端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务别名-注册 zookeeper 到注册中心名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.247</span><span class="number">.130</span><span class="string">:2181</span> <span class="comment"># 连接zookeeper服务器地址</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderitl.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/paymeny/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springCloud with zookeeper: &quot;</span> + serverPort + <span class="string">&quot;\t&quot;</span> + UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><ul><li><p>版本依赖问题</p><ul><li><p>错误问题</p><p><img src="https://img-blog.csdnimg.cn/3681fd0f222a4358bf3f43187c0b023e.png" alt="错误问题"></p></li><li><p>解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   整合 zookeeper 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  先排除自带的 zookeeper 3.5.3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   在添加新版本 zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>服务成功注册进<code>Zookeeper</code></p><ul><li><p>查看服务是否注册成功</p><p><img src="https://img-blog.csdnimg.cn/cf7c0c8b005e42cca4ed4c3653631c02.png" alt="查看服务是否注册成功"></p></li><li><p>访问</p><p><img src="https://img-blog.csdnimg.cn/23c3d47696a646349d71b2438b6f5a9e.png" alt="访问"></p></li></ul></li><li><p>查看<code>zookeeper</code>内数据信息</p><p><img src="https://img-blog.csdnimg.cn/b0219f81cf9f4005ad889f5e78154127.png" alt="相信信息"></p></li></ul></li><li><p>服务启动后生成的节点是临时节点，<code>zookeeper</code>服务器再一定时间内心跳没有回应,会清理该节点</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h6><div class="tabs" id="nacos"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#nacos-1">安装与启动</button></li><li class="tab"><button type="button" data-href="#nacos-2">服务注册到Nacos</button></li><li class="tab"><button type="button" data-href="#nacos-3">Nacos环境隔离</button></li><li class="tab"><button type="button" data-href="#nacos-4">Nacos细节</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="nacos-1"><ul><li><p>安装</p><blockquote><p><a href="https://github.com/alibaba/nacos/releases/download/1.4.7/nacos-server-1.4.7.zip">https://github.com/alibaba/nacos/releases/download/1.4.7/nacos-server-1.4.7.zip</a></p></blockquote></li><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">./startup.cmd</span> <span class="string">-m standalone</span></span><br></pre></td></tr></table></figure></li><li><p>默认端口是<code>8848</code></p><blockquote><p><code>localhost:8848/nacos</code></p></blockquote><ul><li>账户名和密码都是<code>nacos</code></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacos-2"><ul><li><p>服务注册到<code>Nacos</code></p><ul><li><p>在<code>父工程</code>中的<code>dependencyManagement</code>下添加<code>spring-cloud-alibaba</code>的管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  nacos 的管理依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注释掉<code>服务中</code>原有的<code>eureka</code>依赖,添加<code>nacos</code>配置，移除<code>eureka</code>的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># <span class="doctag">TODO:</span> 添加关于 Nacos 的配置 =&gt; nacos服务地址</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>nacos</code>的客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结果页面</p><ul><li><p>结果页面：服务名称建议小写, 在<code>order-service 配置Nacos作为注册中心</code></p><p><img src="https://img-blog.csdnimg.cn/5d4088bfe561492cbf46bc613170dbfe.png" alt="结果页面"></p></li></ul></li><li><p><code>nacos</code>注册中心细节问题</p><ul><li><p>负载均衡依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  2. <span class="doctag">TODO:</span> 添加负载均衡依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>远程调用的地址<code>(主要是通过可视化页面获取)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 使用服务发现,完成服务拉取 修改访问地址</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service-client/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/aa9d3ad662e640dabf90ce116ac9b807.png" alt=""></p></li></ul></li></ul></li><li><p>集群属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="comment"># 实现集群配置</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">BJ</span> <span class="comment"># 集群名称(自定义名称,也就是机房位置) 例如: 北京 BJ (同区域集群使用同一名称)</span></span><br></pre></td></tr></table></figure></li><li><p>调整负载均衡配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user-service8081 名称严格为nacos服务列表中的服务名(局部负载均衡配置)</span></span><br><span class="line"><span class="attr">user-service-client:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure></li><li><p><code>Nacos</code>负载均衡策略</p><ul><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者,才去其他集群寻找,并且会报警告</li><li>确定了可用实例列表后,再采用随机负载均衡挑选实例</li></ul></li><li><p>权重配置</p><blockquote><p>服务器设备性能有差异,部分实例所在机器性能较好,另一些比较差,我们希望性能好的机器承担更多的用户请求:</p><p><code>Nacos</code>提供了权重配置来控制访问频率,<code>权重越大则访问频率越高</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/17660c4e89fc48049c18b01696e8cdb5.gif#pic_center" alt="配置权重"></p><ul><li>实例权重控制<ul><li><code>nacos</code>控制台可以设置实例的权重值,<code>0-1</code>之间</li><li>同集群内的多个实例,权重越高被访问的频率越高</li><li>权重设置为<code>0</code>则完全不会被访问</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacos-3"><ul><li><p>环境隔离: <code>namespace</code></p><blockquote><p><code>Nacos</code>中服务存储和数据存储的最外层都是一个名为<code>namespace</code>的东西,用来做最外层隔离</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f6d9d5e061d5440a9b0762db7b4c13df.png" alt="namespace" style="zoom:50%;" /></p><ul><li><p>新建命名空间</p><ul><li><p>点击 - 新建命名空间</p><p><img src="https://img-blog.csdnimg.cn/9eb8f1c11c854fa4b2948b78afd7578e.png" alt="新建命名空间"></p></li><li><p>开始新建</p><p><img src="https://img-blog.csdnimg.cn/f2a3901bb38b4545901a979c409a0cd5.png" alt="新建命名空间"></p></li></ul></li><li><p><code>ID</code>很重要</p><p><img src="https://img-blog.csdnimg.cn/ed6e94fa037d486cadaeb7e9077fc0a2.png" alt="重要ID"></p></li><li><p>添加<code>namespace</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># order-service application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">cloud:</span></span><br><span class="line">     <span class="attr">nacos:</span></span><br><span class="line">       <span class="attr">discovery:</span></span><br><span class="line"> <span class="attr">namespace:</span> <span class="number">9527</span> <span class="comment"># 命名空间填 创建命名空间时的 id【默认可以通过 UUID 自动生成】</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/14c9e7c8ef314a0da8d38d217f8e1725.png" alt="配置完成命名空间"></p></li><li><p>总结<code>Nacos</code>环境隔离</p><ul><li><code>namespace</code>用来做环境隔离</li><li>每个<code>namespace</code>都有唯一<code>id</code></li><li>不同的<code>namespace</code>下的服务不可见</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacos-4"><ul><li><p>临时实例</p><p><img src="https://img-blog.csdnimg.cn/429e46a13cec4ba78c37bb8f94f75b5a.png" alt="临时实例"></p></li><li><p>临时实例<code>采用心跳检测</code></p></li><li><p>非临时实例</p><ul><li><p>非临时实例(<code>Nacos会主动询问是否健康</code>)</p><p><img src="https://img-blog.csdnimg.cn/28ab4bebcf304c1888bfcc8c4bb7246a.png" alt="非临时实例"></p></li></ul></li><li><p>临时实例和非临时实例配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">         <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure></li><li><p><code>Eureka</code>和<code>Nacos</code>区别</p><ul><li>共同点<ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li>区别<ul><li><code>Nacos</code>支持服务端主动检测提供者状态: 临时实例采用心跳模式,非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除,非临时实例则不会被剔除</li><li><code>Nacos</code>支持服务列表变更的消息推送模式,服务列表更新更及时</li><li><code>Nacos</code>集群默认采用<code>AP</code>方式,当集群中存在非临时实例时,采用<code>CP</code>模式,<code>Eureka</code>采用<code>AP</code>模式</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon-负载均衡"></a>Ribbon-负载均衡</h5><div class="tabs" id="ribbon"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ribbon-1">简介</button></li><li class="tab"><button type="button" data-href="#ribbon-2">负载均衡</button></li><li class="tab"><button type="button" data-href="#ribbon-3">替换负载均衡策略</button></li><li class="tab"><button type="button" data-href="#ribbon-4">Ribbon饥饿加载</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ribbon-1"><ul><li><p>简介</p><blockquote><p><code>SpringCloudRibbon</code>是基于<code>netflix Ribbon</code>实现的一套<code>客户端</code>负载均衡的工具</p><p>简单地说,<code>Ribbon</code>是<code>Netflix</code>发布的开源项目,主要的功能是提供<code>客户端的软件负载均衡算法和服务调用</code>,<code>Ribbon</code>客户端组件提供的一系列完善的配置项如何连接超时的,重试等，简单地说,就是在配制文件中列出<code>Load Balancer(简称LB)</code>后面所有的机器,<code>Ribbon</code>会自动地帮助你基于某种规则(如简单轮询,随机连接等)去连接这些机器,我们很容易使用<code>Ribbon</code>实现自定义的负载均衡算法</p></blockquote></li><li><p><code>LB</code>负载均衡(<code>Load Balance</code>)是什么</p><blockquote><p>简单地说就是将用户的请求平摊的分配到多个服务上,从而达到系统的<code>HA</code>（高可用）</p><p>常见的负载均衡有软件<code>Nginx,LVS，硬件 F5等</code></p></blockquote></li><li><p><code>Ribbon</code>本地负载均衡客户端<code>VS Nginx</code>服务端负载均衡的区别</p><blockquote><p><code>Nginx</code>是服务器负载均衡,客户端所有请求都会交给<code>nginx</code>，然后由<code>nginx</code>实现转发请求,即<code>负载均衡</code>是由服务端实现的</p><p><code>Ribbon</code>本地负载均衡,在调用微服务接口的时候,会在注册中心上获取注册信息服务列表之后缓存到<code>JVM</code>本地,从而实现<code>RPC</code>远程服务调用技术</p></blockquote></li><li><p>使用</p><ul><li><p>依赖问题</p><ul><li><p>新版<code>Eureka</code>已经引入<code>Ribbon</code></p><p><img src="https://img-blog.csdnimg.cn/9fdd475484494f33b14c4dbee5ddcd6a.png" alt=""></p></li></ul></li><li><p><code>Ribbion</code>的负载均衡和<code>Rest</code>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回对象响应体中数据转换成的对象,基本可以理解为 JSON (restTemplate.getForObject)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;OrderController id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="comment">// 写操作: postForObject</span></span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 返回对象为 ResponseEntity对象,包含响应中的一些重要信息,必须响应头,响应状态码 响应体等</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getForEntity/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;OrderController id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> entity.getBody();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// restTemplate.postForEntity(PAYMENT_URL + &quot;/payment/get/&quot; + id, CommonResult.class).getBody();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Ribbon</code>核心组件<code>IRule</code></p><blockquote><p><code>IRule</code>：根据特定算法中从服务列表中选取一个要访问的服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IRule 是一个接口 作用范围: 全体服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRule</span> &#123;</span><br><span class="line">    Server <span class="title function_">choose</span><span class="params">(Object var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setLoadBalancer</span><span class="params">(ILoadBalancer var1)</span>;</span><br><span class="line"></span><br><span class="line">    ILoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c13dc52423a34fa086e452c19ea4f9af.png" alt="关系图"></p></li></ul></li><li><p><code>7种负载均衡方式</code></p><ul><li><code>com.netflix.loadbalancer.RoundRobinRule</code>轮询</li><li><code>com.netflix.loadbalancer.RandomRule</code>随机</li><li><code>com.netflix.loadbalancer.RetryRule</code>先按照<code>轮询</code>的策略获取服务,如果获取服务失败则在指定时间内会进行重试,获取可用的服务</li><li><code>WeightedResponseTimeRule</code>对<code>轮询</code>的扩展,响应速度越快的实例选择权重越大,越容易被选择</li><li><code>BestAvailableRule</code>会先过滤掉由于多次访问故障而处于断路跳闸状态的服务,然后选择一个并发最下的服务</li><li><code>AvailabiltiyFilteringgRule</code>先过滤掉故障实例,在选择并发较小的实例</li><li><code>ZoneAvoidanceRule</code>:默认规则,复合判断<code>server</code>所在区域的性能和<code>server</code>的可用性选择服务器</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ribbon-2"><ul><li><p>负载均衡流程</p><p><img src="https://img-blog.csdnimg.cn/ecffeae2c588450683e87a7ef5248cb6.png" alt="负载均衡流程"></p></li><li><p>负载均衡原理</p><blockquote><p>负载均衡算法: <code>rest 接口第几次请求数</code>  % <code>服务器集群总数量</code> = <code>实际调用服务器位置的下标</code>,每次服务器重启后<code>rest</code>接口计数从<code>1</code>开始</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances = discoryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line">List[<span class="number">0</span>] instances = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line">    List[<span class="number">1</span>] instances = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span></span><br><span class="line">        </span><br><span class="line"><span class="number">8001</span> + <span class="number">8002</span> =&gt; 组合为集群,他们共计 <span class="number">2</span> 台机器,集群总数为 <span class="number">2</span> 按照轮询算法原理:</span><br><span class="line">    当总请求数为 <span class="number">1</span> 时: <span class="number">1</span> % <span class="number">2</span> = <span class="number">1</span> 对应下标位置为 <span class="number">1</span>,则获取服务器地址为: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span></span><br><span class="line">    当总请求数为 <span class="number">2</span> 时: <span class="number">2</span> % <span class="number">2</span> = <span class="number">0</span> 对应下标位置为 <span class="number">0</span>,则获取服务器地址为: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line">    当总请求数为 <span class="number">3</span> 时: <span class="number">3</span> % <span class="number">2</span> = <span class="number">1</span> 对应下标位置为 <span class="number">1</span>,则获取服务器地址为: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span></span><br><span class="line">    当总请求数为 <span class="number">4</span> 时: <span class="number">4</span> % <span class="number">2</span> = <span class="number">0</span> 对应下标位置为 <span class="number">0</span>,则获取服务器地址为: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line">        ....</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ribbon-3"><ul><li><p>如何替换(<code>全局替换</code>)</p><ul><li><p>配置细节</p><blockquote><p>官方文档明确给出警告:</p><p>​    这个自定义配置类不能放在<code>@ComponentScan</code>所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的<code>Ribbon</code>客户端所共享,达不到特殊定制化的目的了，也就是在启动类(<code>@SpringBootApplication</code>复合注解,内部有<code>ComponenScan</code>)的父包外</p></blockquote></li><li><p>新建包<code>package com.coderitl.myrule;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义为随机(其他的同理 new XX) 作用范围: 局部服务生效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主启动添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// 新添加</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost/consumer/payment/get/1</code>端口就变为随机的</p><p><img src="https://img-blog.csdnimg.cn/675bae64a1554e6eb4e425b3f49af522.gif#pic_center" alt="随机验证"></p></li></ul></li><li><p>基于某个配置文件替换</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独定格书写</span></span><br><span class="line"><span class="attr">userservice:</span> <span class="comment"># 是一个名为 userservice 的服务 -&gt;服务名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.coderitl:</span> <span class="string">debug</span> <span class="comment"># 指定包 debug 级别</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dataformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span>   </span><br></pre></td></tr></table></figure></li><li><p>两种方式的区别</p><ul><li>代码方式: 配置灵活，但修改时需要重新打包发布</li><li>配置方式: 直观、方便、无需重新打包发布，但是无法做全局配置</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ribbon-4"><ul><li><p>饥饿加载</p><blockquote><p><code>Ribbon</code>默认是采用懒加载，即第一次访问时才会创建<code>LoadBalanceClient</code>，请求时间会很长,而饥饿加载则会在项目启动时创建,降低第一次访问的耗时，配置如下:</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span> <span class="comment"># 指定对 userservice 这个服务饥饿加载</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 多个服务配置方式</span></span><br><span class="line"> <span class="attr">clients:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">a</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">b</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="Nacos-配置管理"><a href="#Nacos-配置管理" class="headerlink" title="Nacos-配置管理"></a>Nacos-配置管理</h5><div class="tabs" id="nacosconfig"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#nacosconfig-1">统一配置管理</button></li><li class="tab"><button type="button" data-href="#nacosconfig-2">配置热更新</button></li><li class="tab"><button type="button" data-href="#nacosconfig-3">多环境配置共享</button></li><li class="tab"><button type="button" data-href="#nacosconfig-4">搭建集群</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="nacosconfig-1"><ul><li><p><code>Nacos</code>配置管理</p><p><img src="https://img-blog.csdnimg.cn/direct/81cbc3a354d84e5fb05a76ea3d37c527.png" alt=""></p></li><li><p>服务中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos 配置管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新增配置文件</p><ul><li><p>点击新增</p><p><img src="https://img-blog.csdnimg.cn/49ccd12aba2f4b65bebabd9f5b017c9d.png" alt="新增配置文件"></p></li><li><p>格式如下(<code>注意: Data是有后缀的</code>)</p><p><img src="https://img-blog.csdnimg.cn/direct/cf21544600f9467989ab5bfba911ea27.png" alt="在这里插入图片描述"></p></li></ul></li><li><p>配置文件加载流程</p><ul><li><p>未加入<code>nacos</code>前</p><p><img src="https://img-blog.csdnimg.cn/8cb0354259a34349a3c49385d5f324bf.png" alt="未加入nacos前"></p></li><li><p>读取<code>nacos</code>配置文件</p><p><img src="https://img-blog.csdnimg.cn/26190636f5a64c228da727b003e7c60d.png" alt="读取nacos配置文件"></p></li></ul></li><li><p>配置统一管理步骤</p><ul><li><p>在<code>userservice</code>中的<code>resource</code>目录下创建一个<code>bootstrap.yml</code>文件,这个文件是引导文件,优先级高于<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 2. 新建 bootstrap.yml 文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称【大小写与服务名一致】</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境 这里是 dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos 地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0d010c3a45b642b1a86a80388543b535.png" alt="文件分析"></p><ul><li><p>删除主配置文件中重复配置</p><p><img src="https://img-blog.csdnimg.cn/529684f723ec4feb937754172156cd0e.png" alt="删除主配置文件中重复配置"></p></li></ul></li><li><p>读取<code>userservice-dev.yaml</code>配置文件中的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 补充一个依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  <span class="doctag">TODO:</span> 新版本 nacos 用于加载 bootstrap.yml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>无此依赖出现如下问题(新版<code>nacos</code>)</p><p><img src="https://img-blog.csdnimg.cn/d4ec273549a84b56b3f1bcadd6a0e891.png" alt="无此依赖出现如下问题"></p></li><li><p>添加后</p><p><img src="https://img-blog.csdnimg.cn/5044e18770234e5da5ba815f4e33647c.png" alt="添加后"></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># userservice-dev.yaml</span></span><br><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dataformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 5. 添加访问配置文件的控制器</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDataformat</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dataformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1f07b6ca950a42e8a9a93cf33aca8af0.png" alt="读取userservice.yml"></p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacosconfig-2"><ul><li><p>方式一：在<code>@Value</code>注入的变量所在类添加注解<code>@RefreshScope</code></p><p><img src="https://img-blog.csdnimg.cn/815a3a20cf69431b999b6ed53abe2eb8.png" alt="实现热更新"></p></li><li><p>方式二: 使用<code>@ConfigurationProperties</code>注解(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  配置类，将方式一的使用方式注释掉</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span> <span class="comment">// 前缀 + dateformat =&gt; 组成完整字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 注意匹配 nacos 定于的属性名,切勿写错</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 7. 热加载方式二: 使用配置类</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 5. 添加访问配置文件的控制器</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDataformat</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacosconfig-3"><ul><li><p>多环境共享</p><blockquote><p>不是所有的配置都适合放到配置中心，维护起来比较麻烦；建议将一些关键参数，需要<code>运行时调整的参数</code>放到 <code>nacos</code>配置中心，<code>一般都是自定义配置</code>。</p></blockquote><ul><li><p>微服务启动会从<code>nacos</code>读取多个配置文件</p><ul><li><code>[spring.application.name]-[spring.profiles.active].yaml =&gt; userservice-dev.yaml</code></li><li><code>[spring.application.name].yaml =&gt; userservice.yaml</code></li></ul><blockquote><p>无论<code>profile</code>如何变化,<code>[spring.application.name].yaml</code>这个文件按一定会被加载,因此对环境共享配置可以写入这个文件</p></blockquote></li><li><p>创建<code>spring.application=&gt; userservice</code></p><p><img src="https://img-blog.csdnimg.cn/0eaafa8d7ed2424baed8e8c1396c99e5.png" alt="创建"></p></li><li><p>创建多环境共享环境<code>IDEA =&gt; 端口模拟实现</code></p></li><li><p><code>java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 配置类中添加</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 用于读取多环境配置数据</span></span><br><span class="line"><span class="keyword">private</span> String envSharedValue;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 8. 配置多环境共享配置读取测试</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/prop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PatternProperties <span class="title function_">patternProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> patternProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/d9f9ed0969224329a49ea9fd2cdd8b71.png" alt="成功读取多环境共享数据"></p></li></ul></li><li><p>多种配置的优先级(<code>相同数据读取时显示内容遵循如下规则</code>)</p><blockquote><p><code>服务名-profile.yaml(userservice-dev.yaml) &gt; 服务名称.yaml(userservice.yaml) &gt; 本地配置(application.yaml)</code></p></blockquote></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nacosconfig-4"><ul><li><p>集群</p><p><img src="https://img-blog.csdnimg.cn/a49ff73488a84f8ab8d98741f7de6f1e.png" alt="集群" style="zoom:50%;" /></p></li><li><p>集群步骤</p><ul><li>搭建数据库,初始化数据库表结构</li><li>下载<code>nacos</code>安装包</li><li>配置<code>nacos</code></li><li>启动<code>nacos</code>集群</li><li><code>nginx</code>反向代理</li></ul></li><li><p>起步配置</p><ol><li><p>进入<code>nacos</code>的<code>conf</code>目录,修改配置文件<code>cluster.conf.example</code>，重命名为<code>cluster.conf</code>,添加<code>nacos</code>集群环境的<code>ip和端口</code></p><p><img src="https://img-blog.csdnimg.cn/7d3989ba948c441d9bdf3b9fc719d3c1.png" alt="配置如下信息"></p></li><li><p>修改<code>\nacos\conf\application.properties</code>文件,添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下内容被注释,取消注释修改局部信息即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打开数据源,告诉 nacos 我们使用的是 mysql 数据源</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 集群中的 mysql 数量</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 连接数据库的基本信息</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>在连接的数据库上执行<code>sql</code>脚本(<code>conf/nacos-mysql.sql</code>)</p></li><li><p>将<code>nacos</code>复制<code>3份</code>,再修改<code>各自对应端口号</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别修改 server.port</span></span><br><span class="line"><span class="string">nacos1</span> <span class="string">=&gt;8845</span></span><br><span class="line"><span class="string">nacos2</span> <span class="string">=&gt;8846</span></span><br><span class="line"><span class="string">nacos3</span> <span class="string">=&gt;8847</span></span><br></pre></td></tr></table></figure><ul><li><p>修改各自端口号<code>Eg: nacos1\conf\application.properties=&gt; server.port=8845</code></p><p><img src="https://img-blog.csdnimg.cn/d42a9b6631ed4538a7c21535578925cd.png" alt="修改各自端口号"></p></li></ul></li><li><p>然后分别启动三个节点</p><p><img src="https://img-blog.csdnimg.cn/58120dcdeb9b4d7ea56735f5fc12cd74.gif#pic_center" alt="然后分别启动三个节点"></p></li><li><p><code>Nginx</code>反向代理配置(其他内容为注释,可以选择全部替换,或者只替换<code>http节点</code>)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"><span class="comment"># 负载均衡配置</span></span><br><span class="line">    <span class="section">upstream</span> nacos-cluster&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="comment"># 配置 nacos 反向代理</span></span><br><span class="line">         <span class="section">location</span> /nacos &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问<code>localhost:80/nacos  =&gt; 用户名密码: nacos</code></p><p><img src="https://img-blog.csdnimg.cn/d2c7e90cc65846adb2d312ead383c2d2.png" alt="访问测试"></p></li><li><p>修改<code>bootstartap.yml</code>中的<code>nacos</code>连接端口为<code>80</code></p></li><li><p><code>nacos</code>配置可以存储在数据库中</p><p><img src="https://img-blog.csdnimg.cn/c2fa79e60e7940408956bff7efa2adb2.png" alt="数据库查看配置"></p></li></ol></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h5><div class="tabs" id="openfeign"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#openfeign-1">理论</button></li><li class="tab"><button type="button" data-href="#openfeign-2">使用步骤</button></li><li class="tab"><button type="button" data-href="#openfeign-3">自定义配置</button></li><li class="tab"><button type="button" data-href="#openfeign-4">性能优化</button></li><li class="tab"><button type="button" data-href="#openfeign-5">最佳实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="openfeign-1"><ul><li><p>是什么</p><blockquote><p><code>Feign</code>是一个声明式<code>WebService</code>客户端,使用<code>Feign</code>能让编写<code>Web Service</code>客户端更加简单.</p><p>他的使用方法是<code>定义一个服务接口然后再上面添加注解</code>,<code>Feign</code>也支持可插拔式的编码器和解码器,<code>SpringCloud</code>对<code>Feign</code>进行了封装,使其支持<code>SpringMVC</code>标准注解和<code>HttpMessageConverters</code>，<code>Fegin</code>可以与<code>Eureka</code>和<code>Ribbon</code>组合使用以支持负载均衡</p></blockquote></li><li><p><code>Feign</code>能干什么</p><blockquote><p><code>Feign</code>旨在使编写<code>Java Http</code>客户端变得更容易。</p><p>前面使用<code>Ribbon + RestTemplate</code>时,利用<code>RestTemplate</code>对<code>http</code>请求的封装处理,形成了一套模板化的调用方法,但是在实际开发中,由于对微服务依赖的调用可能不止一处,<code>往往一个接口会被多处调用,所以通常会针对每个微服务自行封装一些客户端类来包装这些以来服务的调用</code>,所以，<code>Fegin</code>在此基础上做了进一步封装,由他来帮助我们定义和实现依赖服务接口的定义,在<code>Feign</code>的实现下,<code>我们只需要创建一个接口并使用注解的方式来配置它(以前是 Dao接口上面标注 Mapper注解,现在是一个微服务接口上面标注一个,Feign注解即可)</code>,即可完成对微服务提供方的接口绑定,简化了使用<code>SpringCloud Ribbon</code>，自动封装服务调用客户端的开发量</p></blockquote></li><li><p><code>Feign</code>集成了<code>Ribbon</code></p><blockquote><p>利用<code>Ribbon</code>维护了<code>Payment</code>的服务列表信息,并且通过轮询实现类客户端的负载均衡,而与<code>Ribbon</code>不同的是,通过<code>feign</code>只需要定义服务绑定接口且以声明式的方法,优雅而简单的实现了服务调用</p></blockquote></li><li><p><code>Feign</code>与<code>openFeign</code>的区别</p><p>|                           <code>Feign</code>                            |                         <code>openFeign</code>                          |<br>| :—————————————————————————————: | :—————————————————————————————: |<br>| <code>Feign</code>是<code>SpringCloud</code>组件中的一个轻量级<code>RestFul</code>的<code>HTTP</code>服务客户端<code>Feign</code>内置了<code>Riboon</code>，用来做客户端负载均衡,去调用服务注册中心的服务,<code>Feign</code>的使用方式是:<code>使用Feign</code>的注解定义接口,调用这个接口,就可以调用服务注册中心的服务 | <code>openfeign</code>是<code>SpringCloud</code>在<code>Feign</code>的基础上支持了<code>SpringMVC</code>的注解,如<code>@RequesMapping</code>等，<code>openfeign</code>的<code>@FeignClient</code>可以解析<code>SpringMVC</code>的<code>@RequestMapping</code>注解下的接口,并通过动态代理的方式产生实现类,实现类中做负载均衡并调用其他服务 |<br>| <code>&lt;dependency&gt;</code><br/><groupId>org.springframework.cloud</groupId><br/><artfactId>spring-cloud-starter-feign</artfactId><br/>&lt;/dependency&gt; | <code>&lt;dependency&gt;</code><br/><groupId>org.springframework.cloud</groupId><br/><artfactId>spring-cloud-starter-openfeign</artfactId><br/>&lt;/dependency&gt; |</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="openfeign-2"><ul><li><p><code>Feign</code>的使用步骤</p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- <span class="doctag">TODO:</span> 1. 添加 openFeign 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主启动添加<code>@EnableFeignClients</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.coderitl.springcloud.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>FeignClient</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 3. 创建远程调用接口 user-service8081=&gt; 服务名称(必须的)</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">// private static final String URL = &quot;http://userservice/user/&quot;+order.getUserId();</span></span><br><span class="line">    <span class="comment">// findById名称可以不一致,但是目标方法的具体实现必须在</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user-service 服务中的具体实现</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>FeignClient</code>中定义的方法替换<code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 4. 删除 RestTemplate</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据id查询订单并返回</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.queryOrderById(orderId);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 5. 使用 feign 远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问测试（feign实现远程调用）</p><p><img src="https://img-blog.csdnimg.cn/b90021dc4cd64ddcadc8fd4ddbc476be.png" alt=""></p></li><li><p><code>feign</code>实现了负载均衡<code>内部集成了 Ribbon</code></p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="openfeign-3"><ul><li><p><code>Feign</code>运行自定义配置来覆盖默认配置,可以修改的配置如下</p><p><img src="https://img-blog.csdnimg.cn/direct/629663c0991e4a5eaf728fab53a4b9aa.png" alt=""></p><blockquote><p>一般只需要配置日志级别</p></blockquote></li><li><p>配置日志有两种方式</p><ul><li><p>方式一: 配置文件</p><ul><li><p>全局生效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 实现日志配置的第一种方式</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里是用 default 就是全局配置,如果是写服务名称,则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment"># 日志级别</span></span><br></pre></td></tr></table></figure></li><li><p>局部生效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 实现日志配置的第一种方式</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 这里是用 default 就是全局配置,如果是写服务名称,则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment"># 日志级别</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置方式二： <code>Java</code>代码方式,需要先声明一个<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 创建 Bean 用于配置 feign 的日志(注意: 这个类上没有注解不会生效,是通过以下方式生效的)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">level</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>而后如果是全局配置,则把它<code>(DefaultFeignConfiguration)</code>放到<code>@EnableFeignClients</code>这个注解中(<code>主启动</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// defaultConfiguration = DefaultFeignConfiguration.class</span></span><br><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果是局部配置,则把它(<code>DefaultFeignConfiguration</code>)放在<code>@FeignClient</code>这个注解中(<code>定义远程调用处</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> configuration = DefaultFeignConfiguration.class</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;,configuration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">// private static final String URL = &quot;http://user-service8081/user/&quot;;</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="openfeign-4"><ul><li><p><code>Feign</code>底层的客户端实现</p><ul><li><code>URLConnection</code>： 默认实现,不支持连接池</li><li><code>Apache HttpClient</code>支持连接池</li><li><code>OKHttp</code>支持连接池</li></ul></li><li><p>优化性能主要包括</p><ul><li>使用连接池代替默认的<code>URLConnection</code></li><li>日志级别,最好用<code>basic | none</code></li></ul></li><li><p>以<code>Apache HttpClient</code>实现的记录</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  <span class="doctag">TODO:</span> feign性能优化=&gt;httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 配置连接池</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启 feign 对 httpClient 的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="openfeign-5"><ul><li><p>方式一:</p><blockquote><p>通过继承的方式,给消费者的<code>FeignClient</code>和提供者的<code>Controller</code>定义统一的父接口作为标准</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6e221236e2e9461c9df76290174ea43d.png" alt="继承"></p></li><li><p>方式二(抽取)</p><blockquote><p>将<code>FeignClient</code>抽取为独立模块,并且把接口有关的<code>POJO(实体类)</code>,默认的<code>Feign</code>配置都放到这个模块中,提供给所有消费者使用</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9c043b4fdd614118bf6982d0f20494fa.png" alt="抽取"></p></li><li><p>实现方式二的步骤</p><ul><li><p>首先创建一个<code>model</code>，命名为<code>feign-api(自定义,无要求名称)</code>,然后引入<code>feign</code>的<code>starter</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- <span class="doctag">TODO:</span> 1. 添加 openFeign 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将<code>order-service</code>中编写的<code>UserClient,User,DefaultFeignConfiguraton</code>都复制到<code>feign-api</code>项目中</p><p><img src="https://img-blog.csdnimg.cn/direct/c1bd1f9873f842d29ad6778526a7fc40.png" alt=""></p></li><li><p>在<code>order-service</code>中引入<code>feign-api</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>order-service</code>中的所有与上述组件有关的<code>import</code>部分,改成导入<code>feign-api</code>中的包</p></li><li><p>重启测试</p><p><img src="https://img-blog.csdnimg.cn/direct/78195207143948d3815f8634f1637c4e.png" alt=""></p></li></ul></li><li><p>当定义的<code>FeignClient</code>不在<code>SpringBootApplication</code>的扫描包范围时,这些<code>FeignClient</code>无法使用,两种解决方案</p><ul><li><p>方式一: 指定<code>FeignClient</code>所在包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// order-service: com.coderitl.springcloud 下的主启动类</span></span><br><span class="line"><span class="comment">// feign-api: com.coderitl.feign 不在 orderservice的主启动扫描包之下</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages=&quot;com.coderitl.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>指定<code>FeignClient</code>字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐 =&gt; 用哪个加载那个</span></span><br><span class="line"><span class="meta">@EnableFeignClients(clients=&#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h5><div class="tabs" id="gateway"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#gateway-1">作用介绍</button></li><li class="tab"><button type="button" data-href="#gateway-2">搭建网关</button></li><li class="tab"><button type="button" data-href="#gateway-3">路由断言工厂</button></li><li class="tab"><button type="button" data-href="#gateway-4">路由的过滤器配置</button></li><li class="tab"><button type="button" data-href="#gateway-5">网关的跨域处理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="gateway-1"><ul><li><p>引入</p><p><img src="https://img-blog.csdnimg.cn/0a1c78c3b4a8489284c048e73ec4fd1b.png" alt="网关"></p></li><li><p>网关功能</p><ul><li>身份认证和权限校验</li><li>服务路由、负载均衡</li><li>请求限流</li></ul></li><li><p><code>SpringCloud</code>中网关的实现有两种</p><ul><li><code>gateway</code></li><li><code>zuul</code></li></ul><blockquote><p><code>Zuul</code>是基于<code>Servlet</code>的实现,属于阻塞式编程,而<code>SpringCloudGateway</code>则是基于<code>Spring5</code>中提供的<code>WebFlux</code>，属于响应式编程的实现,具备更好的性能</p></blockquote></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gateway-2"><ul><li><p>创建新的<code>model</code>，引入<code>SpringCloudGateway</code>的依赖和<code>nacos</code>的服务发现依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- <span class="doctag">TODO:</span> 1. 添加网关所需依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos客户端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果没有该依赖,会出错(最新版网关使用) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写路由配置以及<code>nacos</code>地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 编写路由以及 nacos 地址(网关也需要注册到注册中心)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#  nacos 地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-service8088</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span> <span class="comment"># 这个是按照路径匹配 只要一 order 开头就符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri： http://127.0.0.1:8081 路由的目标地址 http 就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配 只要一 user 开头就符合</span></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><img src="https://img-blog.csdnimg.cn/fb6ed5163e0b470891e6807531a48ee7.png" alt="通过网关成功访问服务"></p></li><li><p>流程</p><p><img src="https://img-blog.csdnimg.cn/1885ec41b59c414aaac8ac919a02ee6f.png" alt="业务成功访问经过流程"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gateway-3"><ul><li><p>网关路由可以配置的内容包括</p><ul><li>路由<code>id</code>： 路由唯一标识</li><li><code>uri</code>： 路由目的地,支持<code>lb 和 http</code>两种</li><li><code>predicatest</code>：路由断言,判断请求是否符合要求,符合则转发到路由目的地</li><li><code>filters</code>：路由过滤器,处理请求或响应</li></ul></li><li><p>路由断言工厂</p><blockquote><p>我们在配置文件中写的断言规则只是字符串,这些字符串会被<code>Predicate Factory</code>读取并处理,转变为路由判断的条件</p></blockquote><ul><li><p>例如: <code>Path=/user/**</code>是按照路径匹配,这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的</p></li><li><p>像这样的断言工厂在<code>SpringCloudGateway</code>还有<code>11</code>个</p><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/fb686f5196104711ba6dfce1eb4c88d7.png" alt=""></p></li><li><p>总结</p><ul><li><p><code>PredicateFactory</code>的作用是什么</p><blockquote><p>读取用户定义的断言条件,对请求做出判断</p></blockquote></li><li><p><code>Path=/user/**</code>是什么含义</p><blockquote><p>路径是以<code>/user</code>开头的就认为是符合的</p></blockquote></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gateway-4"><ul><li><p>过滤器</p><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory</a></p><p><code>GatewayFilter</code>是网关中提供的一种过滤器,可以对进入网关的请求和微服务返回的响应做处理</p></blockquote><p><img src="https://img-blog.csdnimg.cn/57414e5c054b454cb85d1f03cfd3aafc.png" alt=""></p></li><li><p>过滤器工厂</p><blockquote><p><code>Spring</code>提供了<code>31</code>种不同的路由过滤器工厂</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/ee3d5573daaf448b9f87be32eb6c6828.png" alt=""></p></li><li><p>局部过滤器配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure></li><li><p>默认配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default-filters:</span> <span class="comment"># 默认过滤器 会对所有的路由请求都生效</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure></li><li><p>全局过滤器</p><blockquote><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应,与<code>GatewayFilter</code>的作用一样<br>区别在于 <code>GatewayFilter</code> 通过配置定义,处理逻辑是固定的,而 <code>GlobalFilter</code>的逻辑需要自己写代码实现<br>定义方式是实现 <code>GlobalFilter</code>接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理当前请求,有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125; 将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange 请求上下文,里面可以获取 Request Response 等信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  chain 用来把请求委托给下一个过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;void&gt;&#125;返回表示当前过滤器业务结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例实现</p><blockquote><p>需求: 定义全局过滤器,拦截请求,判断请求的参数是否满足下面条件</p></blockquote><ul><li><p>参数中是否有<code>authorization</code></p></li><li><p><code>authorization</code>参数值是否为<code>admin</code></p><p>如果同时满足则放行,否则拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载顺序由两种实现: 注解 | 实现接口 Ordered (两者选其一) 一定要有顺序</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取参数中的 authorization 参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 判断参数值是否等于 admin</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 4. 是 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 否 拦截</span></span><br><span class="line">        <span class="comment">// 优化体验:</span></span><br><span class="line">        <span class="comment">// 5.1 设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 5.2 拦截请求</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ordered 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e3b0b1461a3946ddb62f4a51a5b8acc1.gif#pic_center" alt="过滤器"></p></li></ul></li><li><p>过滤器的执行顺序</p><blockquote><p>请求进入网关后会碰到三类过滤器: 当前路由的过滤器,<code>DefaultFilter GlobalFilter</code></p><p>请求路由后,会将当前路由过滤器和<code>DefaultFilter GlobalFilter</code>合并到一个过滤器链(集合)中,排序后依次执行每个过滤器</p></blockquote><p><img src="https://img-blog.csdnimg.cn/0eddffdac2c94df39ea2a427faf5d2b5.png" alt="过滤器的执行顺序"></p><ul><li>执行顺序<ul><li>每一个过滤器都必须指定一个<code>int</code>类型的<code>order</code>值,<code>order</code>值越小,优先级越高,执行顺序越靠前</li><li><code>GlobalFilter</code>通过实现<code>Ordered</code>接口,或者添加<code>@Order</code>注解来指定<code>order</code>值</li><li>路由过滤器和<code>defaultFiltert</code>的<code>order</code>由<code>Spring</code>指定,默认是按照声明顺序从<code>1</code>递增(声明也就是书写出现的顺序)</li><li>当过滤器的<code>order</code>值一样时,会按照<code>defaultFilter &gt; 路由过滤器链  &gt; GlobalFilter的顺序执行</code></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gateway-5"><ul><li><p>跨域问题处理</p><blockquote><p>跨域: 域名不一致就是跨域,主要包括</p></blockquote><ul><li>域名不同: <code>www.taobap.com 和 www.taobao.org 等</code></li><li>域名相同,端口不同: <code>localhost:8080 | localhost:8081</code></li></ul><p>跨域问题: 浏览器禁止请求的发起者与服务端发生跨域<code>ajax</code>请求,请求被浏览器拦截的问题</p></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 编写路由以及 nacos 地址(网关也需要注册到注册中心)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#  nacos 地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-service8088</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span> <span class="comment"># 这个是按照路径匹配 只要一 order 开头就符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由 id,自定义,只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri： http://127.0.0.1:8081 路由的目标地址 http 就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb:LoadBalanced(负载均衡) 后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配 只要一 user 开头就符合</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,coder-itl</span> <span class="string">is</span> <span class="string">Student....</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,coder-itl</span> <span class="string">is</span> <span class="string">Teacher....</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决 options 请求被拦截问题</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许那些网站跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8089&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://baidu.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带 cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期，在有效期内直接放行,减轻服务器压力</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">简介</button></li><li class="tab"><button type="button" data-href="#-2">安装与卸载</button></li><li class="tab"><button type="button" data-href="#-3">自定义Dockerfile</button></li><li class="tab"><button type="button" data-href="#-4">DockerCompose</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li><code>Docker</code>和虚拟机的差异<ul><li><code>docker</code>是一个系统进程,虚拟机是在操作系统中的操作系统</li><li><code>docker</code>体积小,启动速度快,性能好,虚拟机体积大,启动速度慢,性能一般</li></ul></li><li>镜像和容器<ul><li>镜像(<code>Image</code>): <code>Docker</code>将应用程序及器所需的依赖、函数库、环境、配置文件打包在一起,称为镜像</li><li>容器(<code>Container</code>): 镜像中的应用程序运行后形成的进程就是容器,只是<code>Docker</code>会给容器做隔离,对外不可见</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li><p>基于<code>Centos7</code>操作</p></li><li><p>卸载(如果之前安装过旧版本的<code>Docker</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">remove -y docker \</span></span><br><span class="line"><span class="string">docker-client \</span></span><br><span class="line"><span class="string">docker-client-latest \</span></span><br><span class="line"><span class="string">docker-common \</span></span><br><span class="line"><span class="string">docker-latest \</span></span><br><span class="line"><span class="string">docker-latest-logrotate \</span></span><br><span class="line"><span class="string">docker-logrotate \</span></span><br><span class="line"><span class="string">docker-selinux \</span></span><br><span class="line"><span class="string">docker-engine-selinux \</span></span><br><span class="line"><span class="string">docker-engine \</span></span><br><span class="line"><span class="string">docker-ce</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>docker</code></p><ul><li><p>安装<code>yum</code>工具</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install -y yum-utils \</span></span><br><span class="line"><span class="string">device-mapper-persistent-data \</span></span><br><span class="line"><span class="string">lvm2 --skip-broken</span></span><br></pre></td></tr></table></figure></li><li><p>更新本地镜像源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum-config-manager</span> <span class="string">\</span></span><br><span class="line"><span class="string">--add-repo \</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sed</span> <span class="string">-i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yum</span> <span class="string">makecache fast</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>docker</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-ce 为社区免费版</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install -y docker-ce</span></span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld</span></span><br><span class="line"><span class="comment"># 禁止开启启动防火墙</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">disable firewalld</span></span><br></pre></td></tr></table></figure></li><li><p>启动<code>docker</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br></pre></td></tr></table></figure></li><li><p>检查是否启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">status docker</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/56dd618a3c4649538264ceb168cf0c85.png" alt="启动成功"></p></li><li><p><code>docker</code>相关命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 docker 服务</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br><span class="line"><span class="comment"># 停止 docker 服务</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop docker</span></span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker </span></span><br></pre></td></tr></table></figure></li><li><p>配置镜像加速</p><blockquote><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">mkdir -p /etc/docker</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: <span class="string">[&quot;https://eyy45bvx.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">EOF</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl daemon-reload</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl restart docker</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Docker操作</code></p><ul><li><p>基本操作</p><p><img src="https://img-blog.csdnimg.cn/61d5d1cb56a84c96bfc54d1c3b8b9cfb.png" alt="基本操作"></p></li><li><p>利用<code>docker save</code>将<code>nginx</code>镜像导出磁盘,然后再通过<code>load</code>加载回来</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">save -o nginx.tar nginx:latest</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/de564c4465ad4d35b8aafcbb54bd63af.png" alt="实现"></p></li><li><p>删除镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">rmi nginx:latest</span></span><br></pre></td></tr></table></figure></li><li><p>加载镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">load  -i nginx.tar</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/514925a7859148b5b80e172f86634046.png" alt="加载镜像"></p></li></ul></li><li><p>容器相关操作</p><p><img src="https://img-blog.csdnimg.cn/109ce7849280474fb0d2dee8315a1142.png" alt="容器操作"></p><ul><li><p>创建运行一个<code>Nginx</code>容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run --name containerName -p 80:80 -d nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">run: 创建并运行让其</span></span><br><span class="line"><span class="attr">--name</span>: <span class="string">给容器起一个名字</span></span><br><span class="line"><span class="attr">-p</span>: <span class="string">将宿主机端口与容器端口映射,冒号左侧是宿主机端口,右侧是容器端口</span></span><br><span class="line"><span class="attr">-d</span>: <span class="string">后台运行</span></span><br><span class="line"><span class="attr">nginx</span>: <span class="string">镜像名称</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据卷</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">volume [COMMAND]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[COMMAND]</span>:<span class="string"></span></span><br><span class="line"> </span><br><span class="line"> <span class="attr">create</span>: <span class="string">创建一个 volume</span></span><br><span class="line"> <span class="attr">inspect</span>: <span class="string">显示一个或多个 volume 的信息</span></span><br><span class="line"> <span class="attr">ls</span>: <span class="string">列出所有的 volume</span></span><br><span class="line"> <span class="attr">prune</span>: <span class="string">删除未使用的 volume</span></span><br><span class="line"> <span class="attr">rm</span>: <span class="string">删除一个或多个指定的 volume</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d40c1542767540a9b65a101b667a8bba.png" alt="数据卷操作"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ul><li><p>什么是<code>DockerFile</code></p><blockquote><p><code>Dockerfile</code>就是一个文本文件,其中包含一个个的指令,用指令来说明要执行什么操作来构建镜像,每一个指令都会形成一层<code>Layer</code></p></blockquote></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center"><code>FROM</code></td><td style="text-align:center">指定基础镜像</td><td><code>FROM centos:7</code></td></tr><tr><td style="text-align:center"><code>ENV</code></td><td style="text-align:center">设置环境变量，可在后面指令使用</td><td><code>ENV key value</code></td></tr><tr><td style="text-align:center"><code>COPY</code></td><td style="text-align:center">拷贝本地文件到镜像的指定目录</td><td><code>COPY ./mysql-5.7.rpm /tmp</code></td></tr><tr><td style="text-align:center"><code>RUN</code></td><td style="text-align:center">执行<code>Linux</code>的<code>shell</code>命令，一般是安装过程的命令</td><td><code>RUN yum install gcc</code></td></tr><tr><td style="text-align:center"><code>EXPOSE</code></td><td style="text-align:center">指定容器运行时监听的端口,是给镜像使用者看的</td><td><code>EXPOSE 8080</code></td></tr><tr><td style="text-align:center"><code>ENTRYPOINT</code></td><td style="text-align:center">镜像中应用的启动命令,容器运行时调用</td><td><code>ENTRYPOINT java -jar xx.jar</code></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><ul><li><p><code>DockerCompose</code>是什么</p><blockquote><p><code>DockerCompose</code>可以基于<code>Componse</code>文件帮助我们快速的部署分布式应用,而无需手动一个个创建和运行容器</p><p><code>Compose</code>文件是一个文本文件,通过指令定义集群中的每个容器如何运行</p></blockquote></li><li><p>下载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (github)下载 更换其他版本只需要更换  v2.2.2</span></span><br><span class="line"> <span class="attr">sudo</span> <span class="string">curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 高速安装</span></span><br><span class="line"><span class="attr">curl</span> <span class="string">-L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"> <span class="attr">sudo</span> <span class="string">chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 检测是否安装</span></span><br><span class="line"> <span class="attr">docker-compose</span> <span class="string">--version</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> # 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p><code>Base</code>自动补全命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">curl</span> <span class="string">-L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/comption/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>出错</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h5><ul><li><p>详细使用</p><div class="tabs" id="mq"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mq-1">初始</button></li><li class="tab"><button type="button" data-href="#mq-2">入门</button></li><li class="tab"><button type="button" data-href="#mq-3">AMQP</button></li><li class="tab"><button type="button" data-href="#mq-4">WorkQueue</button></li><li class="tab"><button type="button" data-href="#mq-5">FanoutExchange</button></li><li class="tab"><button type="button" data-href="#mq-6">DirectExchange</button></li><li class="tab"><button type="button" data-href="#mq-7">TopicExchange</button></li><li class="tab"><button type="button" data-href="#mq-8">消息转换器</button></li><li class="tab"><button type="button" data-href="#mq-9">消息可靠性</button></li><li class="tab"><button type="button" data-href="#mq-10">死信交换机</button></li><li class="tab"><button type="button" data-href="#mq-11">惰性队列</button></li><li class="tab"><button type="button" data-href="#mq-12">集群</button></li><li class="tab"><button type="button" data-href="#mq-13">扩容</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mq-1"><ul><li><p>同步调用存在的问题</p><ul><li>耦合度高</li><li>性能下降</li><li>资源浪费</li><li>级联失败</li></ul></li><li><p>异步调用</p><blockquote><p>异步调用常见实现就是<code>事件驱动</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/dc94d1c0630548678883388cda26637e.png" alt="事件代理Broker"></p><ul><li>异步通信的优点<ul><li>耦合度低</li><li>吞吐量提升</li><li>故障隔离</li><li>流量削峰</li></ul></li><li>异步通信的缺点<ul><li>依赖于<code>Broker</code>的可靠性,安全性、吞吐能力</li><li>架构复杂了,业务没有明显的流程线,不好追踪管理</li></ul></li></ul></li><li><p>什么是<code>MQ</code></p><blockquote><p><code>MQ（MessageQueue）</code>，是在消息的传输过程中保存消息的容器。多用于分布式系统之间进 行通信。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/direct/98fe6bfbed6349b980462060379f80a3.png" alt=""></p></li><li><p>使用条件</p><ul><li><p>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明 明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。 </p></li><li><p>容许短暂的不一致性。 </p></li><li><p>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-2"><ul><li><p>安装拉取</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取 rabbitmq:3-management[tag]</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">rabbitmq:3-management</span></span><br></pre></td></tr></table></figure><ul><li><p>搜索<code>rabbitmq</code></p><p><img src="https://img-blog.csdnimg.cn/4f7c2da8b20f41f683585343d609bd5a.png" alt="搜索rabbitmq"></p></li><li><p>选择带有<code>management，management</code>的带有<code>web</code>管理页面</p><p><img src="https://img-blog.csdnimg.cn/be2892eb8d7e4c97a43c8f31ec98793d.png" alt="选择带有manager"></p></li></ul></li><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_USER=root \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_PASS=root \</span></span><br><span class="line"><span class="string">--name mq \</span></span><br><span class="line"><span class="string">--hostname mq1 \</span></span><br><span class="line"><span class="string">-p 15672:15672 \</span></span><br><span class="line"><span class="string">-p 5672:5672 \</span></span><br><span class="line"><span class="string">-d \</span></span><br><span class="line"><span class="string">rabbitmq:3-management</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line"><span class="attr">-p</span> <span class="string">15672:15672 Web界面</span></span><br><span class="line"><span class="attr">-p</span> <span class="string">5672:5672  消息通信</span></span><br></pre></td></tr></table></figure><ul><li><p>通过端口访问</p><p><img src="https://img-blog.csdnimg.cn/d4e662e084c14109bf906eacc6910afb.png" alt="通过端口访问"></p></li><li><p>概念</p><ul><li><code>channel</code>：操作<code>MQ</code>的工具</li><li><code>exchange</code>:路由消息到队列中</li><li><code>queue</code>： 缓存消息</li><li><code>virtual host</code>: 虚拟主机,是对<code>queue,exchange</code>等资源的逻辑分组</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-3"><ul><li><p><code>AMQP</code></p><blockquote><p><code>Advanced Message Queving Protocol</code>是用于再应用程序或之间传递业务消息的开放标准,该协议与语言和平台无关,更符合微服务中独立性的要求</p></blockquote></li><li><p><code>Spring AMQP</code></p><blockquote><p><code>Spring AMQP</code>是基于<code>AMQP</code>协议定义的一套<code>API</code>规范,提供了模块来发送和接受消息,包含两部分,其中<code>spring-amqp</code>是基础抽象,<code>spring-rabbit</code>是底层的默认实现</p></blockquote><ul><li>特征<ul><li>侦听器容器,用于异步处理入站消息</li><li>用于发送和接受消息的<code>RabbitTemplate</code></li><li><code>RabbitAdmin</code>用于自动声明队列,交换和绑定</li></ul></li></ul></li><li><p>添加用户</p><p><img src="https://img-blog.csdnimg.cn/56d73dac884241b6bc7da2452df8a999.png" alt="添加用户"></p></li><li><p>添加虚拟环境</p><p><img src="https://img-blog.csdnimg.cn/37ccbe287b5744c2b66e79f9a7772a0e.png" alt="添加虚拟环境"></p></li><li><p>创建一个队列,名称为<code>simple.queue(*)</code></p><ul><li><p>创建一个队列,名称为<code>simple.queue(*)</code></p><p><img src="https://img-blog.csdnimg.cn/a700bf34f1e2498e8d339d2d59f8ed26.png" alt="创建一个队列"></p></li></ul></li><li><p>删除一个队列</p><p><img src="https://img-blog.csdnimg.cn/469d27ca314b45658a437d3f6ec68d0b.png" alt="删除一个队列"></p></li><li><p>测试</p><ul><li><p>创建聚合工程(<code>父工程: SpringBoot 项目</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建两个模块</p><ul><li><p><code>publisher 发布消息</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.247</span><span class="number">.130</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><ul><li><p>创建测试(<code>启动类依然需要创建,由于使用到Configuration</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个simple.queue 必须已存在才可用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>队列不存在时出现声明错误</p><p><img src="https://img-blog.csdnimg.cn/7e509e1e71ec4b0aa9b7f9bac23367d1.png" alt=""></p></li><li><p>显示查看</p><p><img src="https://img-blog.csdnimg.cn/19d7cd040fab4190977c8453f34194e8.png" alt=""></p></li></ul></li><li><p>查看发送的<code>message</code></p><p><img src="https://img-blog.csdnimg.cn/75ec7bc574e8456a8e68e3a755f86beb.png" alt="查看发送的message"></p></li></ul></li><li><p><code>consumer</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和 publish 配置一样 都需要知道 MQ 信息</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是一个类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="comment">// 方法参数就是消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者收到的消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动主启动类即可查阅到消息信息</span></span><br><span class="line"><span class="comment">// 消息一旦被消费就会从队列删除,RabbitMQ没有消息回溯功能</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/14b51d4370d14c41a004214f023d91d9.png" alt="查阅"></p></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-4"><ul><li><p><code>consumer</code>的<code>yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.247</span><span class="number">.129</span> <span class="comment"># MQ 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 消费预取限制(在work queue处理过程中,会发现处理能力高的消费者在等待消费慢的,所以通过如下配置实现能者多劳)</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 设置 prefetch 这个值,可以控制预取消息的上限 1:每次只能获取一条,处理完才能获取下一个消息</span></span><br></pre></td></tr></table></figure></li><li><p><code>Work Queue</code></p><blockquote><p><code>Work Queue</code>工作队列,可以提高消息处理速度,避免队列消息堆积</p></blockquote><p><img src="https://img-blog.csdnimg.cn/180f020025be41619cbf90596ae1686d.png" alt="Work Queue"></p></li><li><p>模拟<code>Work Queue</code>实现一个队列绑定多个消费者</p><ul><li><p>基本思路</p><ul><li><p>在<code>publisher</code>服务中定义测试方法,每秒产生<code>50</code>条消息,发送到<code>simple.queue</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>consumer</code>服务中定义两个消息监听者,都监听<code>simple.queue</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;spring 消费者1收到的消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;spring 消费者2收到的消息是.......... :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者<code>1</code>每秒处理<code>50</code>条消息,消费者<code>2</code>每秒处理<code>10</code>条消息</p><p><img src="https://img-blog.csdnimg.cn/a2f0cb94d193405493efb7b9dd7626a0.png" alt="处理结果"></p></li></ul></li></ul></li><li><p>总结</p><ul><li><code>work</code>模型的使用<ul><li>多个消费者绑定到同一个队列中,同一条消息只会被一个消费者处理</li><li>通过设置<code>prefetch</code>来控制消费者预取的消息数量</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-5"><ul><li><p>发布订阅</p><blockquote><p>发布订阅模式之间与之前案例的区别就是允许将同一消息发送给多个消费者,实现方式就是加入了<code>exchange（交换机）</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/243d6eb4484a46f9a622c6e5d1dc3cdf.png" alt="模型"></p><ul><li><p><code>FanoutExchange</code></p><ul><li><p>利用<code>SpringAMQP</code>演示<code>FanoutExchange</code>的使用</p><p><img src="https://img-blog.csdnimg.cn/e83f5befd73d46479205d3dd8c7164f4.png" alt="交换机的使用"></p><ul><li><p>实现思路</p><ol><li><p>在<code>consumer</code>服务中,利用代码声明队列,交换机,并将两者绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 consumer 服务创建一个类,添加 @Configuration 注解,并声明 FanoutExchange、Queue和绑定关系对象 Binding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 声明 FanoutExchange 交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;coderitl.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明第一个队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 声明第二个队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定队列 1 和交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定队列 2 和交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>consumer</code>服务中,编写两个消费者,分别监听<code>fanout.queue1 和 fanout.queue2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;spring 消费者收到fanout.queue1消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;spring 消费者收到fanout.queue2消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>publisher</code>中编写测试方法,向<code>coderitl.fanout</code>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;coderitl.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello every one！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>SpringAMQP</code>提供了声明交换机、队列、绑定关系的<code>API</code></p><p><img src="https://img-blog.csdnimg.cn/2cbba06cd8f04b559df6d6551a443564.png" alt="绑定关系"></p></li><li><p>总结</p><ul><li>交换机的作用是什么<ol><li>接受<code>publisher</code>发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息,路由失败,消息丢失</li><li><code>FanoutExchange</code>会将消息路由到每个绑定的队列</li></ol></li><li>声明队列、交换机、绑定关系的<code>Bean</code>是什么<ul><li><code>Queue</code></li><li><code>FanoutExchange</code></li><li><code>Binding</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-6"><ul><li><p>模型</p><ul><li><code>Direct Exchange</code>会将接收到的消息根据规则路由到指定的<code>Queue</code>，因此称为路由模式(<code>routes</code>)</li><li>发布者发送消息时,指定消息的<code>RoutingKey</code></li><li><code>Exchange</code>将消息路由到<code>BindingKey</code>与消息<code>RoutingKey</code></li><li><code>Exchange</code>将消息路由到<code>BindingKey</code>与消息<code>RoutingKey</code>一致的队列</li></ul><p><img src="https://img-blog.csdnimg.cn/48d231d16f34469cbf6091395402faaa.png" alt="模型"></p></li><li><p>利用<code>SpringAMQP</code>演示<code>DireExchange</code>的使用</p><ul><li><p>实现思路</p><ul><li><p>利用<code>@RabbitListener</code>声明<code>Exchange,Queue,RoutingKey</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.consumer.listen;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListerner</span> &#123;</span><br><span class="line">    <span class="comment">// 消费者</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;coderitl.direct&quot;,type= ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者收到direct.queue1消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 消费者</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;coderitl.direct&quot;,type= ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;yellow&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者收到direct.queue2消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>publisher</code>中编写测试方法,向<code>coderitl.direct</code>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;coderitl.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello blue！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;blue&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查阅,如果结果未出现,清理缓存,重新构建，再次运行</p><p><img src="https://img-blog.csdnimg.cn/fd6e78f76d7d491197b5afc7e2f4abd3.png" alt="查阅"></p></li></ul></li></ul></li></ul></li><li><p>总结</p><ul><li>描述<code>Direct</code>交换机与<code>Fanout</code>交换机的差异<ul><li><code>Fanout</code>交换机将消息路由给每一个与之绑定的队列</li><li><code>Direct</code>交换机根据<code>RoutingKey</code>判断路由给那个队列</li><li>如果多个队列具有相同的<code>RoutingKey</code>,则与<code>Fanout</code>功能类似</li></ul></li><li>基于<code>@RabbitListener</code>注解声明队列和交换机有那些常见注解<ul><li><code>@Queue</code></li><li><code>@Exchange</code></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-7"><ul><li><p><code>Queue</code>与<code>Exchange</code>指定<code>BindingKey</code>时可以使用通配符</p><ul><li><code>#</code>: 代指<code>0</code>个或分多个单词</li><li><code>*</code>:代指一个单词</li></ul></li><li><p>模型</p><p><img src="https://img-blog.csdnimg.cn/direct/e6a37424bb10445888443c605b12c196.png" alt=""></p></li><li><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;coderitl.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;spring 消费者收到topic.queue1消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;coderitl.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;spring 消费者收到topic.queue2消息是 :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 交换机名称 coderitl.topic</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;coderitl.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello coderitl topic！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;china.news&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/22f70712c1b24da0ab860639d3dd899d.png" alt="测试"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-8"><ul><li><p>消息转换器</p><blockquote><p><code>Spring</code>对消息对象的处理方式是由<code>org.springframework.amqp.support.converter.MessageConverter</code>来处理的,而默认实现是<code>SimpleMessageConverter</code>，基于<code>JDK</code>的<code>ObjectOutputStream</code>完成序列化</p></blockquote></li><li><p>修改<code>MessageConverter</code>,推荐<code>JSON</code>方式序列化</p><ul><li><p>实现步骤</p><ul><li><p>在<code>publisher</code>服务引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果引入了 web 的依赖则不需要引入下方依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>publisher</code>服务声明<code>MessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendObjectMessage</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    Map&lt;String, Object&gt; message = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    message.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;coder-itl&quot;</span>);</span><br><span class="line">    message.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend( <span class="string">&quot;object.queue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接受</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">objectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要配置 转换类型 </span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String, Object&gt; msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;msg = &quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ec539574578448d1b1cc445ec791a33f.png" alt="JSON序列化"></p></li></ul></li></ul></li><li><p><code>SpringAMQP</code>中消息的序列化和反序列化是怎么实现的?</p><ul><li>利用<code>MessageConvert</code>实现的,默认是<code>JDK</code>的序列化</li><li>注意发送方与接收方必须使用相同的<code>MessageConvert</code></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-9"><ul><li><p>消息可靠性</p><ul><li>消息从生产者发送到<code>exchange</code>，再到<code>queue</code>，再到消费者,有哪些导致消息丢失的可能性?<ul><li>发送时丢失<ul><li>生产者发送的消息未送达<code>exchange</code></li><li>消息到达<code>exchange</code>后未到达<code>queue</code></li></ul></li><li><code>MQ</code>宕机,<code>queue</code>将消息丢失</li><li><code>consumer</code>接收到消息后未消费就宕机</li></ul></li></ul></li><li><p>生产者确认机制</p><blockquote><p>RabbitMQ 提供了<code>publisher confirm</code>机制来避免发送到<code>MQ</code>过程中丢失。消息发送到<code>MQ</code>以后,会返回一个结果给发送者,表示消息是否处理成功。结果有两种请求</p></blockquote><ul><li><p><code>publisher-confirm</code>，发送者确认</p><ul><li>消息成功投递到交换机,返回<code>ack</code></li><li>消息未投递到交换机,返回<code>nack</code></li></ul></li><li><p><code>publisher-return</code>，发送者回执</p><ul><li>消息投递到交换机了,但是没有路由到队列。返回<code>ACK</code>，以及路由失败原因</li></ul><p><img src="https://img-blog.csdnimg.cn/537cf430cb0e457890667ede2a560051.png" alt="生产者确认机制"></p><blockquote><p><strong>注意：</strong>确认机制发送消息时,需要给每个消息设置一个全局唯一<code>id</code>，以区分不同消息,避免<code>ack</code>冲突</p></blockquote></li></ul></li><li><p><code>SpringAMQP</code>消息可靠性的具体实现步骤</p><ol><li><p>在<code>生产者</code>这个微服务的<code>application.yml</code>中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生产者端</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/amqp</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>配置说明<ul><li><code>publisher-confirm-type</code>: 开启<code>publisher-confirm</code>，这里支持两种类型<ul><li><code>simple</code>: 同步等待<code>confirm</code>结果,指导超时</li><li><code>correlated【英 [ˈkɒrəleɪtɪd] 】</code>： 异步回调,定义<code>ConfirmCallback</code>，<code>MQ</code>返回结果时会回调这个<code>ConfirmCallback</code></li></ul></li><li><code>publisher-returns</code>: 开启<code>publisher-return</code>功能,同样是基于<code>callback</code>机制,不过定义<code>ReturnCallback</code></li><li><code>template.mandatory【英 [ˈmændətəri] 】</code>: 定义消息路由失败时的策略。<code>true</code>，则调用<code>ReturnCallback</code>,<code>false</code>: 则直接丢弃消息</li></ul></li></ul></li><li><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>,因此需要在项目启动过程中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者处</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 获取 RabbitTemplate</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置 ReturnCallback? ReturnsCallback</span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送失败,应答码: &#123;&#125;,原因:&#123;&#125;,交换机:&#123;&#125;,路由键:&#123;&#125;,消息:&#123;&#125;&quot;</span>, replyCode, replyText, exchange, routingKey, message.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于上述</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 获取 RabbitTemplate</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置 ReturnCallback(旧)? ReturnsCallback(新)</span></span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Overripackage</span> com.example.publisher.config;</span><br><span class="line"><span class="comment">// 等同于上述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 获取 RabbitTemplate</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置 ReturnCallback(旧)? ReturnsCallback(新)</span></span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * public class ReturnedMessage &#123;</span></span><br><span class="line"><span class="comment">                 *     private final Message message;</span></span><br><span class="line"><span class="comment">                 *     private final int replyCode;</span></span><br><span class="line"><span class="comment">                 *     private final String replyText;</span></span><br><span class="line"><span class="comment">                 *     private final String exchange;</span></span><br><span class="line"><span class="comment">                 *     private final String routingKey;</span></span><br><span class="line"><span class="comment">                 *     &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 判断是否是延迟消息</span></span><br><span class="line">                <span class="keyword">if</span> (returnedMessage.getMessage().getMessageProperties().getReceivedDelay() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 是一个延迟消息,忽略这个错误提示</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 记录日志</span></span><br><span class="line">                log.info(<span class="string">&quot;消息发送失败,应答码: &#123;&#125;,原因:&#123;&#125;,交换机:&#123;&#125;,路由键:&#123;&#125;,消息:&#123;&#125;&quot;</span>, returnedMessage.getReplyCode(), returnedMessage.getReplyText(), returnedMessage.getExchange(), returnedMessage.getRoutingKey(), returnedMessage.getMessage().toString());</span><br><span class="line">                <span class="comment">// 如果有需要,可以重发消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;de</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * public class ReturnedMessage &#123;</span></span><br><span class="line"><span class="comment">                 *     private final Message message;</span></span><br><span class="line"><span class="comment">                 *     private final int replyCode;</span></span><br><span class="line"><span class="comment">                 *     private final String replyText;</span></span><br><span class="line"><span class="comment">                 *     private final String exchange;</span></span><br><span class="line"><span class="comment">                 *     private final String routingKey;</span></span><br><span class="line"><span class="comment">                 *     &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                log.info(<span class="string">&quot;消息发送失败,应答码: &#123;&#125;,原因:&#123;&#125;,交换机:&#123;&#125;,路由键:&#123;&#125;,消息:&#123;&#125;&quot;</span>, returnedMessage.getReplyCode(), returnedMessage.getReplyText(), returnedMessage.getExchange(), returnedMessage.getRoutingKey(), returnedMessage.getMessage().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送消息,指定消息<code>ID</code>，消息<code>ConfirmCallback</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 消息体</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息 id,需要封装到 CorrelationData 中</span></span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">        <span class="comment">// 添加 callback</span></span><br><span class="line">        correlationData.getFuture().addCallback(result -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.isAck()) &#123;</span><br><span class="line">                <span class="comment">// ack 消息成功</span></span><br><span class="line">                log.debug(<span class="string">&quot;消息发送成功,ID:&#123;&#125;&quot;</span>, correlationData.getId());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// nack 消息失败</span></span><br><span class="line">                log.error(<span class="string">&quot;消息发送失败,ID:&#123;&#125;,原因:&#123;&#125;&quot;</span>, correlationData.getId(), result.getReason());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, ex -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息发送异常,ID:&#123;&#125;,原因:&#123;&#125;&quot;</span>, correlationData.getId(), ex.getMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;amq.direct&quot;</span>, <span class="string">&quot;simple&quot;</span>, message, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>消息持久化</p><blockquote><p><code>MQ</code>默认是内存存储消息,开启持久化功能可以确保缓存在<code>MQ</code>中的消息不丢失</p></blockquote><ol><li><p>交换机持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 交换机的持久化: 消费者配置中声明</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * name: 交换机名称</span></span><br><span class="line"><span class="comment">         * durable: 是否持久化,true: 开启持久化</span></span><br><span class="line"><span class="comment">         * autoDelete: false 是否自动删除,一般是 false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>队列持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列的持久化: 消费者配置中声明</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 QueueBuilder构建队列,durable 就是持久化的</span></span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;direct.queue&quot;</span>).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息持久化,<code>SpringAMQP</code>中的消息默认是持久化的,可以通过<code>MessageProperties</code>中的<code>DeliverMode</code>来指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;数据内容....&quot;</span>;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> MessageBuilder.withBody(message.getBytes(StandardCharsets.UTF_8)) <span class="comment">// 消息体</span></span><br><span class="line">        .setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">// 持久化</span></span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>消费者消息确认</p><blockquote><p><code>RabbitMQ</code>支持消费者确认机制,即: 消费者处理消息后可以向<code>MQ</code>发送<code>ack</code>回执,<code>MQ</code>收到<code>ack</code>回执后才会删除该消息,而<code>SpringAMQP</code>则允许配置三种确认模式</p></blockquote><ol><li><code>manual</code>: 手动<code>ack</code>，需要在业务代码结束后,调用<code>api</code>发送<code>ack</code></li><li><code>auto</code>: 自动<code>ack</code>,由<code>spring</code>监测<code>listener</code>代码是否出现异常,没有异常则返回<code>ack</code>,抛出异常则返回<code>nack</code></li><li><code>none</code>: 关闭<code>ack</code>,<code>MQ</code>假定消费者获取消息后会成功处理,因此消息投递后<code>立即被删除</code></li></ol><ul><li><p>实现步骤</p><ol><li><p>修改消费者的配置文件,添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/amqp</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> </span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure></li><li><p>失败重试机制</p><blockquote><p>当消费者出现异常后,消息会不断的<code>requeue【重新入队】</code>到队列,在重新发送给消费者,然后再次异常,再次<code>requeue</code>,无限循环，导致<code>MQ</code>的消息处理飙升,带来不必要的压力</p><p>我们可以利用<code>Spring</code>的<code>retry</code>机制,在消费者出现异常时利用本地重试,而不是无限制的<code>requeue</code>到<code>mq</code>队列</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 消费者端</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/amqp</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">1000</span> <span class="comment"># 初始的失败等待时长为 1s</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数,下次等待时长= multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># <span class="doctag">TODO:</span> true: 无状态,false: 有状态,如果业务中包含事务,这里改为 false</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8ebdee056942466b9aad21f88a226862.png" alt=""></p></li></ol></li></ul></li><li><p>消费者失败消息处理策略</p><blockquote><p>在开启重试模式后,重试次数耗尽,如果消息依然失败,则需要有<code>messageRecoverer</code>接口处理，它包含三种不同的实现</p></blockquote><ul><li><p><code>RejectAndDontRequeueRecoverer</code>: 重试耗尽后,直接<code>reject</code>,丢弃消息。默认就是这种方式</p></li><li><p><code>immediateRequeueMessageRecoverer</code>: 重试耗尽后,返回<code>nack</code>,消息重新入队</p></li><li><p><code>RepublishMessageRecoverer【推荐】</code>: 重试耗尽后,将失败的消息投递到指定的交换机</p><p><img src="https://img-blog.csdnimg.cn/f58f42f41ba54daaabe72c9571931e6e.png" alt=""></p><ul><li><p>实现</p><ol><li><p>首先，定义接受失败消息的交换机、队列以及绑定关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者处</span></span><br><span class="line"><span class="keyword">package</span> com.example.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**************************** 成功的交换机与队列以及绑定关系 *************************/</span></span><br><span class="line">    <span class="comment">// 交换机的持久化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * name: 交换机名称</span></span><br><span class="line"><span class="comment">         * durable: 是否持久化,true: 开启持久化</span></span><br><span class="line"><span class="comment">         * autoDelete: false 是否自动删除,一般是 false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 队列的持久化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 QueueBuilder构建队列,durable 就是持久化的</span></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;direct.queue&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueToExchange</span><span class="params">(Queue directQueue, DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue).to(directExchange).with(<span class="string">&quot;simple.test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******************** 失败的交换机与队列以及绑定关 ******************************/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * name: 交换机名称</span></span><br><span class="line"><span class="comment">         * durable: 是否持久化,true: 开启持久化</span></span><br><span class="line"><span class="comment">         * autoDelete: false 是否自动删除,一般是 false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorDirectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 QueueBuilder构建队列,durable 就是持久化的</span></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;error.direct.queue&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueToExchangeError</span><span class="params">(Queue errorDirectQueue, DirectExchange errorDirectExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorDirectQueue).to(errorDirectExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义<code>RepublishMessageRecoverer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">messageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * rabbitTemplate: 使用 rabbitTemplate 重发</span></span><br><span class="line"><span class="comment">         * errorExchange: 发送的交换机</span></span><br><span class="line"><span class="comment">         * errorRoutingKey: 以键发送</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate,<span class="string">&quot;error.direct.exchange&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0fff593fdf3744caa4546288265cddfe.png" alt=""></p></li></ol></li></ul></li></ul></li><li><p>总结</p><blockquote><p>如可确保<code>RabbitMQ</code>消息的可靠性？</p></blockquote><ul><li>开启生产者确认机制,确保生产者的消息能到达队列</li><li>开启持久化功能,确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为<code>auto</code>，由<code>spring</code>确认消息处理成功后完成<code>ack</code></li><li>开启消费者失败重试机制,并设置<code>MeessageRecoverer</code>,多次重试失败后将消息投递到异常交换机,交由人工处理</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-10"><ul><li><p>初始死信交换机</p><blockquote><p>当一个队列中的消息满足下列情况之一时,可以称之为<code>死信【dead letter】</code></p></blockquote><ol><li>消费者使用<code>basic.reject</code>或<code>basic.nack</code>声明消费失败,并且消息的<code>requeue</code>参数设置为<code>false</code></li><li>消息是一个过期消息,超时无人消费</li><li>要投递的队列消息堆积满了,最早的消息可能成为死信</li></ol><blockquote><p>如果该队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机,那么队列中的死信就会投递到这个交换机中,而这个交换机称为<code>死信交换机【Dead Letter Exchange简称 DLX】</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/83b865c503444a83860584c4b6590ccf.png" alt="死信模型"></p></li><li><p><code>TTL</code></p><blockquote><p><code>TTL</code>，也就是<code>Time-To-Live</code>，如果一个队列中的消息<code>TTL</code>结束仍未消费,则会变为死信,<code>TTL</code>超时分为两种情况</p></blockquote><ul><li><p>消息所在的队列设置了存活时间</p></li><li><p>消息本身设置了存活时间</p><p><img src="https://img-blog.csdnimg.cn/2ce0ff4a72ee49e4bdf53867fe3fad2b.png" alt=""></p></li><li><p>实现</p><p><img src="https://img-blog.csdnimg.cn/bfbc95aff1d449f3b17bc1ee66b710a4.png" alt="正常队列绑定死信交换机以及死信队列实现"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟消息 基于注解方式</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;dl.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;dl.direct&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;dl&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDlQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到 dl.queue的延迟消息: &#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b60b354922ea4972a7723acc94e06cca.png" alt="蓝色框部分实现"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line">    <span class="comment">/************************** 死信 *********************************/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">ttlExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;ttl.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;ttl.queue&quot;</span>) <span class="comment">// 指定队列名称并持久化</span></span><br><span class="line">                .ttl(<span class="number">10000</span>) <span class="comment">// 设置队列的超时时间为 10s</span></span><br><span class="line">                .deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>) <span class="comment">// 指定死信交换机</span></span><br><span class="line">                .deadLetterRoutingKey(<span class="string">&quot;dl&quot;</span>) <span class="comment">// 指定死信 RoutingKey</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">simpleBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>发送消息时,给消息本身设置超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">ttl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;ttl 5s or 10s...................!&quot;</span>;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">build</span> <span class="operator">=</span> MessageBuilder.withBody(message.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">        .setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">// 持久化</span></span><br><span class="line">        <span class="comment">// 消息设置过期时间 TTL=5000ms=5s【最终 5s】 &lt; 队列设置的 TTL=10000ms=10s</span></span><br><span class="line">        .setExpiration(<span class="string">&quot;5000&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>, <span class="string">&quot;ttl&quot;</span>, build);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息发送完毕....................&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果消息和队列同时设置了<code>超时时间</code>,则以两者中最小的为准</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5689c314648a46889793ad45a95ccefd.png" alt="超时时间"></p></li><li><p>延迟队列</p><blockquote><p>利用<code>TTL</code>结合死信交换机,我们实现了消息发出后,消费者延迟收到消息的效果。这种消息模式就称为<code>延迟队列【Delay Queue】</code>模式</p></blockquote><ul><li><p>重新安装<code>rabbitmq</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_USER=root \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_PASS=root \</span></span><br><span class="line"><span class="string">-v mq-plugins:/plugins \</span></span><br><span class="line"><span class="string">--name mq \</span></span><br><span class="line"><span class="string">--hostname mq1 \</span></span><br><span class="line"><span class="string">-p 15672:15672 \</span></span><br><span class="line"><span class="string">-p 5672:5672 \</span></span><br><span class="line"><span class="string">-d \</span></span><br><span class="line"><span class="string">rabbitmq:3-management</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/214e27e5a1b8449eb8df2a09ea093440.png" alt="当前版本信息"></p></li><li><p>容器内部执行虚拟主机添加命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟机</span></span><br><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">add_vhost /amqp</span></span><br><span class="line"><span class="comment"># 添加用户 root 密码 root</span></span><br><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">add_user root root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分配角色</span></span><br><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_user_tags root administrator</span></span><br><span class="line"><span class="comment"># 设置虚拟主机 /amqp 的权限: </span></span><br><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_permissions -p /amqp root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>延迟队列的使用场景</p><ul><li>延迟发送短信</li><li>用户下单,如果用户在<code>15</code>分钟内未支付,则自动取消</li><li>预约工作会议,<code>20</code>分钟后自动通知所有参会人员</li></ul></li><li><p>延迟队列插件安装</p><ul><li><p>官方的安装指南地址为：<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq，上述文档是基于`linux`原生安装`RabbitMQ`，然后安装插件">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq，上述文档是基于`linux`原生安装`RabbitMQ`，然后安装插件</a></p></li><li><p>基于<code>Docker</code></p><ul><li><p><code>RabbitMQ</code>有一个官方的插件社区，地址为：</p><blockquote><p> <a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p></blockquote></li><li><p><code>github</code>下载:</p><blockquote><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.9.0">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.9.0</a>,   选择后缀为<code>ez</code>的文件，</p><p><code>This release has no changes except for its metadata that lists [RabbitMQ 3.9.0](https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.9.0) (and future</code>3.9.x<code>releases) as supported.</code></p></blockquote></li><li><p>上传插件到数据卷插件目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据卷位置</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">volume inspect mq-plugins</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b7d4bb9e6abb4da085361f633ee99ea1.png" alt="上传"></p></li><li><p>安装插件，进入容器内部</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 mq 容器内部</span></span><br><span class="line">  <span class="attr">docker</span> <span class="string">exec -it mq bash</span></span><br><span class="line"><span class="comment">  # 开启插件</span></span><br><span class="line">  <span class="attr">rabbitmq-plugins</span> <span class="string">enable rabbitmq_delayed_message_exchange</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0777821dc5c04a8c8bd81e2362ccf822.png" alt=""></p></li><li><p>页面使用插件</p><blockquote><p><code>DelayExchange</code>插件的原理是对官方原生的<code>Exchange</code>做了功能升级</p></blockquote><ul><li><p>将<code>DelayExchange</code>接收到的消息暂存在内存中(<code>官方的 Exchange</code>是无法存储消息的)</p></li><li><p>在<code>DelayExchange</code>中计时,超时后才投递消息到队列中</p></li><li><p>使用</p><blockquote><p>在<code>RabbitMQ</code>的管理平台创建一个<code>DelayExchange</code></p></blockquote><ul><li><p>创建<code>DelayExchange</code></p><p><img src="https://img-blog.csdnimg.cn/57e387f9571a4dd1bd0be58e99ac51f4.png" alt=""></p></li></ul><blockquote><p>消息的延迟时间需要在发送消息的时候指定</p></blockquote><p><img src="https://img-blog.csdnimg.cn/0528a297e554404b818b6d199f81f942.png" alt=""></p></li></ul></li></ul></li></ul></li><li><p><code>SpringAMQP</code>使用延迟队列插件</p><blockquote><p><code>DelayExchange</code>的本质还是官方的三种交换机,只是添加了延迟队列.因此使用时只需要声明一个交换机,交换机的类型可以是任意的,然后设定<code>delayed</code>属性为<code>true</code>即可</p></blockquote><ul><li><p>基于注解声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者处: 基于注解声明 【推荐使用注解声明延迟队列】</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">    key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayedQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到了 delay.queue 的延迟消息: &#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者处</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayedExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">                .delayed() <span class="comment">// 设置 delay 属性为 true</span></span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayedBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>然后我们向这个<code>delay</code>为<code>true</code>的交换机中发送消息,一定要给消息添加一个<code>header:x-delay</code>值为延迟的时间,单位为<code>ms</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者发送消息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">ttl_plugins</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;ttl plugins...................!&quot;</span>;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">build</span> <span class="operator">=</span> MessageBuilder.withBody(message.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">        .setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="number">1000</span>)</span><br><span class="line">        .setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">// 持久化</span></span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 消息 id,需要封装到 CorrelationData 中</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">// 添加 callback</span></span><br><span class="line">    correlationData.getFuture().addCallback(result -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.isAck()) &#123;</span><br><span class="line">            <span class="comment">// ack 消息成功</span></span><br><span class="line">            log.debug(<span class="string">&quot;消息发送成功,ID: &#123;&#125;&quot;</span>, correlationData.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// nack 消息失败</span></span><br><span class="line">            log.error(<span class="string">&quot;消息发送失败,ID: &#123;&#125;,原因: &#123;&#125;&quot;</span>, correlationData.getId(), result.getReason());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, ex -&gt; &#123;</span><br><span class="line">        log.error(<span class="string">&quot;消息发送异常,ID: &#123;&#125;,原因: &#123;&#125;&quot;</span>, correlationData.getId(), ex.getMessage());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;delay&quot;</span>, build, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">    log.debug(<span class="string">&quot;消息发送完毕....................&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.publisher.config;</span><br><span class="line"><span class="comment">// 等同于上述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 获取 RabbitTemplate</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置 ReturnCallback(旧)? ReturnsCallback(新)</span></span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * public class ReturnedMessage &#123;</span></span><br><span class="line"><span class="comment">                 *     private final Message message;</span></span><br><span class="line"><span class="comment">                 *     private final int replyCode;</span></span><br><span class="line"><span class="comment">                 *     private final String replyText;</span></span><br><span class="line"><span class="comment">                 *     private final String exchange;</span></span><br><span class="line"><span class="comment">                 *     private final String routingKey;</span></span><br><span class="line"><span class="comment">                 *     &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 判断是否是延迟消息</span></span><br><span class="line">                <span class="keyword">if</span> (returnedMessage.getMessage().getMessageProperties().getReceivedDelay() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 是一个延迟消息,忽略这个错误提示</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 记录日志</span></span><br><span class="line">                log.info(<span class="string">&quot;消息发送失败,应答码: &#123;&#125;,原因:&#123;&#125;,交换机:&#123;&#125;,路由键:&#123;&#125;,消息:&#123;&#125;&quot;</span>, returnedMessage.getReplyCode(), returnedMessage.getReplyText(), returnedMessage.getExchange(), returnedMessage.getRoutingKey(), returnedMessage.getMessage().toString());</span><br><span class="line">                <span class="comment">// 如果有需要,可以重发消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-11"><ul><li><p>消息堆积问题</p><blockquote><p>当生产者发送消息的速度超过了消费者处理消息的速度,就会导致队列中的消息堆积,直到队列存储消息达到上限。最早接收到的消息,可能就会成为死信,会被丢弃,这就是<code>消息堆积</code>问题</p></blockquote></li><li><p>解决消息堆积有三种思路</p><ul><li>增加更多的消费者,提高消费速度</li><li>在消费者内开启线程池加快消息处理速度</li><li>扩大队列容积，提高堆积上限</li></ul></li><li><p>惰性队列的特征如下</p><ul><li>接收到消息后<code>直接存入磁盘而非内存</code></li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul></li><li><p>启用惰性队列</p><ul><li><p>设置一个队列为惰性队列，只需要在声明时,指定<code>x-queue-mode</code>属性为<code>lazy</code>即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以将一个运行中的队列设置为惰性队列</span></span><br><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues</span></span><br></pre></td></tr></table></figure></li><li><p>用<code>SpringAMQP</code>声明惰性队列分两种方式</p><ul><li><p>基于<code>@Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐使用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyModeConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">                .lazy() <span class="comment">// 开启 x-queue-mode 为 lazy</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>基于<code>注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">            queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">                    name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">                    durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">                // 声明 lazy</span></span><br><span class="line"><span class="meta">                    arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;接收到 lazy.queue的消息: &#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>优缺点</p><ul><li>优点<ul><li>基于磁盘存储,消息上限高</li><li>没有间歇性的<code>page-out</code>，性能比较稳定</li></ul></li><li>缺点<ul><li>基于磁盘存储,消息时效性会降低</li><li>性能受限于磁盘的<code>IO</code></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-12"><ul><li><p>集群分类</p><ul><li><p>普通集群</p><blockquote><p>是一种分布式集群,将队列分散到集群的各个节点,从而提高整个集群的并发能力</p></blockquote></li><li><p>镜像集群</p><blockquote><p>是一种主从集群,普通集群的基础上,添加了主从备份功能,提高集群的数据可用性</p><p>镜像集群虽然支持主从，但主从同步并不是强一致的,某些情况下可能有数据丢失的风险。因此在<code>RabbitMQ</code>的<code>3.8</code>版本以后,推出了新的功能:<code>仲裁队列</code>来代替镜像集群,底层采用<code>Raft</code>协议确保主从的数据一致性</p></blockquote></li></ul></li><li><p>普通集群</p><blockquote><p>或者叫标准集群(<code>classic cluster</code>),具备下列特征</p></blockquote><ol><li><p>会在集群的各个节点间共享部分数据,包括： 交换机、队列元信息。不包含队列中的消息</p></li><li><p>当访问集群某节点时,如果队列不在该节点,会从数据所在节点传递到当前节点并返回</p></li><li><p>队列所在节点宕机,队列中的消息就会丢失</p><ul><li><p>传递</p><p><img src="https://img-blog.csdnimg.cn/4f6f2a9e7c424a9fbd422d20bec3a224.png" alt=""></p></li><li><p>宕机消息丢失</p><p><img src="https://img-blog.csdnimg.cn/23f3f44070e94e8c8a19ca7e4397bfe4.png" alt=""></p></li></ul><p>|      |      |<br>| :—: | :—: |<br>|      |      |</p><ul><li><p>普通集群部署计划</p><p><img src="https://img-blog.csdnimg.cn/c31b6878c58d4d9f965f02335e87d9ea.png" alt=""></p><blockquote><p>集群中的节点默认都是:<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为</p></blockquote><ul><li><code>rabbit@mq1</code></li><li><code>rabbit@mq2</code></li><li><code>rabbit@mq3</code></li></ul></li><li><p>获取<code>cookie</code></p><blockquote><p><code>RabbitMQ</code>底层依赖于<code>Erlang</code>，而<code>Erlang</code>虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个<code>RabbitMQ</code> 节点使用 <code>cookie</code>来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。<code>cookie</code>只是一串最多<code>255</code>个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p></blockquote></li></ul></li></ol></li></ul><pre><code>   + 我们先在之前启动的`mq`容器中获取一个`cookie`值，作为集群的`cookie`。执行下面的命令     <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rabbitmq:3-management[当前版本]|rabbitmq:3.8-management【可更换的版本】</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it mq cat /var/lib/rabbitmq/.erlang.cookie</span></span><br><span class="line"><span class="comment"># 非固定值</span></span><br><span class="line"><span class="attr">QZCXBOTUGFDXGZHUHZBX</span></span><br></pre></td></tr></table></figure>     + 获取`cookie`       ![](https://img-blog.csdnimg.cn/b6bee0454c6746d8bb02fcd6587bd678.png)   + 接下来，停止并删除当前的`mq`容器，我们重新搭建集群     <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">rm -f mq</span></span><br></pre></td></tr></table></figure>   + 准备集群配置     + 在`/tmp`目录新建一个配置文件 `rabbitmq.conf`       <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">rabbitmq.conf</span></span><br></pre></td></tr></table></figure>       <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入内容如下</span></span><br><span class="line"><span class="attr">loopback_users.guest</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">listeners.tcp.default</span> = <span class="string">5672</span></span><br><span class="line"><span class="attr">cluster_formation.peer_discovery_backend</span> = <span class="string">rabbit_peer_discovery_classic_config</span></span><br><span class="line"><span class="attr">cluster_formation.classic_config.nodes.1</span> = <span class="string">rabbit@mq1</span></span><br><span class="line"><span class="attr">cluster_formation.classic_config.nodes.2</span> = <span class="string">rabbit@mq2</span></span><br><span class="line"><span class="attr">cluster_formation.classic_config.nodes.3</span> = <span class="string">rabbit@mq3</span></span><br></pre></td></tr></table></figure>     + 再创建一个文件，记录`cookie`       <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 写入cookie</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">&quot;QZCXBOTUGFDXGZHUHZBX&quot; &gt; .erlang.cookie</span></span><br><span class="line"><span class="comment"># 修改cookie文件的权限</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">600 .erlang.cookie</span></span><br></pre></td></tr></table></figure>     + 准备三个目录`mq1、mq2、mq3`       <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">mq1 mq2 mq3</span></span><br></pre></td></tr></table></figure>     + 然后拷贝`rabbitmq.conf、cookie`文件到`mq1、mq2、mq3`       <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">rabbitmq.conf mq1</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">rabbitmq.conf mq2</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">rabbitmq.conf mq3</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">.erlang.cookie mq1</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">.erlang.cookie mq2</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">.erlang.cookie mq3</span></span><br></pre></td></tr></table></figure>     + 启动集群       + 创建网络         <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">network create mq-net</span></span><br></pre></td></tr></table></figure>       + `node1`         <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --net mq-net \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_USER=root \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_PASS=root \</span></span><br><span class="line"><span class="string">--name mq1 \</span></span><br><span class="line"><span class="string">--hostname mq1 \</span></span><br><span class="line"><span class="string">-p 8071:5672 \</span></span><br><span class="line"><span class="string">-p 8081:15672 \</span></span><br><span class="line"><span class="string">rabbitmq:3-management</span></span><br><span class="line"><span class="comment"># rabbitmq:3.8-management</span></span><br></pre></td></tr></table></figure>       + `node2`         <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --net mq-net \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_USER=root \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_PASS=root \</span></span><br><span class="line"><span class="string">--name mq2 \</span></span><br><span class="line"><span class="string">--hostname mq2 \</span></span><br><span class="line"><span class="string">-p 8072:5672 \</span></span><br><span class="line"><span class="string">-p 8082:15672 \</span></span><br><span class="line"><span class="string">rabbitmq:3-management</span></span><br><span class="line"><span class="comment"># rabbitmq:3.8-management</span></span><br></pre></td></tr></table></figure>       + `node3`         <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --net mq-net \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span></span><br><span class="line"><span class="string">-v $&#123;PWD&#125;/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_USER=root \</span></span><br><span class="line"><span class="string">-e RABBITMQ_DEFAULT_PASS=root \</span></span><br><span class="line"><span class="string">--name mq3 \</span></span><br><span class="line"><span class="string">--hostname mq3 \</span></span><br><span class="line"><span class="string">-p 8073:5672 \</span></span><br><span class="line"><span class="string">-p 8083:15672 \</span></span><br><span class="line"><span class="string">rabbitmq:3-management</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># rabbitmq:3.8-management</span></span><br></pre></td></tr></table></figure>       + 测试         + 在`mq1`这个节点上添加一个队列           + 其他节点同时查看到             ![](https://img-blog.csdnimg.cn/cb8367a1cfe8444a844313ef1deec7b3.png)     &gt; 在刚刚的案例中，一旦创建队列的`主机宕机`，队列就会不可用。不具备高可用能力。如果要解决这个问题，必须使用官方提供的镜像集群方案。</code></pre><ul><li><p>镜像集群：本质是主从模式,具备以下特征</p><ul><li><p>交换机、队列、队列中的消息会在各个<code>mq</code>的镜像节点之间同步备份</p></li><li><p>创建队列的节点被称为该队列的<code>主节点</code>，备份到的其他节点叫做该队列的镜像节点</p></li><li><p>一个队列的主节点可能是从另一个队列的镜像节点</p></li><li><p>所有操作都是主节点完成，然后同步给镜像节点</p><p><img src="https://img-blog.csdnimg.cn/088f33a10a4646fd9be4bf449dc40a89.png" alt="互相备份【推荐使用】"></p></li><li><p>镜像模式的特征</p></li></ul></li></ul><pre><code>默认情况下，队列只保存在创建该队列的节点上。而镜像模式下，创建队列的节点被称为该队列的**主节点**，队列还会拷贝到集群中的其它节点，也叫做该队列的**镜像**节点。但是，不同队列可以在集群中的任意节点上创建，因此不同队列的主节点可以不同。甚至，**一个队列的主节点可能是另一个队列的镜像节点**。用户发送给队列的一切请求，例如发送消息、消息回执默认都会在主节点完成，如果是从节点接收到请求，也会路由到主节点去完成。**镜像节点仅仅起到备份数据作用**。当主节点接收到消费者的ACK时，所有镜像都会删除节点中的数据。总结如下：- 镜像队列结构是一主多从（从就是镜像）- 所有操作都是主节点完成，然后同步给镜像节点- 主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）- 不具备负载均衡功能，因为所有操作都会有主节点完成（但是不同队列，其主节点可以不同，可以利用这个提高吞吐量）</code></pre><ul><li><p>镜像模式的配置</p><blockquote><p>镜像模式的配置有3种模式</p></blockquote></li></ul><pre><code>| ha-mode           | ha-params         | 效果                                                         || :---------------- | :---------------- | :----------------------------------------------------------- || 准确模式exactly   | 队列的副本量count | 集群中队列副本（主服务器和镜像服务器之和）的数量。count如果为1意味着单个副本：即队列主节点。count值为2表示2个副本：1个队列主和1个队列镜像。换句话说：count = 镜像数量 + 1。如果群集中的节点数少于count，则该队列将镜像到所有节点。如果有集群总数大于count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。 || all【不推荐使用】 | (none)            | 队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络I / O，磁盘I / O和磁盘空间使用情况。推荐使用exactly，设置副本数为（N / 2 +1）。 || nodes             | *node names*      | 指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。 |</code></pre><ul><li><p><code>exactly</code>模式配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_policy ha-two &quot;^two\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是exactly模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是2，就是副本数量为2，1主1镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是manual，即新加入的镜像节点不会同步旧的消息。如果设置为automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul></li><li><p><code>all</code>模式配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_policy ha-all &quot;^all\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;</code>：策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是all模式，即所有节点都会称为镜像节点</li></ul></li></ul></li><li><p><code>nodes</code>模式配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">set_policy ha-nodes &quot;^nodes\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是nodes模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul></li></ul><ul><li><p>配置精确模式<code>exactly</code></p><ul><li><p>是在之前的普通模式上配置的</p></li><li><p>进入<code>mq1【任意启动的】</code>容器内部执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it mq1 rabbitmqctl set_policy ha-two &quot;^two\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>| 添加一个<code>two.test.queue</code>队列                                 |                         出现镜像节点                         |<br>| —————————————————————————————— | :—————————————————————————————: |<br>| <img src="https://img-blog.csdnimg.cn/3a221bb144814162ac4a0921bafb0df4.png" alt=""> | <img src="https://img-blog.csdnimg.cn/a177b937f97141f085485575ccd03b86.png" alt=""> |</p></li></ul></li><li><p>仲裁队列</p><blockquote><p>仲裁队列是<code>3.8</code>版本以后才有的新功能,用来代替镜像队列,具备以下特征</p></blockquote><ul><li><p>与镜像队列一样，都是主从模式,支持主从数据同步</p></li><li><p>使用非常简单,没有复杂的配置</p></li><li><p>主从同步基于<code>Raft</code>协议,强一致</p></li><li><p>搭建</p><ul><li><p>在任意控制台添加一个队列，一定要选择队列类型为<code>Quorum</code>类型。</p><p>|                           添加队列                           |<br>| :—————————————————————————————: |<br>| <img src="https://img-blog.csdnimg.cn/70f275c759974a349ccae71562ff6722.png" alt=""> |</p><blockquote><p>可以看到，仲裁队列的 <code>+ 2</code>字样。代表这个队列有<code>2</code>个镜像节点。</p><p>因为仲裁队列<code>默认的镜像数为5</code>。如果你的集群有<code>7</code>个节点，那么镜像数肯定是<code>5</code>；而我们集群只有<code>3</code>个节点，因此镜像数量就是<code>3</code></p></blockquote><p>|                           仲裁集群                           |<br>| :—————————————————————————————: |<br>| <img src="https://img-blog.csdnimg.cn/a4fb26be6d7341eba280b8ca5314c033.png" alt=""> |</p></li><li><p><code>SpringAMQP</code>创建仲裁队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuorunQueueConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">quorumQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(<span class="string">&quot;quorum.queue&quot;</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .quorum() <span class="comment">// 仲裁队列</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>yaml</code>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span><span class="string">:8071,192.168.2.3:8072,192.168.2.3:8073</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mq-13"><ul><li><p>扩容</p><ul><li><p>启动一个新的MQ容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --net mq-net \</span></span><br><span class="line"><span class="string">    -v $&#123;PWD&#125;/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span></span><br><span class="line"><span class="string">    -e RABBITMQ_DEFAULT_USER=itcast \</span></span><br><span class="line"><span class="string">    -e RABBITMQ_DEFAULT_PASS=123321 \</span></span><br><span class="line"><span class="string">    --name mq4 \</span></span><br><span class="line"><span class="string">    --hostname mq5 \</span></span><br><span class="line"><span class="string">    -p 8074:15672 \</span></span><br><span class="line"><span class="string">    -p 8084:15672 \</span></span><br><span class="line"><span class="string">    rabbitmq:3-management</span></span><br></pre></td></tr></table></figure></li><li><p>进入容器控制台</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it mq4 bash</span></span><br></pre></td></tr></table></figure></li><li><p>停止<code>mq</code>进程</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">stop_app</span></span><br></pre></td></tr></table></figure></li><li><p>重置<code>RabbitMQ</code>中的数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">reset</span></span><br></pre></td></tr></table></figure></li><li><p>加入<code>mq1</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">join_cluster rabbit@mq1</span></span><br></pre></td></tr></table></figure></li><li><p>再次启动<code>mq</code>进程</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmqctl</span> <span class="string">start_app</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>增加仲裁队列副本</p><ul><li><p>我们先查看下<code>quorum.queue</code>这个队列目前的副本情况，进入<code>mq1</code>容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it mq1 bash</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rabbitmq-queues</span> <span class="string">quorum_status &quot;quorum.queue&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>现在，我们让<code>mq4</code>也加入进来</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmq-queues</span> <span class="string">add_member &quot;quorum.queue&quot; &quot;rabbit@mq4&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h5 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h5><ul><li><p>详细使用</p><div class="tabs" id="分布式搜索"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分布式搜索-1">elasticsearch</button></li><li class="tab"><button type="button" data-href="#分布式搜索-2">安装</button></li><li class="tab"><button type="button" data-href="#分布式搜索-3">索引库操作</button></li><li class="tab"><button type="button" data-href="#分布式搜索-4">文档操作</button></li><li class="tab"><button type="button" data-href="#分布式搜索-5">索引库</button></li><li class="tab"><button type="button" data-href="#分布式搜索-6">文档库</button></li><li class="tab"><button type="button" data-href="#分布式搜索-7">分布式搜索</button></li><li class="tab"><button type="button" data-href="#分布式搜索-8">搜索结果处理</button></li><li class="tab"><button type="button" data-href="#分布式搜索-9">RestClient查询文档</button></li><li class="tab"><button type="button" data-href="#分布式搜索-10">案例</button></li><li class="tab"><button type="button" data-href="#分布式搜索-11">聚合</button></li><li class="tab"><button type="button" data-href="#分布式搜索-12">ES集群</button></li><li class="tab"><button type="button" data-href="#分布式搜索-13">故障转移</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分布式搜索-1"><ul><li><p>倒排索引</p><ul><li>文档: 每条数据就是一个文档</li></ul></li><li><p>词条: 文档按照语义分成的词语</p><p>  <img src="https://img-blog.csdnimg.cn/a146dea6c72c42c3aba022665b078c4c.png" alt="词条不能重复" style="zoom:50%;" /></p></li><li><p>搜索过程</p><p><img src="https://img-blog.csdnimg.cn/b6c8ac9b3520461a9a461d85cc2d96a4.png" alt="搜索过程" style="zoom:50%;" /></p></li><li><p><code>ES</code>的一些概念</p></li><li><p>什么是正向索引</p><blockquote><p>基于文档<code>id</code>创建索引,查询词条时必须先找到文档,而后判断是否是包含词条</p></blockquote></li><li><p>什么是倒排索引</p><blockquote><p>对文档内容分词,对词条创建索引,并记录所在文档的信息,查询时现根据词条查询到文档<code>id</code>,而后获取到文档</p></blockquote></li></ul><ul><li><p>索引</p><blockquote><p>相同类型的文档的集合</p><p>索引的映射(<code>mapping</code>):索引章文档的字段约束信息,类似表的结构约束</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6889e790b21e429dba634d1386dd6361.png" alt="索引"></p><ul><li>概念对比</li></ul><p><img src="https://i.imgloc.com/2023/06/23/VI24S8.png" alt=""></p><ul><li>架构</li></ul><blockquote><p><code>MYSQL</code>:擅长事务类型操作,可以确保数据的安全和一致性</p><p><code>Elasticsearch</code>：擅长海量数据的搜索、分析、计算</p></blockquote><p>  <img src="https://img-blog.csdnimg.cn/fdaf822d7d9f49f0bb30e259ee36a742.png" alt="MYSQL与Elasticsearch互补"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-2"><ul><li><p>获取文件</p><ul><li><p>离线安装文件说明</p><ul><li><p>离线安装文件说明<code>ik需要放在数据卷插件目录 _data/ 中</code></p><p>  <img src="https://img-blog.csdnimg.cn/f882198da35e44e4b506def934b69295.png" alt="离线安装文件说明"></p></li></ul></li></ul></li><li><p>安装流程</p><ul><li><p>部署单点<code>ES</code></p><blockquote><p>因为我们还需要部署<code>kibana</code>容器，因此需要让<code>es</code>和<code>kibana</code>容器关联,这里先创建一个网络</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">network create es-net</span></span><br></pre></td></tr></table></figure></li><li><p>如果上传到虚拟机中,之后运行命令加载即可(<code>kibana</code>同样操作)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">load -i es.tar</span></span><br></pre></td></tr></table></figure></li><li><p>拉取镜像</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -v 也可以指定自己的绝对路径</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">    --name es \</span></span><br><span class="line"><span class="string">    -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;  \</span></span><br><span class="line"><span class="string">    -e &quot;discovery.type=single-node&quot; \</span></span><br><span class="line"><span class="string">    -v es-data:/usr/share/elasticsearch/data \</span></span><br><span class="line"><span class="string">    -v es-plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line"><span class="string">    --privileged=true \</span></span><br><span class="line"><span class="string">    --network  es-net \</span></span><br><span class="line"><span class="string">    -p 9200:9200 \</span></span><br><span class="line"><span class="string">    -p 9300:9300 \</span></span><br><span class="line"><span class="string">    --restart=always \</span></span><br><span class="line"><span class="string">    elasticsearch:7.12.1      </span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9200 提供 http 使用</span></span><br><span class="line"><span class="comment"># 9300 内部调用</span></span><br><span class="line"><span class="comment"># 高配置</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">  --name es \</span></span><br><span class="line"><span class="string">  -e &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;  \</span></span><br><span class="line"><span class="string">  -e &quot;discovery.type=single-node&quot; \</span></span><br><span class="line"><span class="string">  -v es-data:/usr/share/elasticsearch/data \</span></span><br><span class="line"><span class="string">  -v es-plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line"><span class="string">  --privileged=true \</span></span><br><span class="line"><span class="string">  --network  es-net \</span></span><br><span class="line"><span class="string">  -p 9200:9200 \</span></span><br><span class="line"><span class="string">  -p 9300:9300 \</span></span><br><span class="line"><span class="string">  --restart=always \</span></span><br><span class="line"><span class="string">  elasticsearch:7.12.1</span></span><br></pre></td></tr></table></figure><ul><li><p>查看数据卷位置<code>docker volume inspect es-plugins</code></p><p><img src="https://img-blog.csdnimg.cn/e2c8043dcc6f4826aeb831081a95cbbf.png" alt="查看数据卷位置"></p></li><li><p>访问测试，出现如下<code>json</code>则为正确安装</p><p><img src="https://img-blog.csdnimg.cn/0c8708461592493f949e3a67f972dac0.png" alt="访问测试"></p></li></ul></li><li><p><code>kibana</code>安装</p><ul><li><p>安装启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">    --name kibana \</span></span><br><span class="line"><span class="string">    -e ELASTICSEARCH_HOSTS=http://es:9200 \</span></span><br><span class="line"><span class="string">    --network=es-net \</span></span><br><span class="line"><span class="string">    --privileged=true \</span></span><br><span class="line"><span class="string">    -p 5601:5601 \</span></span><br><span class="line"><span class="string">    --restart=always \</span></span><br><span class="line"><span class="string">    kibana:7.12.1</span></span><br></pre></td></tr></table></figure><ul><li><p>访问测试</p><ul><li><p>访问测试: <a href="http://192.168.247.129:5601/app/dev_tools#/console">http://192.168.247.129:5601/app/dev_tools#/console</a>, 点击<code>Explore on my own</code></p><p><img src="https://img-blog.csdnimg.cn/5f67872a5b0f457fbc20e77194d33594.png" alt=""></p></li><li><p><code>Dev Tools</code></p><p><img src="https://img-blog.csdnimg.cn/ea8db4a8cc8f40cdb03531afc8e5c006.png" alt=""></p></li></ul></li><li><p><code>Dev Tools</code></p><blockquote><p>这个界面中可以编写<code>DSL</code>来操作<code>elasticsearch</code>,并且对<code>DSL</code>语句有自动补全功能</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5d954923bbd34115aa4dc292c3d20c59.png" alt=""></p></li></ul></li></ul></li><li><p><code>ik</code>离线安装</p><ul><li><p>上传文件到<code>es-plugins数据卷的_data</code>目录下</p><blockquote><p>下载: <a href="https://ghproxy.com/https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip">https://ghproxy.com/https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</a></p></blockquote></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">  # 下载</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  # 解压 zip 文件使用</span></span><br><span class="line">  <span class="attr">yum</span> <span class="string">install -y unzip</span></span><br><span class="line"><span class="comment"># 解压到指定目录 -d 指定目录 </span></span><br><span class="line">  <span class="attr">unzip</span>  <span class="string">elasticsearch-analysis-ik-7.12.1.zip -d ik</span></span><br><span class="line"><span class="comment"># 删除压缩包</span></span><br><span class="line">  <span class="attr">rm</span> <span class="string">-rf elasticsearch-analysis-ik-7.12.1.zip </span></span><br><span class="line"><span class="comment"># 重启 es</span></span><br><span class="line">  <span class="attr">docker</span> <span class="string">restart es</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  # 查看日志</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">logs -f es</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li><p>下载</p><p><img src="https://img-blog.csdnimg.cn/09ece5c1a67e467ab0dbb78c61e0d427.png" alt=""></p><ul><li><p>测试ik</p><p><img src="https://img-blog.csdnimg.cn/8aa1313fa33c4f9dbe1f439bf6a83470.png" alt=""></p></li></ul></li><li><p><code>IK</code>分词器包含两种模式</p><ul><li><code>ik_smart</code>:最少切分</li><li><code>ik_max_word</code>:最细切分</li></ul></li><li><p><code>IK</code>分词器-扩展词库</p><blockquote><p>要扩展<code>ik</code>分词器的词库,只需要修改一个<code>ik</code>分词器目录中的<code>config</code>目录中的<code>IKAnalyzer.cfg.xml</code>文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改如下 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典  此 ext.dic 文件在 ikAnalyzer.cfg.xml同级目录下(不存在则手动创建) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改后需要重启 es  --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b52f4cf6d9c4444598b2bf4825c46789.png" alt=""></p></li></ul></li><li><p>总结</p><ul><li>分词器的作用是什么<ul><li>创建倒排索引时对文档分词</li><li>用户搜索时,对输入的内容分词</li></ul></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-3"><ul><li><p><code>Mapping</code>是对索引库中文档的约束,常见的<code>mapping</code>属性包括</p></li><li><p><code>type</code>字段数据类型,常见的简单类型有</p><ul><li>字符串<code>text(可分词文本),keyword(精确值，例如:ip地址)</code></li></ul><ul><li><p>数值<code>long,Integer,short,byte,double,float</code></p></li><li><p>布尔：<code>boolean</code></p></li><li><p>日期<code>date</code></p><ul><li>对象<code>object</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">18, </span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span>: <span class="string">56.55, </span></span><br><span class="line">  <span class="attr">&quot;isMarried&quot;</span>: <span class="string">false, </span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;zy@qq.com&quot;, </span></span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="string">[1,2,3], </span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;firstName&quot;</span>: <span class="string">&quot;coder&quot;, </span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span>: <span class="string">&quot;itl&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>index</code>:是否创建索引,默认为<code>true</code></p></li><li><p><code>analyzer</code>:使用哪种分词器</p></li><li><p><code>properties</code>:该字段的子字段</p></li></ul><ul><li><p>创建索引库</p><blockquote><p><code>ES</code>中通过<code>Restful</code>请求操作索引库,文档,请求内容用<code>DSL</code>语句来表示,创建索引库和<code>mapping</code>的<code>DSL</code>语句如下</p></blockquote><p>  <img src="https://img-blog.csdnimg.cn/bc0c424cbdd844b8a7af1d1d4c9154e8.png" alt="实例"></p><ul><li><p>查看索引库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/索引库名</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/coderitl</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除索引库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">DELETE</span> <span class="string">/索引库名</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">  <span class="attr">DELETE</span> <span class="string">/coderitl</span></span><br></pre></td></tr></table></figure></li><li><p>修改索引库</p><blockquote><p><code>禁止修改</code></p><p>索引库和<code>mapping</code>一旦创建无法修改,但是可以添加新的字段,</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">PUT</span> <span class="string">/索引库名/_mapping</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;新字段名&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-4"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/索引库名/_doc/文档id</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;字段1&quot;</span>: <span class="string">&quot;值1&quot;, </span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span>: <span class="string">&quot;值2&quot;, </span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span>: <span class="string">&quot;值3&quot;, </span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span>: <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>新增文档</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">  # 新增文档 POST /coderitl/_doc/(固定格式)      1(id)</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/coderitl/_doc/1</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span>:<span class="string">&quot;程序员&quot;,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span>:<span class="string">&quot;lx@qq.com&quot;,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;信&quot;,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;李&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>新增文档</p><p><img src="https://img-blog.csdnimg.cn/f228b66f98c84accba2c3fb0c3e5474a.png" alt=""></p></li><li><p>数组类型(非数组,是多值添加)</p><p><img src="https://img-blog.csdnimg.cn/72313a2b73644ef28e7c2fd2617e226a.png" alt=""></p></li></ul></li><li><p>查询文档</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/coderitl/_doc/1</span></span><br></pre></td></tr></table></figure></li><li><p>删除文档</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DELETE</span> <span class="string">/coderitl/_doc/1</span></span><br></pre></td></tr></table></figure></li><li><p>修改文档</p></li><li><p>全量修改:<code>会删除旧文档,添加新文档</code></p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">//</span> <span class="string">修改指的是: 全量修改(所有字段)</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/索引库名/_doc/文档id</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span>: <span class="string">&quot;值1&quot;,</span></span><br><span class="line">      <span class="attr">&quot;字段2&quot;</span>: <span class="string">&quot;值2&quot;,</span></span><br><span class="line">      <span class="attr">//</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>全量修改时是所有的字段需要全部出现,不修改的只需要不改动<code>全量: 会删除旧文档,添加新文档</code></p><p>  <img src="https://img-blog.csdnimg.cn/f4b5c630970d441aa64dad803167e50a.png" alt=""></p></li></ul></li><li><p>局部修改</p><p><img src="https://img-blog.csdnimg.cn/c2addf54590747e1a92cce9aae1e56c1.png" alt="局部修改"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-5"><ul><li><p><code>hotel</code></p><p><img src="https://img-blog.csdnimg.cn/094120c9d5424d9aa997ad18511331ca.png" alt=""></p><ul><li>对应<code>mapping</code></li></ul><blockquote><p><code>mapping</code>要考虑的问题: <code>字段名,数据类型,是否参数搜索,是否分词,如果分词,分词器是什么</code></p></blockquote><ul><li><p><code>ES</code>中支持两种地理坐标数据类型</p></li><li><p><code>geo_point</code>:由纬度<code>latitude</code>和经度<code>longitude</code>确定的一个点<code>32.64832,475.48432432</code></p><ul><li><code>geo_shape</code>:有多个<code>geo_point</code>组成的复杂几何图形,例如一条直线</li></ul></li><li><p>字段拷贝</p><blockquote><p>字段拷贝可以使用<code>copy_to</code>属性将当前字段拷贝到指定字段</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span><span class="string">&quot;all&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>DSL</code>创建索引库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">PUT</span> <span class="string">/hotel</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">          <span class="attr">&quot;index&quot;</span>: <span class="string">false</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;score&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;brand&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">          <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;startName&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;business&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">          <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;location&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;pic&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">          <span class="attr">&quot;index&quot;</span>: <span class="string">false</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;all&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>批量查询</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br></pre></td></tr></table></figure></li><li><p>什么是<code>RestClient</code></p><blockquote><p><code>ES</code>官方提供了各种不同语言的客户端,用来操作<code>ES</code>，这些客户端的本质就是组装<code>DSL</code>语句,通过<code>http</code>请求发送给<code>ES</code></p></blockquote></li><li><p><code>RestClient</code>操作索引库</p><ol><li><p>引入<code>es</code>的<code>RestHighLevelClient</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>因为<code>SpringBoot</code>默认的<code>ES</code>版本是<code>7.6.2</code>，所以需要覆盖默认的<code>ES</code>版本与安装的客户端一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p>在测试类中初始化<code>RestHighClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">// 1.准备Request      PUT /hotel</span></span><br><span class="line">          <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">          <span class="comment">// 2.准备请求参数</span></span><br><span class="line">          request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line">          <span class="comment">// 3.发送请求</span></span><br><span class="line">          client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">testExistsIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">// 1.准备Request</span></span><br><span class="line">          <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">          <span class="comment">// 3.发送请求</span></span><br><span class="line">          <span class="type">boolean</span> <span class="variable">isExists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">          System.out.println(isExists ? <span class="string">&quot;存在&quot;</span> : <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">// 1.准备Request</span></span><br><span class="line">          <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">          <span class="comment">// 3.发送请求</span></span><br><span class="line">          client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      <span class="meta">@BeforeEach</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">          client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                  HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">          ));</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@AfterEach</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          client.close();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MAPPING_TEMPLATE</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;name\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;address\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;price\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;score\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">          <span class="string">&quot;      \&quot;brand\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;city\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;starName\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;business\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;pic\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;location\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;all\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><pre><code>    4. 操作索引库   + 创建索引库     ![分析](https://img-blog.csdnimg.cn/9eb263b0ae8d4357bfed321ec40cf2d6.png)   + 删除索引库     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除索引库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   + 判断索引库是否存在     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断索引库是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isExistsIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(<span class="string">&quot;exists = &quot;</span> + exists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-6"><ul><li><p>新增文档</p><p><img src="https://img-blog.csdnimg.cn/456486442f874292b29f67fc7d3b6ca4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.coderitl.es.hotel;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDocument</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">      <span class="meta">@Autowired</span></span><br><span class="line">      <span class="keyword">private</span> HotelService hotelService;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">// 根据 id 查询酒店数据</span></span><br><span class="line">          <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">61083L</span>);</span><br><span class="line">          <span class="comment">// 转换为文档类型</span></span><br><span class="line">          <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 1. request</span></span><br><span class="line">          <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line">        <span class="comment">// 2. 准备 json(JackSon 序列化)</span></span><br><span class="line">          request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">          client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="meta">@BeforeEach</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                <span class="comment">// 集群使用逗号分隔 =&gt; HttpHost.create</span></span><br><span class="line">                  HttpHost.create(<span class="string">&quot;http://192.168.247.129:9200&quot;</span>)</span><br><span class="line">          ));</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@AfterEach</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="built_in">this</span>.client.close();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据文档创建的实体类</span></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> Long id;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">      <span class="keyword">private</span> String address;</span><br><span class="line">      <span class="keyword">private</span> Integer price;</span><br><span class="line">      <span class="keyword">private</span> Integer score;</span><br><span class="line">      <span class="keyword">private</span> String brand;</span><br><span class="line">      <span class="keyword">private</span> String city;</span><br><span class="line">      <span class="keyword">private</span> String starName;</span><br><span class="line">      <span class="keyword">private</span> String business;</span><br><span class="line">      <span class="keyword">private</span> String location;</span><br><span class="line">      <span class="keyword">private</span> String pic;</span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">          <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">          <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">          <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">          <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">          <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">          <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">          <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">          <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="comment">// 转换为文档类型</span></span><br><span class="line">          <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">          <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><p>​    </p><ul><li><p>查询文档</p><p><img src="https://img-blog.csdnimg.cn/29a4c7dbfd3a496a92bdcf7c4bf4ade6.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询文档库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 数据库对象</span></span><br><span class="line">    <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(ID_INFO);</span><br><span class="line">    <span class="comment">// 将数据库对象转换为 hotelDoc</span></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">    <span class="comment">// 1. 创建 request  对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, ID_INFO.toString());</span><br><span class="line">    <span class="comment">// 2. 发送请求 得到结果</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3. 解析结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line">    <span class="comment">// JSON 反序列化</span></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">jsonHotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">    System.out.println(jsonHotelDoc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>更新文档</p><p><img src="https://img-blog.csdnimg.cn/b149e4e6c435481fadf149745dbfe476.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新文档库: 局部更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateLocalDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">  <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, ID_INFO.toString());</span><br><span class="line">    <span class="comment">// 2. 准备请求参数(更新的字段)</span></span><br><span class="line">    request.doc(</span><br><span class="line">        <span class="string">&quot;price&quot;</span>, <span class="string">&quot;100000&quot;</span>, <span class="comment">// 第一个键值对</span></span><br><span class="line">        <span class="string">&quot;starName&quot;</span>, <span class="string">&quot;六钻&quot;</span> <span class="comment">// 第二个键值对 以逗号分割键值对</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 3. 发送请求</span></span><br><span class="line">    client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除文档库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, ID_INFO.toString());</span><br><span class="line">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>JavaRestClient</code>批量导入酒店数据到<code>ES</code></p><ul><li><p>需求: 批量查询酒店数据,然后导入到索引库</p></li><li><p>思路</p><ol><li><p>利用<code>mybatis-plus</code>查询酒店数据</p></li><li><p>将查询到的数据转换为文档类型数据</p></li><li><p>利用<code>JavaRestClient</code>中的<code>Bulk</code>批处理,实现批量新增文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量加入索引库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 批量查询</span></span><br><span class="line">    List&lt;Hotel&gt; hotelList = hotelService.list();</span><br><span class="line">    <span class="comment">// 创建 request</span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    <span class="comment">// 准备参数,添加多个新增的 Request</span></span><br><span class="line">    <span class="keyword">for</span> (Hotel hotel : hotelList) &#123;</span><br><span class="line">      <span class="comment">// 转换为 hotelDoc</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">      <span class="comment">// 创建新增文档的 Request对象</span></span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotelDoc.getId().toString())</span><br><span class="line">                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON)</span><br><span class="line">                   );</span><br><span class="line">    &#125;</span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-7"><ul><li><p><code>DSL Query</code>分类</p><ul><li><p>查询所有: 查询出所有数据,一般测试用,<code>Eg: match_all</code></p></li><li><p>全文检索(<code>full text</code>)查询: 利用分词器对用户输入内容分词,然后去倒排索引库中匹配</p><ul><li><p><code>match_query</code></p></li><li><p><code>multi_match_query</code></p><p><img src="https://img-blog.csdnimg.cn/222f30568fd742cdbb49fbaa53b61b20.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>全文检索</p><ul><li><p><code>match</code>查询: 全文检索查询的一种,会对用户输入内容分词,然后去倒排索引库检索</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">  # 语法</span></span><br><span class="line">  <span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;match&quot;</span>: <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # 查询字段类型为 text 类型的</span></span><br><span class="line">        <span class="attr">&quot;FIELD&quot;</span>: <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"></span><br><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;match&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;all&quot;</span>: <span class="string">&quot;如家&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>mullti_match</code>:与<code>match</code>查询类似,只不过允许同时查询多个字段</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;外滩&quot;,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: <span class="string">[&quot;brand&quot;,&quot;name&quot;]</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>精确查询: 根据精确词条值查询数据,一般是查找<code>keyword、数值、日期、boolean</code>等类型字段,<code>不会</code>对所有条件分词</p><ul><li><p><code>ids</code>: 根据<code>id</code>精确匹配</p></li><li><p><code>range</code>:根据值的范围查询</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="string">2000,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="string">10000</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>term</code>根据词条<code>精确值</code>查询</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;上海&quot; # 精确内容</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>地理(<code>geo</code>)查询:根据经纬度查询</p><ul><li><p><code>geo_distance</code>：查询到指定中心点小于某个距离值的所有文档(<code>附近功能</code>)</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;:</span> &#123;</span><br><span class="line">      <span class="string">&quot;distance&quot;</span><span class="string">:&quot;2km&quot;</span>,</span><br><span class="line">      <span class="string">&quot;location&quot;</span><span class="string">:&quot;31.21</span>,<span class="number">121.5</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3aa866664592437288a9e9d17992386f.png" alt=""></p></li><li><p><code>geo_bounding_box</code>:查询<code>geo_point</code>值落在某个矩形范围的所有文档</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;geo_bounding_box&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;location&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;top_left&quot;:</span> &#123;</span><br><span class="line">            <span class="string">&quot;lat&quot;</span><span class="string">:&quot;31.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lon&quot;</span><span class="string">:&quot;121.5&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;bottom_right&quot;:</span> &#123;</span><br><span class="line">            <span class="string">&quot;lat&quot;</span><span class="string">:&quot;30.9&quot;</span>,</span><br><span class="line">          <span class="string">&quot;lon&quot;</span><span class="string">:&quot;121.7&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/8874beda6cd7434dba4b2a3c98f21df6.png" alt="矩形内的点就是结果"></p></li><li><p>复合(<code>compound</code>)查询:复合查询可以将上述查询条件组合起来,合并查询条件</p><ul><li><p><code>bool</code></p><ul><li><code>must</code>:必须匹配每个子查询,类似<code>与</code></li><li><code>should</code>:选择性匹配子查询,类似<code>或</code></li></ul></li><li><p><code>must_not</code>：必须不匹配,不参与算分,类似<code>非</code></p><ul><li><code>filter</code>:<code>必须匹配</code>,不参与算分</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bool 基本使用</span></span><br><span class="line">  <span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;bool&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;must&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;term&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;city&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;value&quot;:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;should&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;term&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;brand&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;value&quot;:</span> <span class="string">&quot;华美达&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;must_not&quot;:</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;range&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;price&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;lte&quot;:</span> <span class="number">500</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;range&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;score&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;gte&quot;:</span> <span class="number">45</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>function_score</code>:算分函数查询,可以控制文档相关性算分,控制文档排名,例如<code>百度竞价</code></p></li></ul></li><li><p>相关性打分算法</p><ul><li><p><code>TF-IDF</code>:在<code>elasticsearch5.0</code>之前,会随着词频增加而越来越大</p></li><li><p><code>BM25</code>:在<code>elasticsearch5.0</code>之后,会随着词频增加而增大,但增长曲线会趋于水平</p><ul><li><p>打分算法</p><p><img src="https://img-blog.csdnimg.cn/eb62e11b8ee54b33b8c3f527aa51148d.png" alt="打分算法"></p></li><li><p><code>BM25</code>平滑（默认使用）</p><p><img src="https://img-blog.csdnimg.cn/662edd82535a48dbab42ec3f0908ed1b.png" alt="BM25"></p></li><li><p>影响打分算法</p><p><img src="https://img-blog.csdnimg.cn/fbe9e90967234b61999849d8cf00e52e.png" alt=""></p></li></ul></li><li><p>案例</p><blockquote><p>给<code>如家</code>这个品牌的酒店排名靠前一些</p></blockquote><ul><li><p><code>function_score</code>需要的三要素</p><ol><li><p>那些文档需要算分加权<code>=&gt; 品牌为如家的酒店</code></p></li><li><p>算分函数是什么<code>=&gt; weight就可以</code></p></li><li><p>加权模式是什么<code>=&gt;求和</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;function_score&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;match&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;all&quot;:</span> <span class="string">&quot;外滩&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="attr">&quot;functions&quot;:</span> [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">&quot;filter&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;term&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;brand&quot;:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;weight&quot;:</span> <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;:</span> <span class="string">&quot;sum&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul></li></ul><ul><li><p>需求：搜索名字包含<code>如家</code>,价格不高于<code>400</code>，在坐标<code>31.21,121,5</code>周围<code>10km</code>范围内的酒店</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;must&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;match&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;must_not&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;range&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;price&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;gte&quot;:</span> <span class="number">400</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;filter&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;geo_distance&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;distance&quot;:</span> <span class="string">&quot;10km&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;location&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;lat&quot;:</span> <span class="number">31.21</span>,</span><br><span class="line">                <span class="attr">&quot;lon&quot;:</span> <span class="number">121.5</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-8"><blockquote><p><code>elasticsearch</code>支持对搜索<code>结果排序</code>,默认是根据相关度算分<code>_score</code>来排序,可以排序的字段类型有<code>keyword、数值、地理坐标、日期类型等</code></p></blockquote><ul><li><p>语法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;match_all&quot;:</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;sort&quot;:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;FIELD&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;order&quot;:</span> <span class="string">&quot;desc&quot;</span> <span class="string">//</span> <span class="string">排序字段和排序方式:</span> <span class="string">ASC</span>,<span class="string">DESC</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">//</span> <span class="string">地理坐标</span></span><br><span class="line">  <span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;match_all&quot;:</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;sort&quot;:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_geo_distance&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;FIELD&quot;:</span> <span class="string">&quot;纬度,经度&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;order&quot;:</span> <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unit&quot;:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><blockquote><p>对酒店数据按照用户评价降序排序,评价相同的按照价格升序排序</p><p>评价是<code>score</code>字段,价格是<code>price</code>字段,按照顺序添加两个排序规则</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;:</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;:</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;score&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;price&quot;:</span> <span class="string">&quot;asc&quot;</span> <span class="string">//</span> <span class="string">简写形式</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><blockquote><p>实现对酒店数据按照到你的位置坐标的距离升序排序</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;:</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;:</span> [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;location&quot;:</span> <span class="string">&quot;21,13&quot;</span>, <span class="string">//</span> <span class="string">简写形式</span></span><br><span class="line">        <span class="attr">&quot;order&quot;:</span> <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unit&quot;:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果分页</p><blockquote><p><code>elasticsearch</code>默认情况下只返回<code>top10</code>的数据,而如果要查询更多的数据就需要修改分页参数了</p><p><code>elasticsearch</code>中通过修改<code>from、size</code>参数来控制要返回的分页结果</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;:</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">&quot;from&quot;:</span> <span class="number">100</span>, <span class="string">//</span> <span class="string">分页开始的位置</span>,<span class="string">默认为</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;:</span> <span class="number">1</span>, <span class="string">//</span> <span class="string">期望获取的文档总数</span></span><br><span class="line"><span class="attr">&quot;sort&quot;:</span> [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">&quot;price&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>(深度分页)这种分页方式不利于集群,(因为获取了 <code>from:100,zise:1  =&gt;总共获取了101条数据,截取了 1 条数据</code> )</p><p><img src="https://img-blog.csdnimg.cn/af31e6b16332463c87dc79866e893cdb.png" alt=""></p></li></ul></li><li><p>深度分页带来的问题</p><ol><li><p>首先在每个数据分片上都排序并查询前<code>1000</code>条文档</p></li><li><p>然后将所有节点的结果聚合,在内存中重新排序选出前<code>1000</code>条文档</p></li></ol></li></ul><ol><li><p>最后从这<code>1000</code>条中,选取从<code>990</code>开始的<code>10</code>条文档</p><blockquote><p>如果搜索页过深,或者结果集<code>from+size</code>越大,对内存和<code>CPU</code>的消耗也越高,因此<code>ES</code>设定结果集查询的上限是<code>10000</code></p></blockquote></li></ol><ul><li><p>深度分页解决方案</p></li><li><p><code>search after</code>:分页时需要排序,原理是从上一次的排序值开始,查询下一页数据<code>官方推荐</code></p><ul><li><code>scroll</code>：原理将排序数据形成的快照,保存在内存<code>官方已经不推荐</code></li></ul></li><li><p>总结</p><ul><li><code>from+size</code><ul><li>优点: 支持随机翻页</li><li>缺点: 深度分页问题,默认查询上限是<code>10000</code></li><li>场景: 百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li><code>after search</code><ul><li>优点: 没有查询上限(单次查询的<code>size</code>不超过<code>10000</code>)</li><li>缺点: 只能向后逐页查询,不支持随机翻页</li><li>场景: 没有随即翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li><code>scroll</code><ul><li>优点: 没有查询上限(单次查询的<code>size</code>不超过<code>10000</code>)</li><li>缺点: 会有额外内存消耗,并且搜索结果是<code>非实时的</code></li><li>场景: 海量数据的获取和转义,从<code>ES7.1</code>开始不推荐使用,建议使用<code>after search</code>方案</li></ul></li></ul></li></ul><ul><li><p>结果高亮</p><blockquote><p>高亮:就是在搜索结果中把搜索关键字突出显示</p></blockquote><ul><li><p>原理</p><ul><li><p>将搜索结果中的关键字用标签标记出来</p><ul><li>在页面中给标签添加<code>css</code>样式</li></ul></li><li><p>语法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;match&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;fields&quot;:</span> &#123; <span class="string">//</span> <span class="string">指定要高亮的字段</span></span><br><span class="line">      <span class="string">&quot;FIELD&quot;</span>&#123;</span><br><span class="line">          <span class="string">&quot;pre_tags&quot;</span><span class="string">:&quot;&lt;em&gt;&quot;</span>, <span class="string">//</span> <span class="string">用来标记高亮字段的前置标签</span></span><br><span class="line">          <span class="string">&quot;post_tags&quot;</span><span class="string">:&quot;&lt;/em&gt;&quot;</span>, <span class="string">//</span> <span class="string">用来标记高亮字段的后置标签，</span></span><br><span class="line">          <span class="attr">&quot;require_field_match&quot;:</span> <span class="string">&quot;false&quot;</span> <span class="string">//</span> <span class="string">默认情况下</span>,<span class="string">ES的搜索字段必须与高亮字段一致</span>,<span class="literal">false</span><span class="string">为可以不一致</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>搜索结果处理整体语法</p><p><img src="https://img-blog.csdnimg.cn/475fac08db834b60b33b4b1985718dd4.png" alt=""></p></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-9"><ul><li><p><code>match_all</code></p><p><img src="https://img-blog.csdnimg.cn/16700cb5795a4ae3b03787ad4e54957a.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">      <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">      <span class="comment">// 准备 DSL</span></span><br><span class="line">      request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">      <span class="comment">// 结果对象</span></span><br><span class="line">      <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">      handleResponse(response);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果解析抽取</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">      <span class="comment">// 4. 解析响应</span></span><br><span class="line">      <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">      <span class="comment">// 4.1 获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">      System.out.println(<span class="string">&quot;共搜索到: &quot;</span> + total);</span><br><span class="line">    <span class="comment">// 4.2 文档数组</span></span><br><span class="line">      SearchHit[] hits = searchHits.getHits();</span><br><span class="line">      <span class="comment">// 4.3 遍历</span></span><br><span class="line">      <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档 source</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">          <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解析<code>response</code> 一 一获取对应的值</p><p><img src="https://img-blog.csdnimg.cn/0e831d404e334553ab2714da540cbfd3.png" alt=""></p></li></ul></li><li><p><code>match</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备 DSL</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>,<span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    </span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>精确查询</p><ul><li><p><code>term</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testTerm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备 DSL</span></span><br><span class="line">    request.source().query(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">    <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>range</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRange</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备 DSL</span></span><br><span class="line">    request.source().query(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(<span class="number">100</span>).lte(<span class="number">150</span>));</span><br><span class="line">  <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">  handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复合查询</p><p><img src="https://img-blog.csdnimg.cn/366dfbac31dd46fda8a3aa0aab6279ef.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">       <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">       <span class="comment">// 准备 DSL</span></span><br><span class="line">     <span class="comment">// 准备 BoolQuery</span></span><br><span class="line">       <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">     <span class="comment">// 添加 term</span></span><br><span class="line">       boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;上海&quot;</span>));</span><br><span class="line">     request.source().query(boolQuery);</span><br><span class="line">       <span class="comment">// 结果对象</span></span><br><span class="line">       <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">       handleResponse(response);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>排序和分页</p><p><img src="https://img-blog.csdnimg.cn/53acd978a06b4e388a2726c0410f1352.png" alt="搜索结果的排序和分页是与query同级的参数"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageAndSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备 DSL</span></span><br><span class="line">    <span class="comment">// 2.1 准备 query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery())</span><br><span class="line">        <span class="comment">// 可以链式调用 也可以通过  request.source().sort(&quot;price&quot;, SortOrder.ASC); 等获取</span></span><br><span class="line">        .sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">        .from((page - <span class="number">1</span>) * size)</span><br><span class="line">        .size(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">  handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>高亮显示</p><p><img src="https://img-blog.csdnimg.cn/bfd6010a6c654571be381f91cf70cea7.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighLight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备 DSL</span></span><br><span class="line">    <span class="comment">// 2.1 准备 query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">    request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b989b820fad647e0a04d360a133e15d1.png" alt="高亮显示处理高亮: highlight部分的内容"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整高亮处理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighLight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">// 1. 准备 request 对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备 DSL</span></span><br><span class="line">    <span class="comment">// 2.1 准备 query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">    request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 结果对象</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果解析抽取</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 4.1 获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到: &quot;</span> + total);</span><br><span class="line">    <span class="comment">// 4.2 文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">  <span class="comment">// 4.3 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">      <span class="comment">// 获取文档 source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">      <span class="comment">// 获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;</span><br><span class="line">            <span class="comment">// 获取高亮值</span></span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (highlightField != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                <span class="comment">// 覆盖高亮结果</span></span><br><span class="line">                hotelDoc.setName(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/67eda0c06a754df99815ba2179855f11.png" alt="实现结果高亮"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-10"><ul><li><p>步骤</p><ol><li><p>定义实体类,接受前端请求</p><ul><li><p>将搜索、分页、排序方式等封装到实体类</p><p><img src="https://img-blog.csdnimg.cn/4d3d0a483a514a919c8934ab2691a3fa.png" alt=""></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="comment">// 搜索框的关键字</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="comment">// 排序方式</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义<code>controller</code>接口,接受页面请求,调用<code>search</code>方法</p><ul><li><p>请求方式<code>POST</code></p></li><li><p>请求路径<code>/hotel/list</code></p></li><li><p>请求参数: 对象，类型为<code>RequestParams</code></p></li><li><p>返回值: <code>PageResult</code>，包含两个属性</p><ol><li><p>总条数<code>Long total</code></p></li><li><p>酒店数据<code>List&lt;HotelDoc&gt; hotels</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    Long total;</span><br><span class="line">    List&lt;HotelDoc&gt; hotels;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Long total, List&lt;HotelDoc&gt; hotels)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">      <span class="built_in">this</span>.hotels = hotels;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>定义<code>接口中的search方法</code>,利用<code>match</code>查询实现根据关键字搜索酒店信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams requestParams)</span> &#123;</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 准备 Resuest</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备 DSL</span></span><br><span class="line">            <span class="comment">/****************************/</span></span><br><span class="line">            <span class="comment">// 2.1 准备 query</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> requestParams.getKey();</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">                <span class="comment">// 前端未传递 key</span></span><br><span class="line">                request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 2.2 分页</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> requestParams.getPage();</span><br><span class="line">          <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> requestParams.getSize();</span><br><span class="line">            request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">          <span class="comment">/****************************/</span></span><br><span class="line">            <span class="comment">// 3. 发送请求,得到响应</span></span><br><span class="line">          response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 4. 解析响应</span></span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="comment">// 获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">// 获取文档 source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">          hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>距离排序</p><p><img src="https://img-blog.csdnimg.cn/3712bea29348460db545f0dc29a2d383.png" alt=""></p></li><li><p>广告置顶</p><blockquote><p>我们需要给置顶的酒店文档<code>HotelDoc</code>加一个标记,然后利用<code>function score</code>给带有标记的文档增加权重</p></blockquote><ul><li><p>实现步骤分析</p><ol><li><p>给<code>HotelDoc</code>类添加一个<code>isAD</code>字段,<code>Boolean</code>类型</p></li><li><p>挑选几个酒店，给他的文档数据添加<code>isAD</code>字段,值为<code>true</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 文档id=38665 添加字段 isAD=true</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/hotel/_doc/38665</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;isAD&quot;</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>search</code>方法,添加<code>function score</code>功能,给<code>isAD</code>值为<code>true</code>的酒店增加权重</p><p><img src="https://img-blog.csdnimg.cn/ae5e3c7bca2448d9802a476939e76ac5.png" alt=""></p></li></ol></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-11"><ul><li><p>聚合的分类(对数据类型有限制:<code>keyword、数值、日期、boolean等</code>)</p><blockquote><p>聚合: 可以实现对文档数据的统计、分析、运算</p></blockquote><ul><li>常见聚合有三类:<ol><li>桶(<code>*Bucket</code>)聚合：用来对文档做分组<ul><li><code>TermAggregation</code>：按照文档字段值分组</li><li><code>Date Histogram</code>:按照日期阶梯分组,例如一周一组,或者一月一组等等</li></ul></li><li>度量(<code>*Metric</code>)聚合：用以计算一些值,比如: 最大值,最小值，平均值等<ul><li><code>AVG</code></li><li><code>MAX</code></li><li><code>MIN</code></li><li><code>Stats</code>同时求<code>max,min,avg,sum等</code></li></ul></li><li>管道(<code>pipeline</code>)聚合:其他聚合的结果为基础做聚合</li></ol></li></ul></li></ul><ul><li><p><code>DSL</code>实现<code>Bucket</code>聚合</p><blockquote><p>统计所有数据中的酒店品牌有几种,此时可以根据酒店品牌的名称做聚合,类型为<code>term</code></p></blockquote>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="string">0, // 设置 size 为 0,结果中不包含文档,只包含聚合结果</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: <span class="string">&#123; // 定义聚合</span></span><br><span class="line">      <span class="attr">&quot;brandArr&quot;</span>: <span class="string">&#123; // 给聚合起个名称</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: <span class="string">&#123; // 聚合的类型,按照品牌值聚合,所以选择 term</span></span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;, // 参与聚合的字段</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">20 // 希望获取的聚合结果数量</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p> 默认情况下,<code>Bucket</code>聚合会统计<code>Bucket</code>内的文档数量,记为<code>_count</code>并且按照<code>_count</code>降序排序，我们可以修正结果排序方式</p></blockquote>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="string">0, // 设置 size 为 0,结果中不包含文档,只包含聚合结果</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>: <span class="string">&#123; // 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;brandArr&quot;</span>: <span class="string">&#123; // 给聚合起个名称</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: <span class="string">&#123; // 聚合的类型,按照品牌值聚合,所以选择 term</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;, // 参与聚合的字段</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span>: <span class="string">&quot;asc&quot; // 按照_count升序排序</span></span><br><span class="line">          <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">20 // 希望获取的聚合结果数量</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>默认情况下,<code>Bucket</code>聚合是对索引库的所有文档做聚合,我们可以限定要聚合的文档范围,只要添加<code>query</code>条件即可</p></blockquote>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line"><span class="attr">//</span> <span class="string">添加聚合条件</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="string">150,</span></span><br><span class="line">          <span class="attr">&quot;lte&quot;</span>: <span class="string">200</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;,</span> <span class="string"></span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="string">0, // 设置 size 为 0,结果中不包含文档,只包含聚合结果</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>: <span class="string">&#123; // 定义聚合</span></span><br><span class="line">      <span class="attr">&quot;brandArr&quot;</span>: <span class="string">&#123; // 给聚合起个名称</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: <span class="string">&#123; // 聚合的类型,按照品牌值聚合,所以选择 term</span></span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;, // 参与聚合的字段</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_count&quot;</span>: <span class="string">&quot;asc&quot; // 按照_count升序排序</span></span><br><span class="line">          <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">20 // 希望获取的聚合结果数量</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>DSL</code>实现<code>Metrices</code>聚合</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/hotel/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;gte&quot;</span>: <span class="string">150,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="string">200</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="string">0,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandArr&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">20</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span>: <span class="string">&#123; // 是 brands 聚合的子聚合,也就是分组后对每组分别计算</span></span><br><span class="line">        <span class="attr">&quot;score_stats&quot;</span>: <span class="string">&#123; // 聚合名称</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span>: <span class="string">&#123; // 聚合类型,这里是 stats 可以计算 min,max,avg 等</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;score&quot; // 聚合字段,这里是 score</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>JavaRestAPI</code>实现聚合</p><p><img src="https://img-blog.csdnimg.cn/bee2194b0bb64b25a9002cff84110f6c.png" alt="对比分析"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试聚合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBuckets</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备 request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备 DSL</span></span><br><span class="line">    <span class="comment">// 2.1 设置 size 只看聚合</span></span><br><span class="line">    request.source().size(<span class="number">0</span>);</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">        AggregationBuilders</span><br><span class="line">        <span class="comment">// 聚合名称</span></span><br><span class="line">        .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">        <span class="comment">// 期望获取文档数量</span></span><br><span class="line">        .size(<span class="number">10</span>)</span><br><span class="line">        <span class="comment">// 聚合字段</span></span><br><span class="line">        .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  <span class="comment">// 3. 发出请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">  <span class="comment">// 4. 解析结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;response = &quot;</span> + response);</span><br><span class="line">  <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">    <span class="comment">// 4.1 根据聚合名称获取聚合结果(自动生成的对象并非所要结果)</span></span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2 获取 buckets</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="comment">// 4.3 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 4.4 获取 key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bcfb066ab9ad43568a3f7974173642e5.png" alt="聚合结果获取分析"></p></li><li><p>自动补全</p><blockquote><p>拼音分词器: <a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试分词器</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/_analyze</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">[</span></span><br><span class="line">    <span class="attr">&quot;如家酒店还不错&quot;</span></span><br><span class="line">  <span class="attr">],</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;pinyin&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>自定义分词器(<code>elasticsearch</code>中分词器的组成包含如下三部分)</li></ul><ol><li><p><code>character filters</code>:在<code>tokenizer</code>之前对文本进行处理,例如删除字符、替换字符</p></li><li><p><code>tokenizer</code>:将文本按照一定的规则切割成词条,例如<code>keyword</code>就是部分此，还有<code>id_smart</code></p><ol><li><code>tokenizer filter</code>将<code>tokenizer</code>输出的词条做进一步处理,例如大小写转换,同义词处理,拼音处理等</li></ol><p><img src="https://img-blog.csdnimg.cn/2d7792f3708643fbad6413f5c0b82d68.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">  # 自定义配置(创建库) 未添加 搜索分词器</span></span><br><span class="line">  <span class="attr">PUT</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analysis&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;my_analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_max_word&quot;,</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span>: <span class="string">&quot;py&quot;</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;filter&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;py&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;,</span></span><br><span class="line">            <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="string">false,</span></span><br><span class="line">            <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;keep_original&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="string">16,</span></span><br><span class="line">            <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="string">false</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # 使用</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="attr">POST</span> <span class="string">/test/_analyze</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">[&quot;如家酒店真不错&quot;],</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7c08d20f70f149ebb3a0e170af75f3b9.png" alt=""></p></li></ol><ul><li><p>搜索时出先问题</p><p><img src="https://img-blog.csdnimg.cn/cc2288e56c93472e920e91fa1ce7abfd.png" alt="同义词问题"></p><blockquote><p>解决上述问题: 拼音分词器适合在创建倒排索引的时候使用,但不能在搜索的时候使用</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文档时指定创建分词器和搜索分词器</span></span><br><span class="line">  <span class="attr">PUT</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;my_analyzer&quot;</span>: <span class="string">&#123; // 自定义分词器名称</span></span><br><span class="line">            <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_max_word&quot;, // </span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: <span class="string">&quot;py&quot;</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;filter&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">//</span> <span class="string">规则: 在 github readme 文档有对应使用方法 </span></span><br><span class="line">          <span class="attr">&quot;py&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;,</span></span><br><span class="line">            <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="string">false,</span></span><br><span class="line">            <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;keep_original&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="string">16,</span></span><br><span class="line">            <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="string">true,</span></span><br><span class="line">            <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="string">false</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;, // 创建倒排索引使用的分词器</span></span><br><span class="line">           <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot; // 搜索时使用的分词器</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动补全</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引库</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">coderitl</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例数据</span></span><br><span class="line">  <span class="attr">POST</span> <span class="string">coderitl/_doc</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">[&quot;Sony&quot;,&quot;WH=1000XM3&quot;,&quot;9001&quot;,&quot;0090010&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">POST</span> <span class="string">coderitl/_doc</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">[&quot;SK-IT&quot;,&quot;PITERA&quot;,&quot;BBCS&quot;,&quot;DDES&quot;]</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">POST</span> <span class="string">coderitl/_doc</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">[&quot;Nintendo&quot;,&quot;switch&quot;,&quot;AAFG&quot;,&quot;YYDS&quot;]</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动补全查询语法</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/coderitl/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span>: <span class="string">&#123; // title_suggest 自定义名称</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;so&quot;, // 查询关键字 </span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;title&quot;, // 补全查询的字段</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span>: <span class="string">true, // 跳过重复的</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">10 // 获取前 10 条数据</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>修改<code>hotel</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PUT</span> <span class="string">/hotel</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text_analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_max_word&quot;,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&quot;completion_analyzer&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: <span class="string">&quot;py&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">    <span class="attr">&quot;filter&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="string">false,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="string">true,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span>: <span class="string">true,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="string">16,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="string">true,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="string">false</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;text_analyzer&quot;,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;startName&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;text_analyzer&quot;,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="attr">&quot;suggestion&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;completion_analyzer&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//</span> <span class="string">数据库对应字段 List&lt;String&gt; suggestion</span></span><br><span class="line"><span class="attr">&quot;suggestion&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;completion_analyzer&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">//</span> <span class="string">那些数据库字段做自动补全</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//</span> <span class="string">构造实现字段赋值</span></span><br><span class="line"><span class="attr">this.suggestion</span> = <span class="string">Arrays.asList(this.brand,this.business)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6b83989860cd4e888b62d4182ea0d108.png" alt="对自动补全完善"></p></li></ul></li><li><p><code>JavaApi</code>实现自动补全</p><p><img src="https://img-blog.csdnimg.cn/c3212942b7ee450cae18b683d1e5b9e9.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试自动补全 API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSuggest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 1. 准备 request</span></span><br><span class="line">      <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">      <span class="comment">// 准备 DSL</span></span><br><span class="line">      request</span><br><span class="line">          .source()</span><br><span class="line">          .suggest(</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>()</span><br><span class="line">                  <span class="comment">// 自定义名称: suggestions</span></span><br><span class="line">                  .addSuggestion(</span><br><span class="line">                      <span class="string">&quot;suggestions&quot;</span>,</span><br><span class="line">                      <span class="comment">// 参与自动补全的字段: suggestion</span></span><br><span class="line">                      SuggestBuilders.completionSuggestion(<span class="string">&quot;suggestion&quot;</span>)</span><br><span class="line">                          <span class="comment">// 搜索关键字</span></span><br><span class="line">                          .prefix(<span class="string">&quot;sd&quot;</span>)</span><br><span class="line">                          <span class="comment">// 跳过重复的</span></span><br><span class="line">                          .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">                          <span class="comment">// 期望显示的数据量</span></span><br><span class="line">                          .size(<span class="number">10</span>)));</span><br><span class="line">      <span class="comment">// 发送请求</span></span><br><span class="line">      <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">      <span class="comment">// 4. 解析结果</span></span><br><span class="line">      <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line">      <span class="comment">// 4.1 根据不全查询名称 获取补全结果  Suggest.Suggestion&lt;? extends Suggest.Suggestion.Entry&lt;? extends</span></span><br><span class="line">      <span class="comment">// Suggest.Suggestion.Entry.Option&gt;&gt; == CompletionSuggestion</span></span><br><span class="line">      <span class="type">CompletionSuggestion</span> <span class="variable">suggestions</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;suggestions&quot;</span>);</span><br><span class="line">      <span class="comment">// 4.2 获取 options</span></span><br><span class="line">      List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();</span><br><span class="line">      <span class="comment">// 4.3 遍历</span></span><br><span class="line">      <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">        <span class="comment">// 获取 text</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b842d5aa16d1417f8a0de0011c2aac0b.png" alt=""></p></li><li><p>数据同步</p><ul><li><p>数据同步问题分析</p><blockquote><p><code>elasticsearch</code>中的酒店数据来自于<code>mysql</code>,因此<code>mysql</code>数据发生改变时,<code>elasticsearch</code>也必须跟着改变,这个就是<code>elasticsearch</code>与<code>mysql</code>之间的<code>数据同步</code></p></blockquote></li></ul></li><li><p>数据同步的三种方式</p><ol><li><p>同步调用</p><p><img src="https://img-blog.csdnimg.cn/92f6ed6a9fed4396a9f167da04170cc7.png" alt=""></p><ul><li>优点: 实现简单,粗暴</li><li>缺点: 业务耦合度高</li></ul></li><li><p>异步通知(<code>推荐</code>)</p><p><img src="https://img-blog.csdnimg.cn/052fc76f6915448daac9df23848cf4fc.png" alt=""></p><ul><li>优点: 低耦合,实现难度一般</li><li>缺点: 依赖<code>mq</code>的可靠性</li></ul></li></ol><ol><li><p>监听<code>binlog</code></p><p>  <img src="https://img-blog.csdnimg.cn/707e23da257b4f37861cd8ab2e659230.png" alt=""></p><ul><li>优点: 完全解除服务间耦合</li></ul></li></ol><ul><li>缺点: 开启<code>binlog</code>增加数据库负担,实现复杂度高</li></ul></li></ul><ul><li><p>案例实现数据同步</p><p>  <img src="https://img-blog.csdnimg.cn/c17fcfb6c03c43d492425a7cd1855f23.png" alt=""></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-12"><ul><li><p>问题</p><ul><li><p>海量数据存储问题: 将索引库从逻辑上拆分为<code>N</code>个分片,存储到多个节点</p></li><li><p>单点故障问题: 将分片数据在不同节点备份</p><p><img src="https://img-blog.csdnimg.cn/47fe752932d7478991e7d3b0293caf5f.png" alt=""></p></li></ul></li><li><p>搭建集群</p><ul><li><p>集群所需环境容量大小(运行内存<code>4G+</code>，否则过于卡顿,无法操作)</p><p><img src="https://img-blog.csdnimg.cn/d1ed6aa25d3f46f88aba16993d0c672a.png" alt="集群所需环境容量大小"></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">network create elastic</span></span><br></pre></td></tr></table></figure><ul><li><p><code>es</code>运行需要修改一些<code>linux</code>系统权限,修改<code>/etc/sysctl.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># 添加如下</span></span><br><span class="line"><span class="attr">vm.max_map_count</span>=<span class="string">262144</span></span><br><span class="line"><span class="comment"># 保存退出后使其生效</span></span><br><span class="line"> <span class="attr">sysctl</span> <span class="string">-p</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>docker-compose.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.13.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es02,es03</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">TZ=&quot;Asia/Shanghai&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">        <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">          <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/root/es/data/data01:/usr/share/elasticsearch/data</span> <span class="comment"># 数据文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/es/logs/logs01:/usr/share/elasticsearch/logs</span> <span class="comment"># 日志文件</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  <span class="attr">es02:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.13.2</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">es02</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es02</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">TZ=&quot;Asia/Shanghai&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">        <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">          <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/root/es/data/data02:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/es/logs/logs02:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9201</span><span class="string">:9200</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9301</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  <span class="attr">es03:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.13.2</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">es03</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es03</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es02</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=&quot;Asia/Shanghai&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">        <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">          <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/root/es/data/data03:/usr/share/elasticsearch/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/root/es/logs/logs03:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9202</span><span class="string">:9200</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9302</span><span class="string">:9300</span></span><br><span class="line">      <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.13.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">I18N_LOCALE=zh-CN</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">      <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es01:vm01</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es01</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es02</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es03</span></span><br><span class="line">      <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  </span><br><span class="line">    <span class="attr">cerebro:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">lmenezes/cerebro:0.9.2</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">cerebro</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;19000:9000&quot;</span></span><br><span class="line">      <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es01:vm01</span></span><br><span class="line">      <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-Dhosts.0.host=http://vm01:9200</span></span><br><span class="line">      <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">data01:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">data02:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">data03:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="attr">elastic:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure></li><li><p>构建</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker-compose</span> <span class="string">up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2e6a70c679024f039a9bbf8652ee759d.png" alt="构建安装集群"></p></li></ul></li><li><p>访问<code>5601 出现 Kibana server is not ready yes</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 es01 的容器 ip </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; c6  # c6 是 es01 的容器id</span></span><br><span class="line"><span class="comment"># 复制获取的的 ip </span></span><br></pre></td></tr></table></figure></li><li><p>进入<code>kibana</code>容器内部</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 kibana</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it kibana bash</span></span><br><span class="line"><span class="comment"># 进入 config</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">config</span></span><br><span class="line"><span class="comment"># 修改该配置文件,根据下图实现</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">kibana.yml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改完毕后重启</span></span><br><span class="line"><span class="attr">docker-compose</span> <span class="string">restart kibana</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9fc2989f4d3b4a64921330779e9046e7.png" alt=""></p></li><li><p>集群状态监控</p><blockquote><p><code>github</code>地址: <a href="https://github.com/lmenezes/cerebro">https://github.com/lmenezes/cerebro</a></p><p>下载链接: <a href="https://github.com/lmenezes/cerebro/releases/download/v0.9.4/cerebro-0.9.4.zip">https://github.com/lmenezes/cerebro/releases/download/v0.9.4/cerebro-0.9.4.zip</a> (<code>windows可使用</code>)</p></blockquote></li><li><p>集群访问测试</p><p><img src="https://img-blog.csdnimg.cn/ce5f0a8aa0424b07b8cbe078c8e316e3.png" style="zoom:67%;" /></p></li><li><p>创建索引库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PUT</span> <span class="string">/coderitl</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">3, // 分片数量</span></span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span>:<span class="string">1 // 副本数量</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">            <span class="attr">//</span> <span class="string">mapping 映射定义</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>DSL</code>创建</p><p><img src="https://img-blog.csdnimg.cn/31938f65a7174a2e859edd333b78e877.png" alt=""></p></li><li><p><code>cerebro</code>创建索引库</p><p><img src="https://img-blog.csdnimg.cn/8dd2ab29feba498ba812a4da165fa3fc.png" alt=""></p></li></ul></li></ul><ul><li><p>集群节点职责划分</p><p><img src="https://i.imgloc.com/2023/06/23/VI23gd.png" alt=""></p></li><li><p><code>ES</code>集群的脑裂</p><blockquote><p>默认情况下,每个节点都是<code>master eligible</code>节点,因此一旦<code>master</code>节点宕机,其他候选节点会选举一个成为主节点,当主节点与其他节点网络故障时,可能发生脑裂问题</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a0f157aaf4954038bc8561faca3ebb95.png" alt=""></p><blockquote><p>为了避免脑裂,需要要求候选票超过<code>(eligible节点数量 + 1) / 2</code>才能当选为主,因此<code>eligible</code>节点数量最好是奇数,对应配置项是<code>discovery.zen.minmum_master_nodes</code>在<code>es7.0</code>以后,已经成为默认配置,因此一般不会发生脑裂,</p></blockquote></li></ul><ul><li><p><code>ES</code>集群的分布式存储</p><blockquote><p>当新增文档时,应该保存到不同的分片,保证数据均衡,主要通过<code>hash</code>算法来计算文档应该存储到那个分片</p></blockquote><ul><li><p>添加数据</p><ul><li><p>添加数据（<code>9200</code>）</p><p><img src="https://img-blog.csdnimg.cn/85975180bd4248e289d16b154fe88e4c.png" alt=""></p></li></ul><ul><li><p>获取数据(<code>9201</code>)</p><p>  <img src="https://img-blog.csdnimg.cn/d74b55fd6f5b4e1bbb6253d4538ccc83.png" alt=""></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;explain&quot;</span>:<span class="string">true, // 获取来自那个分片信息</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/db3d50f29dd54d5fb38ca5fdfc75d0a8.png" alt="数据成功的存储在不同分片上"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hash 算法</span></span><br><span class="line"><span class="attr">shard</span> = <span class="string">hash(_routing) % number_of_shards</span></span><br></pre></td></tr></table></figure><ul><li><p><code>_routing</code>: 默认是文档的<code>id</code></p></li><li><p>算法与分片数量有关,因此索引库一旦创建,分片数量不能修改</p></li><li><p>新增文档流程</p><p><img src="https://img-blog.csdnimg.cn/97ff1897c6f44bc4afc6728951df1b8b.png" alt=""></p></li></ul></li><li><p>分布式查询</p><ul><li><p><code>scatter phase</code>:分散阶段,<code>coordinating node</code>会把请求分发到每一个分片</p></li><li><p><code>gather phase</code>：聚集阶段,<code>coordinating node</code>汇总<code>data node</code>的搜索结果,并处理为最终结果集返回给用户</p><p><img src="https://img-blog.csdnimg.cn/8813f666e14b44b88a4e40c6b186a36d.png" alt="先分发,后汇总，在返回给用户"></p></li></ul></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分布式搜索-13"><ul><li><p>问题引出：停止一个主机</p><p><img src="https://img-blog.csdnimg.cn/440d02efa3484244ac9a4c0906d26efc.png" alt=""></p></li><li><p>故障转移</p><blockquote><p>集群的<code>master</code>节点会监控集群中的节点状态,如果发现有节点宕机,会立即将宕机节点的分片数据转移到其他节点，确保数据安全,这个叫做<code>故障转移</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/a9848605061543adbfaf74548141c979.png" alt="分片备份自动转移"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h5 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h5><ul><li><p>详细使用</p><div class="tabs" id="sentinel"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sentinel-1">简介</button></li><li class="tab"><button type="button" data-href="#sentinel-2">安装</button></li><li class="tab"><button type="button" data-href="#sentinel-3">微服务整合</button></li><li class="tab"><button type="button" data-href="#sentinel-4">授权规则</button></li><li class="tab"><button type="button" data-href="#sentinel-5">规则持久化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sentinel-1"><ul><li><p>雪崩问题</p><blockquote><p>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用,这就是雪崩</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b1e99d2c01924161bd566c7e0d2853a5.png" alt=""></p><ul><li><p>解决雪崩问题的常见方式有四种</p><ul><li><p>超时处理: 设定超时时间,请求超过一定时间没有响应就返回错误信息,不会无休止等待（只能缓解）</p></li><li><p>船壁模式: 限定每个业务能使用的线程数,避免耗尽整个<code>tomcat</code>的资源,因此也叫线程隔离</p><p><img src="https://img-blog.csdnimg.cn/1abc8cddd9604746817570a811740775.png" alt="船壁模式"></p></li><li><p>熔断降级: 由熔断器统计业务执行的异常比例,如果超出阈值则会<code>熔断</code>该业务,拦截访问该业务的一切请求</p><p><img src="https://img-blog.csdnimg.cn/ddfca93250eb4b239175e3b3f25ecd7a.png" alt="熔断降级"></p></li><li><p>流量控制: 限制业务访问的<code>QPS</code>，避免服务因流量的突增而故障（<code>可以实现预防，其他三个是避免(已经发生雪崩,阻止传递)</code>）</p><blockquote><p><code>QPS</code>:每秒钟处理的请求数量</p></blockquote></li></ul></li></ul></li><li><p>服务保护技术对比</p><p><img src="https://i.imgloc.com/2023/06/23/VI2UbF.png" alt=""></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sentinel-2"><ul><li><p>安装</p><blockquote><p>文档: <a href="https://sentinelguard.io/zh-cn/">https://sentinelguard.io/zh-cn/</a></p><p><code>github</code>: <a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p><code>jar</code>下载链接: <a href="https://github.com/alibaba/Sentinel/releases/download/1.8.4/sentinel-dashboard-1.8.4.jar">https://github.com/alibaba/Sentinel/releases/download/1.8.4/sentinel-dashboard-1.8.4.jar</a></p></blockquote></li><li><p>下载<code>jar</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件位置执行</span></span><br><span class="line">  <span class="string">java</span> <span class="string">-jar</span> <span class="string">sentinel-dashboard-1.8.4.jar</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1b2f7d9ab54f4c90913c935a88cbaf8f.png" alt=""></p></li></ul><ul><li><p>访问</p><blockquote><p><a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></p><p>用户名和密码: <code>sentinel</code></p></blockquote><ul><li><p>修改配置</p><p>|               配置项               |   默认值   |    说明    |<br>| :————————————————: | :————: | :————: |<br>|           <code>server.port</code>            |   <code>8080</code>   |  服务端口  |<br>| <code>sentinel.dashboard.auth.username</code> | <code>sentinel</code> | 默认用户名 |<br>| <code>sentinel.dashboard.auth.password</code> | <code>sentinel</code> |  默认密码  |</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="string">java</span> <span class="string">-jar</span> <span class="string">sentinel-dashboard-1.8.4.jar</span> <span class="string">-Dserver.port=10010</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sentinel-3"><ul><li><p>在<code>order-service</code>中整合<code>sentinel</code>并且连接<code>sentinel</code>的控制台</p><ol><li><p>引入<code>sentinel</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   <span class="doctag">TODO:</span> 整合 sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">        <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure></li><li><p>访问微服务的任意端点(<code>接口 controller</code>),触发<code>sentinel</code>监控</p><p><img src="https://img-blog.csdnimg.cn/5416f4229aff4834b456a57574455d30.png" alt=""></p></li></ol><ul><li><p>簇点链路</p><blockquote><p><code>簇点链路</code>：就是项目内的调用链路,链路中<code>被监控</code>的每个接口就是一个资源，默认情况下<code>sentinel</code>会监控<code>SpringMVC</code>的每一个端点(<code>接口</code>),因此<code>SpringMVC</code>的每一个端点就是调用链路中的一个资源</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5ff56cd954604bc88f418540856c47d9.png" alt="簇点链路"></p></li><li><p>流控</p><blockquote><p>单机阈值: 其含义局势限制<code>/order/{orderId}</code>这个资源的单机<code>QPS</code>为<code>100(通过压力测试获取)</code>，超出的请求会被拦截报错</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ce0eb8d8e70648b18296ad11a0f4d405.png" style="zoom: 80%;" /></p><ul><li><p>流控模式</p><ul><li><p>直连: 统计当前资源的请求,触发阈值时对当前资源直接限流,也就是默认的模式</p></li><li><p>关联: 统计与当前资源相关的另一个资源,触发阈值时,对当前资源限流</p><blockquote><p>使用场景: 比如用户支付时需要修改订单状态,同时用户要查询订单,查询和修改操作会争抢数据库锁,产生竞争,业务需求时有限支付和更新订单的业务,因此当修改订单业务触发阈值时,需要对订单业务限流</p></blockquote><p><img src="https://img-blog.csdnimg.cn/35c06d4b5d604ce5baa68feb7a32ead2.png" alt=""></p><ul><li><p>配置流控规则:当<code>/order/update</code>资源被访问的<code>QPS</code>超过<code>5</code>时,对<code>/order/query</code>请求限流</p><ul><li><p>对谁限流加给谁</p><p><img src="https://img-blog.csdnimg.cn/df767255e1324a3596b2891b15475579.png" alt=""></p></li><li><p>对<code>query</code>限流</p><p><img src="https://img-blog.csdnimg.cn/98b4efa1b83947df998bd6870d5bb9b7.png" alt=""></p></li></ul></li><li><p>满足如下条件使用关联模式</p><ul><li>两个有竞争关系的资源</li></ul></li><li>一个优先级较高，一个优先级较低</li></ul></li><li><p>链路: 统计从指定链路访问到本资源的请求时,对指定链路限流</p></li><li><p>两条请求链路</p><ul><li><p><code>/test1 =&gt; /common</code></p><ul><li><code>/test2 =&gt; /common</code></li></ul></li><li><p>案例</p><blockquote><p>需求: 有查询订单和创建订单业务,两者都需要查询到商品,针对从查询订单进入到查询商品的请求统计,并设置限流</p></blockquote></li><li><p>步骤</p><ol><li><p>在<code>OrderService</code>中添加一个<code>queryGoods</code>方法,不用实现业务</p></li><li><p>在<code>OrderController</code>中,改造<code>/order/query</code>端点,调用<code>OrderService</code>中的<code>queryGoods</code></p></li><li><p>在<code>OrderController</code>中添加一个<code>/orrder/save</code>的端点,调用<code>OrderService</code>的<code>queryGoods</code>方法</p></li><li><p>给<code>queryGoods</code>设置限流规则,从<code>/order/query</code>进入<code>queryGoods</code>的方法限制<code>QPS</code>必须小于<code>2</code></p><p><img src="https://img-blog.csdnimg.cn/a39e0fc854c24fcf9bf64469188f03cc.png" alt=""></p></li></ol></li><li><p>配置链路</p></li><li><p><code>sentinel</code>默认只标记<code>Controller</code>中的方法为资源,如果要标记其他方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@SentinelResource(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryGoods</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;queryGoods被调用.............&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Sentinel</code>默认会将<code>Controller</code>中的方法做<code>context</code>整合,导致链路模式的流控失效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭 context 整合</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>流控效果</p><blockquote><p>流控效果是指请求达到流控阈值时应该采取的措施</p></blockquote><ul><li><p>快速失败：达到阈值后,新的请求会被立即拒绝并抛出<code>FlowException</code>异常，是默认的处理方式</p></li><li><p><code>warn up</code>：预热模式,对超出阈值的请求同样是拒绝并抛出异常.但这种模式阈值会动态变化,从一个较小的值逐渐增加到最大阈值</p><blockquote><p>是应对服务冷启动的一种方案,请求阈值初始值是<code>threshold /(除号) coldFactory</code>，持续指定时长后,逐渐提高到<code>threshold</code>值，而<code>coldFactory</code>的默认值是<code>3</code></p><p><code>Eg:  设置QPS的 threshold 为 10</code>,预热时间<code>5s</code>,那么初始阈值就是<code>10/3</code>，也就是<code>3</code>,然后再<code>5s</code>后逐渐增长到<code>10</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/b10053c1acfc4bfbb5d8e046a131e42c.png" alt=""></p><ul><li><p>配置</p><p><img src="https://img-blog.csdnimg.cn/51eeae207a9a48539bb723170630f2b4.png" alt=""></p></li></ul></li><li><p>实时监控</p><p><img src="https://img-blog.csdnimg.cn/509cbae9482c453ab54eaf32b6934078.png" alt=""></p></li><li><p>排队等待: 让所有的请求按照先后次序排队执行,两个请求的间隔不能小于指定时长</p><blockquote><p>当请求超过<code>QPS</code>阈值时,快速失败和<code>warn up</code>会拒绝新的请求并抛出异常,而排队等待则是让所有请求进入一个队列中,然后按照阈值允许的时间间隔内依次执行,后来的请求必须等待前面执行完成,如果请求预期的等待时间超出最大时长,则会被拒绝</p><p><code>Eg: QPS=5</code>，意味着每<code>200ms</code>处理一个队列中的请求,<code>timeout=2000</code>意味着预期等待超过<code>2000ms</code>的请求会被拒绝并抛出异常</p></blockquote><p><img src="https://img-blog.csdnimg.cn/02127b5173384faf8ca6e0adc6dea120.png" alt=""></p></li></ul></li><li><p>热点参数限流</p><blockquote><p>之前的限流是统计访问某个资源的所有请求,判断是否超过<code>QPS</code>阈值,而热点参数限流是分别统计<code>参数值相同</code>的请求，判断是否超过<code>QPS</code>阈值</p></blockquote><p><img src="https://img-blog.csdnimg.cn/091fc39837fb4cc09f97001f1ee1f9ba.png" alt=""></p><ul><li><p>配置位置</p><p><img src="https://img-blog.csdnimg.cn/2bdad8e6f72341ca9ec40144c286fd6b.png" alt="热点参数配置位置"></p></li><li><p>重要参数解析</p><p><img src="https://img-blog.csdnimg.cn/406cf533fec043228d56c5f607aeb1d1.png" alt=""></p></li><li><p>高级选项参数</p><p><img src="https://img-blog.csdnimg.cn/f2383457589b483dba49a1d802efc508.png" alt=""></p><ul><li>如果参数值是<code>100</code>，则每<code>1s</code>允许的<code>QPS</code>为<code>10</code></li></ul></li></ul></li><li><p>如果参数值是<code>101</code>，则每<code>1s</code>允许的<code>QPS</code>为<code>15</code></p><blockquote><p>热点参数限流对默认的<code>SpringMVC</code>资源无效,需要通过<code>@SentinelResource</code>注解</p></blockquote></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sentinel-4"><ul><li><p>授权规则 </p><blockquote><p>授权规则 可以对调用方的来源总控制,有白名单和黑名单两种方式</p></blockquote><ul><li><p>白名单: 来源(<code>origin</code>)在白名单内的调用者允许访问</p></li><li><p>黑名单: 来源(<code>origin</code>)在黑名单内的调用者不允许访问</p><p><img src="https://img-blog.csdnimg.cn/837dd06c7fd34b8aa3631f394716e7d5.png" alt=""></p></li></ul></li><li><p>授权规则配置步骤</p><p><img src="https://img-blog.csdnimg.cn/ef7386c8c6ab4ffc9060a27f5f12797c.png" alt="配置授权规则"></p><ul><li><p>在<code>gateway</code>服务中,利用网关的过了不起添加名为<code>gateway</code>的<code>origin</code>头</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">        <span class="attr">default-filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span> <span class="comment"># 添加名为 origin 的请求头,值为: gateway</span></span><br></pre></td></tr></table></figure></li><li><p>从<code>request</code>获取一个名为<code>origin</code>的请求头,作为<code>origin</code>的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.coderitl.springcloud.sentinel;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParset</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取请求头</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 非空判断</span></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class="line">      origin = <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>添加配置</p><p><img src="https://img-blog.csdnimg.cn/b2c15fe95da54f05a186e1cb51616cba.png" alt=""></p></li></ul></li><li><p>限制访问来源</p><p>  <img src="https://img-blog.csdnimg.cn/acf1dc50085e4e0887d4c78341428f36.png" alt=""></p></li></ul></li><li><p>自定义异常结果</p><p><img src="https://i.imgloc.com/2023/06/23/VI2kCE.png" alt=""></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.coderitl.springcloud.handler;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelBlockHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest httpServletRequest,</span></span><br><span class="line"><span class="params">        HttpServletResponse httpServletResponse,</span></span><br><span class="line"><span class="params">        BlockException e)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;</span><br><span class="line">    <span class="comment">// 限流状态码都是 429</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">        msg = <span class="string">&quot;请求被限流了.........&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">        msg = <span class="string">&quot;请求被降级了.........&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">        msg = <span class="string">&quot;热点参数限流.........&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">        msg = <span class="string">&quot;请求没有权限!&quot;</span>;</span><br><span class="line">        <span class="comment">// 权限 401</span></span><br><span class="line">        status = <span class="number">401</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">      httpServletResponse.setStatus(status);</span><br><span class="line">      httpServletResponse</span><br><span class="line">          .getWriter()</span><br><span class="line">          .println(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;&quot;</span> + msg + <span class="string">&quot;\&quot;,\&quot;status\&quot;:&quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://img-blog.csdnimg.cn/e85c4b57440d449b9b0fd7b98d87ffb6.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sentinel-5"><ul><li><p>规则持久化模式(<code>3种</code>)</p></li><li><p>规则管理模式-<code>pull</code>模式</p><blockquote><p><code>pull</code>模式:控制台将配置的规则推送到<code>Sentinel</code>客户端，而客户端会将配置规则保存在本地文件或数据库中，以后会定时去本地文件或数据库中查询,更新本地规则</p></blockquote><p>  <img src="https://img-blog.csdnimg.cn/3e74e50cd9cb4e8490f4ce4e60f0fb57.png" alt="缺点:存在时效性"></p><ul><li><p>规则管理模式-<code>push</code>模式</p><blockquote><p><code>push</code>模式:控制台将配置规则推送到远程配置中心,例如<code>Nacos</code>，<code>Sentinel</code>客户端监听<code>Nacos</code>，获取配置变更的推送消息,完成本地配置更新|</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3789d34fe38f48beaf5ec07d3951c9df.png" alt="推荐"></p></li><li><p>原始方式(重启失效)</p></li></ul></li><li><p><code>Sentinel</code>规则持久化</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 order-service 中引入 sentinel 监听 nacos 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>nacos</code>地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 order-service 中的 application.yml 文件配置 nacos 地址以及监听的配置信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">sentinel:</span></span><br><span class="line">          <span class="attr">datasource:</span></span><br><span class="line">          <span class="attr">flow:</span></span><br><span class="line">              <span class="attr">nacos:</span></span><br><span class="line">                <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 地址</span></span><br><span class="line">                <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">              <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">                <span class="attr">ruleType:</span> <span class="string">flow</span> <span class="comment"># 还可以是 degrade authority param-flow</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><ul><li><p>软件安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p /coderitl/redis/conf</span></span><br><span class="line"><span class="comment"># 添加 redis 的配置文件</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/coderitl/redis/conf</span></span><br><span class="line"><span class="comment"># 将提供的配置文件内容写入 redis.conf 文件中</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">redis.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 注意宿主机是否已经安装 安装需要注意端口</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -p 6379:6379 \</span></span><br><span class="line"><span class="string">    --name redis \</span></span><br><span class="line"><span class="string">    --privileged=true \</span></span><br><span class="line"><span class="string">    -v /coderitl/redis/data/:/data \</span></span><br><span class="line"><span class="string">    -v /coderitl/redis/conf/redis.conf:/etc/redis/redis.conf \</span></span><br><span class="line"><span class="string">    -d redis:7 redis-server /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p><code>redis</code>配置获取</p><blockquote><p><a href="https://raw.githubusercontent.com/redis/redis/7.0/redis.conf">https://raw.githubusercontent.com/redis/redis/7.0/redis.conf</a></p></blockquote></li><li><p>修改以下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是 Redis 的保护模式（Protected Mode）设置。当设置为 no 时，表示禁用了保护模式，允许远程主机连接 Redis 服务器。如果设置为 yes，则只允许本地连接。</span></span><br><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 这是用来指定 Redis 服务器监听的地址。在这里被注释掉了，意味着 Redis 不会绑定到特定的地址上。这样设置会导致 Redis 在所有网络接口上监听连接，而不仅仅是本地接口</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"><span class="comment"># 这个配置项用于指定 Redis 是否以守护进程（daemon）的方式运行。在这里设置为 no，表示不以守护进程的方式运行 Redis。</span></span><br><span class="line"><span class="comment">#守护进程是在后台运行的进程，它不会和终端关联。当 Redis 以守护进程运行时，它会在后台默默地处理请求，并将日志输出到日志文件中，而不是终端。</span></span><br><span class="line"><span class="comment"># 如果将这个配置项设置为 yes，则 Redis 会以守护进程的方式运行。</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no(后台默默的处理请求)</span></span><br></pre></td></tr></table></figure></li><li><p>详细使用</p><div class="tabs" id="redis-持久化"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis-持久化-1">Redis-持久化</button></li><li class="tab"><button type="button" data-href="#redis-持久化-2">Redis集群</button></li><li class="tab"><button type="button" data-href="#redis-持久化-3">Redis分片集群</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis-持久化-1"><ul><li><p>持久化</p><ul><li><p><code>RDB</code></p><blockquote><p>全称是<code>Redis Database Backup file(Redis数据备份文件)</code>,也被叫做<code>Redis</code>数据快照。简单来说就是把内存中的所有数据都记录到磁盘中,当<code>Redis</code>实例故障重启后,从磁盘读取快照文件,恢复数据</p><p>快照文件称为<code>RDB</code>文件,默认是保存在当前运行目录</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">：6379&gt;</span>  <span class="string">save</span> <span class="comment"># 由 Redis 主进程来执行 RDB,会阻塞所有命令</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">：6379&gt;</span> <span class="string">bgsave</span> <span class="comment"># 开启子进程执行 RDB,避免主进程收到影响</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 停机时会执行一次 RDB</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/36124aac51044ed19ceec2500b446e79.png" alt=""></p></li><li><p><code>bgsave</code></p><p><img src="https://img-blog.csdnimg.cn/c7a63486711c43278d18bda1ee50f809.png" alt="bgsave基本流程"></p><ul><li>基本流程<ol><li><code>fork</code>主进程得到一个子进程,共享内存空间</li><li>子进程读取内存数据并写入新的<code>RDB</code>文件</li><li>用新<code>RDB</code>文件替换旧的<code>RDB</code>文件</li></ol></li></ul></li></ul></li><li><p><code>AOF</code>持久化</p><blockquote><p><code>AOF</code>全称为<code>Append Oble File（追加文件）</code>,<code>Redis</code>处理的每一个写命令都会记录在<code>AOF</code>文件,可以看作是命令日志文件</p></blockquote><ul><li><p><code>AOF</code>（存储了命令,执行命令恢复到原始数据）</p><p><img src="https://img-blog.csdnimg.cn/a26125201071467b88c21ac984612e7f.png" alt=""></p></li></ul><blockquote><p><code>AOF</code>默认是关闭的,需要修改<code>redis.conf</code>配置文件来开启<code>AOF</code></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用 RDB</span></span><br><span class="line"><span class="string">save</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 是否开启 AOF 功能 默认是 no</span></span><br><span class="line"><span class="string">appendonly</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># AOF 文件的名称</span></span><br><span class="line"><span class="string">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF 的命令记录的频率也可以通过 redis.conf 文件来配置 </span></span><br><span class="line"><span class="comment"># 表示没执行一次写命令 立即记录到 AOF 文件</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">always</span></span><br><span class="line"><span class="comment"># 写命令执行完先放入 AOF 缓冲区,然后表示每隔 1s 将缓冲区数据写到 AOF 文件,是默认方案</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># 写命令执行完先放入 AOF 缓冲区,由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgloc.com/2023/06/23/VI2RLb.png" alt=""></p><blockquote><p>因为是记录命令,<code>AOF</code>文件会比<code>RDB</code>文件大得多,而且<code>AOF</code>会记录对同一个<code>key</code>的多次操作,但只有最后一次写操作才有意义,铜鼓执行<code>bgrewriteaof</code>命令,可以让<code>AOF</code>文件执行重写功能,用最少的命令达到相同效果</p></blockquote><ul><li><p>执行重写<code>bgrewriteaof(redis 命令行执行)</code></p><p><img src="https://img-blog.csdnimg.cn/a92d71ebbe484f639d26c611947803f3.png" alt=""></p></li></ul><blockquote><p><code>Redis</code>也会在触发阈值时自动去重写<code>AOF</code>文件,阈值也可以在<code>redis.conf</code>中配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AOF 文件比上次文件 增长超过多少百分比则触发重写</span></span><br><span class="line"><span class="string">auto-aof-rewrite-percentage</span> <span class="number">100</span></span><br><span class="line"><span class="comment"># AOF 文件体积最小多大以上才可以触发重写</span></span><br><span class="line"><span class="string">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br></pre></td></tr></table></figure><ul><li><code>RDB</code>与<code>AOF</code>对比</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis-持久化-2"><ul><li><p>搭建集群</p><p><img src="https://img-blog.csdnimg.cn/65fa31b4a23a438aacb92c2fffc4ed27.png" alt="一主二从"></p><ul><li><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 tmp 目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="string">mkdir</span> <span class="number">7001  </span><span class="number">7002 </span><span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件(一键考培 参数 1 是数字 `一` )</span></span><br><span class="line"><span class="string">echo</span> <span class="number">7001 </span><span class="number">7002 </span><span class="number">7003</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-t</span> <span class="string">-n</span> <span class="number">1</span> <span class="string">cp</span> <span class="string">redis-6.2.4/redis.conf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改每个实例的端口、工作目录</p><blockquote><p>修改每个文件夹内的配置文件,将端口分别修改为<code>7001,7002,7003</code>，将<code>rdb</code>文件保存位置都修改自己所在目录</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">&#x27;s/6379/7001/g&#x27;</span> <span class="string">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7001\//g&#x27;</span> <span class="number">7001</span><span class="string">/redis.conf</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">&#x27;s/6379/7002/g&#x27;</span> <span class="string">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7002\//g&#x27;</span> <span class="number">7002</span><span class="string">/redis.conf</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">&#x27;s/6379/7003/g&#x27;</span> <span class="string">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7003\//g&#x27;</span> <span class="number">7003</span><span class="string">/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>修改每个实例的声明<code>IP</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟机本身有多个 ip 为了避免将来混乱 我们需要在 redis.conf 文件中指定每一个实例的绑定 ip 信息</span></span><br><span class="line"><span class="comment"># redis 实例的声明 IP</span></span><br><span class="line"><span class="string">replica-announce-ip</span> </span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  逐一修改 1a:数字 1 a:追加模式 (1a：第一行后追加)</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;1a replica-announce-ip 43.142.80.9&#x27;</span> <span class="number">7001</span><span class="string">/redis.conf</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;1a replica-announce-ip 43.142.80.9&#x27;</span> <span class="number">7002</span><span class="string">/redis.conf</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;1a replica-announce-ip 43.142.80.9&#x27;</span> <span class="number">7003</span><span class="string">/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键修改</span></span><br><span class="line"><span class="string">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="number">7001 </span><span class="number">7002 </span><span class="number">7003</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-I&#123;&#125;</span> <span class="string">-t</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;1a replica-announce-ip 43.142.80.9&#x27;</span> &#123;&#125;<span class="string">/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>启动三个窗口实例方便查看日志</p><ul><li><p>同时启动服务: <code>tmp/ redis-server 700x/redis.conf</code></p><p><img src="https://img-blog.csdnimg.cn/e1504661f7ba4a0f804344b600d15097.png" alt=""></p></li></ul></li></ul></li><li><p>开启主从关系</p><ul><li><p>有临时和永久两种模式</p><ul><li><p>修改配置文件(<code>永久生效</code>)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 redis.conf 中添加一行配置 replicaof | slaveof(5.0以前)命令</span></span><br><span class="line"><span class="string">slaveof</span> <span class="string">&lt;masterip&gt;</span> <span class="string">&lt;masterport&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>redis-cli</code>客户端连接到<code>redis</code>服务,执行<code>slaveof</code>命令(<code>重启后生效</code>)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">slaveof</span>  <span class="string">&lt;masterip&gt;</span> <span class="string">&lt;masterport&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前提条件所有主机配置如下内容(否则集群失败)</span></span><br><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">注释</span> <span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">protected-mode</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接测试 登录 7002 | 7003</span></span><br><span class="line"><span class="string">redis-cli</span> <span class="string">-p</span> <span class="number">7002</span></span><br><span class="line"><span class="comment"># 执行 slaveof =&gt; 7002 | 7003 成为 7001 的 slaveof(从机)</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span> <span class="number">7001</span></span><br></pre></td></tr></table></figure><ul><li><p>成功搭建集群环境（<code>命令: info replication 查看信息</code>）</p><p><img src="https://img-blog.csdnimg.cn/824cfb52383a4cc6ba77420b049abebf.png" alt=""></p></li></ul></li></ul></li></ul></li><li><p>数据同步原理</p><ul><li><p>数据同步原理（第一次是全量同步）</p><p>  <img src="https://img-blog.csdnimg.cn/c4f0ac4ffebd4273ae742eec7792f5db.png" alt=""></p></li><li><p>后续同步使用<code>replid</code></p><p>  <img src="https://img-blog.csdnimg.cn/a566d0e2d6b54e65b1a11dc5f4c8ed66.png" alt=""></p></li><li><p><code>master</code>如何判断<code>slave</code>是不是第一次来同步数据?</p><ul><li><code>Replication Id</code>:简称<code>replid</code>是数据集的标记,<code>id</code>一致则说明是同一数据集，每一个<code>master</code>都有唯一的<code>reolid</code>，<code>slave</code>则会继承<code>master</code>节点的<code>replid</code></li><li><code>offset</code>偏移量,随着记录在<code>repl_baklog</code>中的数据增多而逐渐增大,<code>slave</code>完成同步时也会记录当前同步的<code>offset</code>，如果<code>slave</code>的<code>offset</code>小于<code>master</code>的<code>offset</code>，说明<code>slave</code>数据落后于<code>master</code>，需要更新</li></ul><blockquote><p>因此<code>slave</code>做数据同步,必须向<code>master</code>声明自己的<code>replication Id</code>和<code>offset</code>，<code>master</code>才可以判断到底需要同步那些数据</p></blockquote></li><li><p>增量同步(<code>slave</code>重启后同步)</p><p><img src="https://img-blog.csdnimg.cn/8e5208eaecdf44468fd65c487e88cf95.png" alt="增量同步"></p><blockquote><p><code>repl_baklog</code>大小有上限,写满后会覆盖最早的数据,如果<code>slave</code>断开时间过久,导致尚未备份的数据被覆盖,则无法基于<code>log</code>做增量同步,只能再次全量同步</p></blockquote></li><li><p>优化<code>Redis</code>主从集群</p><ul><li><p>在<code>master</code>中配置<code>repl-diskless-sync yes</code>启用无磁盘复制,避免全量同步是的<code>磁盘 IO</code></p></li><li><p><code>Redis</code>单节点上的内存占用不要太大,减少<code>RDB</code>导致的过多磁盘<code>IO</code></p></li><li><p>适当提高<code>repl_baklog</code>的大小,发现<code>slave</code>宕机时尽快实现故障恢复,尽可能避免全量同步</p></li><li><p>限制一个<code>master</code>上的<code>slave</code>节点数量,如果实在是太多<code>slave</code>,则可以采用<code>主-从-从</code>链式结构,减少<code>master</code>压力</p><ul><li><p><code>主-从-从</code>链式</p><p><img src="https://img-blog.csdnimg.cn/9ee42d6043e54b0c8bd0eb5604f21dd0.png" alt=""></p></li></ul></li></ul></li><li><p>总结</p><ul><li>简述全量同步和增量同步的区别<ul><li>全量同步: <code>master</code>将完整的内存数据生成<code>RDB</code>，发送<code>RDB</code>到<code>slave</code>，后续命令则记录在<code>repl_baklog</code>，逐个发送给<code>slave</code></li><li>增量同步: <code>slave</code>提交自己的<code>offset</code>到<code>master</code>，<code>master</code>获取<code>repl_baklog</code>中从<code>offset</code>之后的命令给<code>slave</code></li></ul></li><li>什么时候执行全量同步<ul><li><code>slave</code>节点第一次连接<code>master</code>节点时</li><li><code>slave</code>节点断开时间太久,<code>repl_baklog</code>中的<code>offset</code>已经被覆盖时</li></ul></li><li>什么时候执行增量同步<ul><li><code>slave</code>节点断开又恢复,并且在<code>repl_baklog</code>中能找到<code>offset</code>时</li></ul></li></ul></li></ul></li><li><p>哨兵作用</p><blockquote><p><code>Redis</code>提供了哨兵<code>Sentinel</code>机制来实现主从集群的自动故障恢复</p></blockquote><ul><li><p>监控:<code>Sentinel</code>会不断检查你的<code>master</code>和<code>slave</code>是否按预期工作</p></li><li><p>自动故障恢复：如果<code>master</code>故障,<code>Sentinel</code>会将一个<code>slave</code>提升为<code>master</code>，当故障实例恢复后也已新的<code>master</code>为主</p></li><li><p>通知：<code>Sentinel</code>充当<code>Redis</code>客户端的服务发现来源,当集群发生故障转移时,会将最新信息推送给<code>Redis</code>的客户端 </p><p><img src="https://img-blog.csdnimg.cn/6f2dcd35c11e4dbfb3bfd289f65c073c.png" alt="哨兵"></p></li><li><p>服务状态监控</p><blockquote><p><code>Sentinel</code>基于心跳机制检测服务状态,每隔<code>1s</code>向集群的每个实例发送<code>ping</code>命令</p></blockquote><ul><li>主观下线: 如果某<code>sentinel</code>节点发现某实例未在规定时间响应,则认为该实例<code>主观下线</code></li><li>客观下线: 若超过指定数量(<code>quorum</code>)的<code>Sentinel</code>都认为该实例主观下线,则该实例客观下线,<code>quorum</code>值最好超过<code>sentinel</code>实例数量的一半</li></ul></li><li><p>选举新的<code>master</code></p><blockquote><p>一旦发现<code>master</code>故障,<code>Sentinel</code>需要在<code>slave</code>中选择一个作为新的<code>master</code>，选择依据如下:</p></blockquote><ol><li>首先会判断<code>slave</code>节点与<code>master</code>节点断开时间长短,如果超过指定值(<code>down-after-milliseconds * 10</code>)则会排除该<code>slave</code>节点</li><li>然后判断<code>slave</code>节点的<code>slave-prioity</code>值,越小优先级越高,如果是<code>0</code>则永不参与选举</li><li>如果<code>slave-prority</code>一样,则判断<code>slave</code>节点的<code>offset</code>值,越大说明数据越新,优先级越高</li><li>最后是判断<code>slave</code>节点的运行<code>id</code>大小,越小优先级越高</li></ol></li><li><p>如何实现故障转移</p><blockquote><p>当选中了其中一个<code>slave</code>为新的<code>master</code>后</p></blockquote><ol><li><p><code>Sentinel</code>给备选的<code>slave</code>节点发送<code>slaveof no one</code>命令,让该节点成为<code>master</code></p></li><li><p><code>Sentinel</code>给所有其他<code>slave</code>发送<code>slaveof ip poort</code>命令,让这些<code>slave</code>成为新<code>master</code>的从节点,开始新的<code>master</code>上同步数据</p></li><li><p>最后,<code>Sentinel</code>将故障节点标记为<code>slave</code>，当故障节点恢复后会自动成为新的<code>master</code>的<code>slave</code>节点</p><p><img src="https://img-blog.csdnimg.cn/5be0c5f0db5e434eb9e0bd17cbe6e3b2.png" alt=""></p></li></ol></li></ul></li><li><p>哨兵集群搭建</p><p><img src="https://img-blog.csdnimg.cn/ae437d3fa57d4968a1191e9b275d3691.png" alt="哨兵集群搭建图"></p><ul><li><p>创建目录</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">s1</span> <span class="string">s2</span> <span class="string">s3</span></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="string">cd</span> <span class="string">s1/</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">sentinel.conf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel.conf 文件内容 3份</span></span><br><span class="line"><span class="comment"># 是当前 sentinel 实例的端口</span></span><br><span class="line"><span class="string">port</span> <span class="number">27001</span> </span><br><span class="line"><span class="string">sentinel</span> <span class="string">announce-ip</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span>  </span><br><span class="line"><span class="comment"># 指定主节点信息</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span>  <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span>  <span class="number">7001 </span><span class="number">2</span>  </span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">mymaster</span> <span class="number">5000</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">mymaster</span> <span class="number">60000</span></span><br><span class="line"><span class="string">dir</span> <span class="string">&quot;/tmp/s1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>解读<ul><li><code>mymaster</code>:主节点名称,自定义</li><li><code>43.142.80.9   7001</code>:主节点的 <code>ip</code>和端口</li><li><code>2</code>选举<code>master</code>时的<code>quorum</code>值</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一: 逐个拷贝</span></span><br><span class="line"><span class="string">cp</span> <span class="string">s1/sentinel.conf</span> <span class="string">s2</span></span><br><span class="line"><span class="string">cp</span> <span class="string">s1/sentinel.conf</span> <span class="string">s3</span></span><br><span class="line"><span class="comment"># 方式二: 管道组合命令 一键拷贝</span></span><br><span class="line"><span class="string">echo</span> <span class="string">s2</span> <span class="string">s3</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-t</span> <span class="string">-n</span> <span class="number">1</span> <span class="string">cp</span> <span class="string">s1/sentinel.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 s2、s3 两个文件夹内的配置文件,将端口分别修改为 27002 、27003</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">&#x27;s/27001/27002/g&#x27;</span> <span class="string">-e</span> <span class="string">&#x27;s/s1/s2/g&#x27;</span> <span class="string">s2/sentinel.conf</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">&#x27;s/27001/27003/g&#x27;</span> <span class="string">-e</span> <span class="string">&#x27;s/s1/s3/g&#x27;</span> <span class="string">s3/sentinel.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6da5b25fa2b84f788fff095ae531768d.png" alt=""></p></li><li><p>启动<code>3个 redis</code>实例查看</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第 1 个</span></span><br><span class="line"><span class="string">redis-sentinel</span> <span class="string">s1/sentinel.conf</span></span><br><span class="line"><span class="comment"># 第 2 个</span></span><br><span class="line"><span class="string">redis-sentinel</span> <span class="string">s2/sentinel.conf</span></span><br><span class="line"><span class="comment"># 第 3 个</span></span><br><span class="line"><span class="string">redis-sentinel</span> <span class="string">s3/sentinel.conf</span></span><br></pre></td></tr></table></figure><ul><li><p><code>redis-sentinel</code>成功集群</p><p><img src="https://img-blog.csdnimg.cn/bf2f049c219145d1857c9a3cd277a810.png" alt=""></p></li></ul></li></ul></li><li><p><code>RedisTemplate</code>的哨兵模式</p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io.lettuce.core:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span> <span class="comment"># 指定 master 名称</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="comment"># 指定 redis-sentinel 集群信息</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:27001</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:27002</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:27003</span></span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloRedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">(<span class="meta">@PathVariable</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/set/&#123;key&#125;/&#123;value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">(<span class="meta">@PathVariable</span> String key, <span class="meta">@PathVariable</span> String value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success add key&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置主从读写分离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderitl.springcloud.redis.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisBeanConf</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="title function_">clientConfigurationBuilderCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientConfigurationBuilder -&gt;</span><br><span class="line">        clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>ReadFrom</code>是配置<code>Redis</code>的读取策略,是一个<code>枚举</code>,包括如下选择</p></blockquote><ul><li><p><code>MASTER</code>: 从主节点读取</p></li><li><p><code>MASTER_PREFFERRED</code>: 优先从<code>master</code>节点读取,<code>master</code>不可用才读取<code>replica</code></p></li><li><p><code>REPLICA</code>从<code>slave（replica）节点读取</code></p></li><li><p><code>REPLICA_PREFERRED</code>优先从<code>slave（replica）</code>节点读取,所有的<code>slave</code>都不可用才读取<code>master</code></p><ul><li><p>成功获取<code>Redis</code>数据</p><p><img src="https://img-blog.csdnimg.cn/ca771c7280a04ebcb7ea9244dd85d7ea.png" alt=""></p></li><li><p>连接日志信息</p><p><img src="https://img-blog.csdnimg.cn/7c481838ae284b489ea6cd55e08ebed2.png" alt=""></p></li></ul></li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis-持久化-3"><ul><li><p>结构</p><p><img src="https://img-blog.csdnimg.cn/a9984329a56247ab992416d62fcf4486.png" alt=""></p></li><li><p>分片集群结构</p><blockquote><p>主从和哨兵可以解决高可用,高并发读的问题,但是依然有两个问题没有解决</p></blockquote><ul><li>海量数据存储问题</li><li>高并发写问题</li></ul><blockquote><p>使用分片集群可以解决上述问题,分片集群特征:</p></blockquote><ul><li>集群中有多个<code>master</code>，每个<code>master</code>保存不同数据</li><li>每个<code>master</code>都可以由多个<code>slave</code>节点</li><li><code>master</code>之间通过<code>ping</code>检测彼此健康状态</li><li>客户端请求可以访问集群任意节点,最终都会被转发到正确节点</li></ul></li><li><p>搭建分片集群</p><ul><li><p>结构图<code>3主3从</code></p><p><img src="https://img-blog.csdnimg.cn/ef8ec4666dd24ef5a3bc6ddc42acef59.png" alt=""></p></li><li><p><code>ip</code>分配</p><p><img src="https://i.imgloc.com/2023/06/23/VI2IQN.png" alt=""></p></li><li><p>准备实例和配置</p><blockquote><p>删除之前的<code>7001,7002,7003</code>的目录,重新创建<code>7001,7002,7003,8001,8002,8003</code>目录</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tmp</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="string">mkdir</span> <span class="number">7001 </span><span class="number">7002 </span><span class="number">7003 </span><span class="number">8001 </span><span class="number">8002 </span><span class="number">8003</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>/tmp</code>下准备一个新的<code>redis.conf</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 开启集群功能</span></span><br><span class="line"><span class="attr">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 集群的配置文件名称 不需要我们创建,由 redis 自己维护</span></span><br><span class="line"><span class="attr">cluster-config-file</span> <span class="string">/tmp/6379/nodes.conf</span></span><br><span class="line"><span class="comment"># 节点心跳失败的超时时间</span></span><br><span class="line"><span class="attr">cluster-node-timeout</span> <span class="string">5000</span></span><br><span class="line"><span class="comment"># 持久化文件存放目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/tmp/6379</span></span><br><span class="line"><span class="comment"># 绑定地址</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 让 redis 后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 注册的实例 ip</span></span><br><span class="line"><span class="attr">replica-announce-ip</span> <span class="string">43.142.80.9</span></span><br><span class="line"><span class="comment"># 保护模式</span></span><br><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 数据库数量 </span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">/tmp/6379/run.log</span></span><br></pre></td></tr></table></figure></li><li><p>将这个<code>redis.conf</code>文件拷贝到每隔目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 /tmp 目录</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 执行拷贝</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>修改每个目录下的<code>redis.conf</code>，将其中的<code>6379</code>修改为与所在目录一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line"><span class="attr">printf</span> <span class="string">&#x27;%s\n&#x27;  7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i &#x27;s/6379/&#123;&#125;/g&#x27; &#123;&#125;/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span>  <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 一键启动所有服务</span></span><br><span class="line"><span class="attr">printf</span> <span class="string">&#x27;%s\n&#x27;  7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群</p><p><img src="https://img-blog.csdnimg.cn/b90d7609e2814c0887f4fa0609a06820.png" alt=""></p></li><li><p>如果需要关闭所有进程,可执行命令</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ps</span> <span class="string">-ef</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">redis</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐关闭方式</span></span><br><span class="line"><span class="string">printf</span> <span class="string">&#x27;%s\n&#x27;</span>  <span class="number">7001 </span><span class="number">7002 </span><span class="number">7003 </span><span class="number">8001 </span><span class="number">8002 </span><span class="number">8003</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-I&#123;&#125;</span> <span class="string">-t</span> <span class="string">redis-cli</span> <span class="string">-p</span> &#123;&#125;  <span class="string">shutdown</span></span><br></pre></td></tr></table></figure></li><li><p>创建集群</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">redis-cli</span> <span class="string">--cluster</span> <span class="string">create</span> <span class="string">--cluster-replicas</span> <span class="number">1</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7001</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7002</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7003</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8001</span>  <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8002</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8003</span> </span><br></pre></td></tr></table></figure><ul><li><p>参数说明</p><ul><li><p><code>redis-cli --cluster | ./redis-trib.rb</code>:代表集群操作命令</p></li><li><p><code>create</code>: 代表是创建集群</p></li><li><p><code>--cluster-replicas 1(数字1)</code>: 指定集群中每个<code>master</code>的副本个数为<code>1</code>,此时<code>节点总数 ➗ (replicas + 1)</code>得到的就是<code>master</code>数量,因此节点列表中的前<code>n</code>个就是<code>master</code>，其他节点都是<code>slave</code>节点,随机分配到不同<code>master</code></p><p><img src="https://img-blog.csdnimg.cn/bd93d541c577464facb2ae167d0c6206.png" alt="成功启动集群"></p></li></ul></li></ul></li><li><p>查看集群状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis-cli</span> <span class="string">-p 7001 cluster nodes</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9afe0a891f314a0e9f86e1d9bd22fece.png" alt="集群状态"></p></li></ul></li><li><p>散列插槽</p><blockquote><p><code>Redis</code>会把每一个<code>master</code>节点映射到<code>0~16383</code>个插槽上,查看集群信息时就能看到</p><p>数据<code>key</code>不是与节点绑定,而是与插槽绑定,<code>redis</code>会根据<code>key</code>的有效部分计算插槽值，分两种情况</p></blockquote><ul><li><code>key</code>中包含<code>{}</code>且<code>{}</code>中至少包含一个字符,<code>{}</code>中的部分是有效部分</li><li><code>key</code>中不包含<code>{}</code>,整个<code>key</code>都是有效部分</li></ul><blockquote><p>例如: <code>key</code>是<code>username</code>,那么根据计算,如果是<code>{xxx}username</code>则根据<code>xxx</code>计算,计算方式是利用<code>CRC16</code>算法得到一个<code>hash</code>值,然后对<code>16384</code>取余,得到的结果就是<code>slot</code>值</p></blockquote><ul><li><p><code>slot(redis-cli -c -p 7001) 参数: -c 至关重要</code>        </p><p><img src="https://img-blog.csdnimg.cn/12f9f0731fbd41739fd45e64bc1f69ee.png" alt=""></p></li></ul></li><li><p>总结</p><ul><li><p><code>Redis</code>如何判断某个<code>key</code>应该在那个实例?</p><ul><li>将<code>16384</code>个插槽分配到不同的实例</li><li>根据<code>key</code>的有效部分计算哈希值,对<code>16384</code>取余</li><li>余数作为插槽,寻找插槽所在实例即可</li></ul></li><li><p>如何将同一类数据固定的保存在同一个<code>Redis</code>实例</p><ul><li><p>这一类数据使用相同的有效部分,例如<code>key</code>都以<code>{typeId}为前缀</code></p><p><img src="https://img-blog.csdnimg.cn/e6949864259c42cabd535fb8b897965f.png" alt="数据固定的保存在同一个Redis实例"></p></li></ul></li><li><p>集群伸缩</p><blockquote><p>向集群中添加一个新的<code>master</code>节点,并向其中存储<code>num = 10</code></p></blockquote><ul><li><p>需求</p><ul><li><p>启动一个新的<code>redis</code>实例,端口为<code>7004</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="number">7004</span></span><br><span class="line"><span class="string">cp</span> <span class="string">redis.conf</span> <span class="number">7004</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;s/6379/7004/g&#x27;</span> <span class="number">7004</span><span class="string">/redis.conf</span></span><br><span class="line"><span class="string">redis-server</span> <span class="number">7004</span><span class="string">/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>7004</code>到之前的集群,并作为一个<code>master</code>节点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">redis-cli</span> <span class="string">--cluster</span> <span class="string">add-node</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7004</span>  <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7001</span></span><br></pre></td></tr></table></figure></li><li><p>给<code>7004</code>节点分配插槽,使得<code>num</code>这个<code>key</code>可以存储到<code>7004</code>实例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新分片</span></span><br><span class="line"><span class="string">redis-cli</span> <span class="string">--cluster</span> <span class="string">reshard</span> <span class="string">ip:port</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/86bca8a69a3547c89674ffaeb7dede52.png" alt="分配插槽"></p></li></ul></li></ul></li></ul></li><li><p>故障转移</p><p><img src="https://img-blog.csdnimg.cn/fe04c42d7dcb46a79d9bc90b44a94d6c.png" alt="故障转移"></p></li><li><p>数据迁移</p><p><img src="https://img-blog.csdnimg.cn/dca293b29e2447d8a67b227b18ed2d96.png" alt="数据迁移流程"></p><blockquote><p>利用<code>cluster failover</code>命令可以手动让集群中的某个<code>master</code>宕机,切换到执行<code>cluster failover</code>命令的这个<code>slave</code>节点,实现无感知的数据迁移</p></blockquote><ul><li>手动的<code>Failover</code>支持三种不同模式<ul><li>缺省：默认的流程,如图<code>1-6</code>步</li><li><code>force</code>:省略了对<code>offset</code>的一致性校验</li><li><code>takeover</code>直接执行第<code>5</code>步,忽略数据一致性,忽略数据一致性,忽略<code>master</code>状态和其他<code>master</code>的意见</li></ul></li></ul></li><li><p><code>RedisTemplate</code>访问分片集群</p><ul><li>引入<code>redis的starter</code>依赖</li><li>配置分片集群地址</li><li>配置读写分离</li></ul><blockquote><p>分片集群配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io.lettuce.core:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="comment"># 指定分片集群的每一个节点信息</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7001</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7002</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:7003</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8001</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8002</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">43.142</span><span class="number">.80</span><span class="number">.9</span><span class="string">:8003</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-系统使用</title>
      <link href="/2023/06/23/c697ebaa/"/>
      <url>/2023/06/23/c697ebaa/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Ubuntu系统-版本16安装配置"><a href="#Ubuntu系统-版本16安装配置" class="headerlink" title="Ubuntu系统-版本16安装配置"></a>Ubuntu系统-版本16安装配置</h3><h4 id="虚拟主机创建"><a href="#虚拟主机创建" class="headerlink" title="虚拟主机创建"></a>虚拟主机创建</h4><ul><li><p>下载<code>VMware</code></p></li><li><p>下载<code>Ubuntu</code>所需的镜像</p><blockquote><p><a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/ubuntu-16.04.7-desktop-amd64.iso?spm=a2c6h.25603864.0.0.23583decoI8SOQ">http://mirrors.aliyun.com/ubuntu-releases/16.04/ubuntu-16.04.7-desktop-amd64.iso?spm=a2c6h.25603864.0.0.23583decoI8SOQ</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/b4a3ac77e0cc4c7c8d4605eba44a24bd.png" alt="ISO下载"></p></li><li><p><code>VMware</code>创建新虚拟机</p><p><img src="https://img-blog.csdnimg.cn/1eb38be5ebe646f3bf621e7b6a4c4cf7.png" alt="其他未出现步骤选择默认"></p></li><li><p>配置镜像,移除打印机</p><p><img src="https://img-blog.csdnimg.cn/54376de36d144d19bef1b6cd049de06e.png" alt="配置下载的镜像文件"></p></li><li><p>显示了两行文字,此时关机</p><ul><li><p>执行如下</p><p><img src="https://img-blog.csdnimg.cn/62d5a074553b48638095c1c4fc0f1527.png" alt="进入固件"></p></li></ul></li><li><p>调整分辨率</p><p><img src="https://img-blog.csdnimg.cn/9fea54d7d0734aa18b1da830c622cc28.png" alt="通过左右键- style="zoom: 80%;" >切换到Boot->选择如下，按下shift +,实现置顶，之后F10保存,yes" /></p></li></ul><h4 id="Root-用户"><a href="#Root-用户" class="headerlink" title="Root-用户"></a>Root-用户</h4><ul><li><p>为<code>root</code>添加密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通用户</span></span><br><span class="line"><span class="attr">user</span>: <span class="string">coder-itl</span></span><br><span class="line"><span class="attr">password</span>: <span class="string">coder-itl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#  root设置密码 </span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">passwd root</span></span><br><span class="line"><span class="comment"># 输入新密码: root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 注销后登录 root 用户</span></span><br><span class="line"><span class="attr">logout</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="命令行界面字体大小"><a href="#命令行界面字体大小" class="headerlink" title="命令行界面字体大小"></a>命令行界面字体大小</h4><ul><li><p>当前大小</p><p><img src="https://img-blog.csdnimg.cn/9fafb091caa947bf8fcf266a76191e2b.png" alt="修改界面字体大小"></p></li><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">dpkg-reconfigure console-setup</span></span><br></pre></td></tr></table></figure><ol><li><p>输入上述命令后,进入字符集选择界面</p><p><img src="https://img-blog.csdnimg.cn/97c496d05cef483bb405f88c8d10c0e7.png" style="zoom:80%;" alt="选择UTF-8，回车进入下一步,ESC退回上一步"/></p></li><li><p>字符集选择</p><p><img src="https://img-blog.csdnimg.cn/ac1a7304308b4342b20b40155e5b5a1c.png" style="zoom:80%;" alt="上下键选择如下，之后回车进入下一步"/></p></li><li><p>控制台字体</p><p><img src="https://img-blog.csdnimg.cn/8b87f2a6e8a64c559a15cf2cf8f676e9.png" style="zoom:80%;" alt="选择VGA,回车进入下一步"/></p></li><li><p>最终字体大小选择</p><p><img src="https://img-blog.csdnimg.cn/e9b24c7671e541b996a9d8ae69bbee7c.png" style="zoom:80%;" alt="选择: 16x32，之后回车，进入命令行界面" /></p></li><li><p>修改使用情况</p><p><img src="https://img-blog.csdnimg.cn/b2fc60e7be734e29bc90b15125f355ed.png" alt="字体大小修正"></p></li></ol></li></ul><h4 id="SSH-服务"><a href="#SSH-服务" class="headerlink" title="SSH-服务"></a>SSH-服务</h4><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get install openssh-server</span></span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><p><img src="https://img-blog.csdnimg.cn/66267519417d4abdb935e7a8d160c679.png" alt="查看sshd服务"></p></li><li><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># 修改如下部分</span></span><br><span class="line"><span class="comment"># Port 22 =&gt; 2022 【如果22不可用时在修改】</span></span><br><span class="line"><span class="comment"># PermitRootLogin yes 启用 root 登录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保存后退出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>因为已经修改了<code>SSH</code>配置项,所以已经启动的<code>SSH</code>服务需要关闭</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 SSH 的进程编号</span></span><br><span class="line"><span class="attr">ps</span> <span class="string">-ef | grep sshd</span></span><br><span class="line"><span class="comment"># 之后关闭(结束进程)</span></span><br><span class="line"><span class="attr">kill</span> <span class="string">-9 进程ID</span></span><br></pre></td></tr></table></figure></li><li><p>重新启动<code>ssh</code>服务端</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/etc/init.d/ssh</span> <span class="string">start</span></span><br></pre></td></tr></table></figure></li><li><p>使用远程工具连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip 获取 /: 或者</span></span><br><span class="line"><span class="attr">ipconfig</span> <span class="string">/ ip addr</span></span><br><span class="line"><span class="comment"># 以 root 身份登录,回车之后输入 root 用户密码</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">root@192.168.2.3</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h5 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h5><ul><li><p>启动防火墙</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">ufw enable</span></span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">ufw disable</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h5><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apt-get</span> <span class="string">-y install make g++ gcc libpcre3 libpcrecpp* libpcre3-dev libssl-dev autoconf automake libtool libncurses5-dev libaio.dev ruby-dev rubygems vim</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li><p><code>IP</code>查看</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网卡标识 看到标识为: ens33(或者其他)</span></span><br><span class="line"><span class="attr">ipconfig</span> <span class="string">-a / ip addr</span></span><br></pre></td></tr></table></figure></li><li><p><code>ubuntu</code>网络的配置文件</p><p><img src="https://img-blog.csdnimg.cn/4606bb5a8a974e6d873efcd1f49eff8f.png" alt="sudo vi /etc/network/interfaces"></p></li><li><p>修改<code>IP</code>为静态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络所在的配置文件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">vim /etc/network/interface</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加内容  </span></span><br><span class="line"><span class="comment"># The primary network interface</span></span><br><span class="line"><span class="attr">auto</span> <span class="string">enp0s3</span></span><br><span class="line"><span class="comment">#iface enp0s3 inet dhcp</span></span><br><span class="line"><span class="attr">iface</span> <span class="string">enp0s3 inet static</span></span><br><span class="line"><span class="attr">address</span> <span class="string">192.168.1.10</span></span><br><span class="line"><span class="attr">netmask</span> <span class="string">255.255.255.0</span></span><br><span class="line"><span class="attr">gateway</span> <span class="string">192.168.1.1</span></span><br><span class="line"><span class="attr">dns-nameservers</span> <span class="string">192.168.1.2 192.168.1.3</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 DNS</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nameserver</span> <span class="string">192.168.1.1 # DNS服务器地址</span></span><br><span class="line">    <span class="attr">nameserver</span> <span class="string">114.114.114.114 # 备用DNS地址</span></span><br><span class="line">    <span class="attr">nameserver</span> <span class="string">8.8.8.8 # 备用DNS地址</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使得如上配置生效</span></span><br><span class="line"><span class="attr">/etc/init.d/networking</span> <span class="string">restart</span></span><br><span class="line"><span class="comment"># 同作用(新版)</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start networking</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b00356a992b248ffbe24ab7811081cd9.png" alt="重启网络"></p></li></ul><h4 id="VMware-Tools"><a href="#VMware-Tools" class="headerlink" title="VMware-Tools"></a>VMware-Tools</h4><ul><li><p>安装后的作用</p><blockquote><p>可以直接在虚拟机中拖拽文件到宿主机(<code>windows...</code>)，也可以将宿主机文件直接拖拽到虚拟机内部使用</p></blockquote></li><li><p>选择如下</p><p><img src="https://img-blog.csdnimg.cn/dd115ab205a647998cab29f70c5add94.png" alt="虚拟机-安装VMware Tools"></p></li><li><p>将压缩文件复制到主目录(<code>home</code>)</p><p><img src="https://img-blog.csdnimg.cn/1cf1a33069a64cd080a73fbf5ec55234.png" alt="复制"></p></li><li><p>在主目录下解压</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="attr">tar</span> <span class="string">-zxvf  VMwareTools-10.3.22-15902021.tar.gz</span></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">vmware-tools-distrib</span></span><br><span class="line"><span class="comment"># 执行如下文件</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">./vmware-install.pl</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>所在位置</p><p><img src="https://img-blog.csdnimg.cn/a48561e430fc4f909595f0d26a540044.png" alt="所在位置"></p></li><li><p>执行命令</p><p><img src="https://img-blog.csdnimg.cn/2e2a8e75b5c444ff9dbdc539b42f8d8b.png" alt="执行"></p></li></ul><blockquote><p>回车后输入密码（输入密码不会显示，输完直接回车），他就会进行安装，最开始遇到个<code>yes/no</code>，输<code>yes</code>，然后后面一遇到<code>yes</code>就输<code>yes</code>，其他一律回车。</p></blockquote></li></ul><h4 id="软件源镜像更换"><a href="#软件源镜像更换" class="headerlink" title="软件源镜像更换"></a>软件源镜像更换</h4><ul><li><p>更换下载源</p><p><img src="https://img-blog.csdnimg.cn/ae18a3d44c7149f0bc614b6029f3b1fe.png"  alt="图形界面的切换方式" style="zoom:50%;" /></p></li><li><p>清华源的更换</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统版本查看</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">/etc/issue</span></span><br><span class="line"> <span class="attr">Ubuntu</span> <span class="string">16.04.7 LTS \n \l</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Ubuntu</code> 的软件源配置文件是 <code>/etc/apt/sources.list</code>。将系统自带的该文件做个备份</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">cp /etc/apt/sources.list /etc/apt/sources.list.backup</span></span><br></pre></td></tr></table></figure><ul><li><p>自动切换</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">sed -i &quot;s@http://.*archive.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot; /etc/apt/sources.list</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">sed -i &quot;s@http://.*security.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot; /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure></li><li><p>更新</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get -y upgrade</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>阿里云源切换</p><ul><li><p>备份</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以创建一个空文件名称为: sources.list </span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">cp /etc/apt/sources.list /etc/apt/sources.list.backup</span></span><br></pre></td></tr></table></figure></li><li><p>编辑文件<code>sources.list</code>,添加如下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deb</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb-src</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb-src</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb-src</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb-src</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="attr">deb-src</span> <span class="string">http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></li><li><p>添加阿里云源的<code>DNS</code></p><ul><li><p>临时生效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/resolv.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加如下</span></span><br><span class="line"><span class="attr">nameserver</span> <span class="string">ip【ping mirrors.aliyun.com/ubuntu/ =&gt; ip】</span></span><br></pre></td></tr></table></figure></li><li><p>永久生效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/network/interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns-nameserver</span> <span class="string">ip【ping mirrors.aliyun.com/ubuntu/ =&gt; ip】</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>更新</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="配置时区与时间"><a href="#配置时区与时间" class="headerlink" title="配置时区与时间"></a>配置时区与时间</h4><ul><li><p>时区选择</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tz: Time Zone select: 选择</span></span><br><span class="line"><span class="attr">tzselect</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c066f2f363fb4b69ac60b5e07f2a0d85.png" alt="出现如下"></p><blockquote><p>按顺序出现依次输入<code>4 、9、 1、 1</code></p></blockquote></li><li><p>时间同步</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="attr">apt-get</span> <span class="string">-y install ntp ntpdate</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="attr">ntpdate</span> <span class="string">-u ntp1.aliyun.com</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/62d84b019104447f92c9afc810cfbea9.png" alt="实现时间同步"></p></li><li><p>写入硬件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在复制后集群时可以保持一致</span></span><br><span class="line"><span class="attr">hwclock</span> <span class="string">--systohc</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h4><h5 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h5><ul><li><p>切换用户身份</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">通过</span> <span class="string">sudo su -，切换到 root 用户</span></span><br></pre></td></tr></table></figure></li><li><p>或在每一个命令前，加上<code>sudo</code>，用来临时提升权限</p></li></ul><h5 id="MYSQL-5-7"><a href="#MYSQL-5-7" class="headerlink" title="MYSQL-5.7"></a>MYSQL-5.7</h5><ul><li><p>下载<code>apt</code>仓库文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 apt 仓库的安装包，Ubuntu 的安装包是 .deb 文件</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>apt</code>仓库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 dpkg 命令安装仓库</span></span><br><span class="line"><span class="attr">dpkg</span> <span class="string">-i mysql-apt-config_0.8.12-1_all.deb</span></span><br></pre></td></tr></table></figure><blockquote><p>弹出框中选择：<code>ubuntu bionic</code> （<code>Ubuntu18.04</code>系统的代号是<code>bionic</code>，选择<code>18.04</code>的版本库用来安装）</p><p><code>Ubuntu 16.04 (LTS)</code>代号为<code>xenial</code>  未出现 。</p></blockquote><ul><li><p>步骤一</p><p><img src="https://img-blog.csdnimg.cn/bb2c24cd87bb4d54af9fc217fd8c5310.png" alt="出现可视化界面,选择第一个,选择MYSQL5.7，之后选择OK"></p></li><li><p>步骤二</p><p><img src="https://img-blog.csdnimg.cn/303114e03c534447a22fff4f5d227af3.png" alt="OK之后回车,可以选择清屏"></p></li></ul></li><li><p>更新<code>apt</code>仓库的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先导入仓库的密钥信息</span></span><br><span class="line"><span class="attr">apt-key</span> <span class="string">adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span></span><br><span class="line"><span class="comment"># 更新仓库信息</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">update</span></span><br></pre></td></tr></table></figure></li><li><p>检查是否成功配置<code>MySQL5.7</code>的仓库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apt-cache</span> <span class="string">policy mysql-server</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2c9900fa5819417f9cad0af263c3532a.png" alt="如图所示字样即为成功"></p></li><li><p>安装<code>MySQL5.7</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install -f -y mysql-client=5.7* mysql-community-server=5.7*</span></span><br></pre></td></tr></table></figure><blockquote><p>弹出框中输入<code>root</code>密码并选择<code>ok</code>，密码任意,输入两次，输入完毕一次过程中需要按下回车确认</p><p><img src="https://img-blog.csdnimg.cn/a71060cdc53d46fd846779a4f438685a.png" alt=""></p></blockquote></li><li><p>启动<code>MySQL</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/etc/init.d/mysql</span> <span class="string">start# 启动</span></span><br><span class="line"><span class="attr">/etc/init.d/mysql</span> <span class="string">stop# 停止</span></span><br><span class="line"><span class="attr">/etc/init.d/mysql</span> <span class="string">status# 查看状态</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/17985bb544464bfd933433ba00997e4e.png" alt="当前状态"></p></li><li><p><code>对MySQL</code>进行初始化</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line"><span class="attr">mysql_secure_installation</span></span><br><span class="line"><span class="comment"># 可以通过which命令查看到这个自带程序所在的位置</span></span><br><span class="line"><span class="attr">root@DESKTOP-Q89USRE</span>:<span class="string">~# which mysql_secure_installation</span></span><br><span class="line"><span class="attr">/usr/bin/mysql_secure_installation</span></span><br></pre></td></tr></table></figure><ul><li><p>输入密码</p><p><img src="https://img-blog.csdnimg.cn/a88cca9516cc445fb9a9bdb0f8d848ab.png" alt="输入密码"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车</p><p><img src="https://img-blog.csdnimg.cn/643124342b0a4f409be42ad2a6e3a72e.png" alt="本次选择回车"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车</p></li><li><p>是否进制<code>root</code>用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车</p><p><img src="https://img-blog.csdnimg.cn/33ed593c10de477fae9ac03acd0fbf2f.png" alt="不禁止"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车</p><p><img src="https://img-blog.csdnimg.cn/0296d06b0574483aaf9bf71f176132eb.png" alt="不移除测试数据库"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车</p><p><img src="https://img-blog.csdnimg.cn/5611f0afc5d140ab9ee82dc2a6b3555e.png" alt="输入y"></p></li><li><p>登陆<code>MySQL</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">-uroot -p</span></span><br><span class="line"><span class="comment"># 输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d17776b4d3a94847b54a6a31e7387b71.png" alt="pwd:root"></p></li></ul></li></ul><h5 id="MYSQL-8-0"><a href="#MYSQL-8-0" class="headerlink" title="MYSQL-8.0"></a>MYSQL-8.0</h5><ol><li><p>如果已经安装过<code>MySQL5.7</code>版本，需要卸载仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span> </span><br><span class="line">/etc/init.d/mysql stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure></li><li><p>更新<code>apt</code>仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4cba44e2652c4cd08f49dd3d9d380a4b.png" alt="重新配置(执行5.7版本apt update之前的内容)"></p></li><li><p>安装<code>mysql</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p><img src="https://img-blog.csdnimg.cn/695a79252d164b6da0d83f9852c8ad8f.png" alt="密码强度"></p></li><li><p>输入<code>root</code>密码</p><p><img src="https://img-blog.csdnimg.cn/83dace2bd43849f7b733f16b0ca3722c.png" alt="后续步骤中，由于上述安装过程出现过输入root密码,所以无法直接通过mysql登入"></p></li><li><p>启动MySQL</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">status mysql</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start mysql</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0eadaae198c847adbf70b3c44a7dab78.png" alt="检查状态"></p></li><li><p>查看当前安装的版本</p><p><img src="https://img-blog.csdnimg.cn/00e1f77bd9864ed0b4470e9a6b20c734.png" alt="检查是否更新"></p></li><li><p>登陆<code>MySQL</code>设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -proot</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9f65ee3def9f499d9bcf29b8db7daa21.png" alt="再次确定版本"></p></li><li><p>设置密码【可选】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出<code>MySQL</code>控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>对<code>MySQL</code>进行初始化【可选】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ul><li><p>步骤一</p><p><img src="https://img-blog.csdnimg.cn/b0434607874f40e0b52264a9a003c38f.png" alt="未出现则为默认回车,本次输入:y【同5.7】"></p></li><li><p>步骤二</p><p><img src="https://img-blog.csdnimg.cn/2ccb9f6545414a3bb4d90a2e376b6025.png" alt="不移除"></p></li></ul></li></ol><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><ul><li><p>纯命令行模式</p><p><img src="https://img-blog.csdnimg.cn/c0fdc097730f4b3eb55cd91beb4433f0.png" alt="命令行模式(ctrl+alt+F5)"></p></li><li><p>切换到图形化界面:<code>ctrl+alt+F7</code></p></li><li><p>独占模式</p><p><img src="https://img-blog.csdnimg.cn/678f3247033440cb86f6dfe23a27d082.png" alt="全屏显示,隐藏导航栏,按下ctrl+alt退出独占模式"></p></li><li><p>打开软件后全屏的退出方法</p><ul><li><p>步骤一</p><p><img src="https://img-blog.csdnimg.cn/d0b42f8e2d3d433d8d72bba31f3b7ff9.png" alt="打开主文件夹后需要关闭,只需要将鼠标移动到左上角位置即可点击关闭"></p></li><li><p>步骤二</p><p><img src="https://img-blog.csdnimg.cn/ace44a6e869241e4a611d33bf8239a48.png" alt="其他应用相同，关闭后回到主屏幕"> </p></li></ul></li></ul><h3 id="Ubuntu系统-版本22安装配置"><a href="#Ubuntu系统-版本22安装配置" class="headerlink" title="Ubuntu系统-版本22安装配置"></a>Ubuntu系统-版本22安装配置</h3><h4 id="虚拟主机创建-1"><a href="#虚拟主机创建-1" class="headerlink" title="虚拟主机创建"></a>虚拟主机创建</h4><ul><li><p>官网</p><blockquote><p><a href="https://ubuntu.com/">https://ubuntu.com/</a></p></blockquote></li><li><p>下载镜像</p><p><img src="https://img-blog.csdnimg.cn/e81c022b81d8439f8da18e9ed178ae16.png" alt="使用Ubuntu Server"></p><blockquote><p>镜像文件: <a href="https://mirrors.cnnic.cn/ubuntu-releases/22.04.1/ubuntu-22.04.1-live-server-amd64.iso">https://mirrors.cnnic.cn/ubuntu-releases/22.04.1/ubuntu-22.04.1-live-server-amd64.iso</a></p></blockquote></li><li><p><code>VMWare虚拟机</code>创建流程</p><ul><li><p>新建虚拟机</p></li><li><p>选择<code>自定义【高级】</code></p></li><li><p>下一步<code>...</code></p></li><li><p>选择镜像文件</p><p><img src="https://img-blog.csdnimg.cn/8133ce76572e4373b5594fbda1f855aa.png" alt="添加镜像"></p></li><li><p>命名与目录位置选择</p><p><img src="https://img-blog.csdnimg.cn/020d5994240441b8bdad1031343f0ae8.png" alt="目录位置选择"></p></li><li><p>内存大小不要超过物理内存<code>【电脑本身的内存大小】</code></p></li><li><p><code>ip</code>地址的配置：<code>NAT</code></p><ul><li><p>桥接模式：模拟的真实主机,使虚拟机能被分配到一个网络中独立的<code>IP</code>,所有的网络功能完全和在网络中的真实机器一样</p></li><li><p>网络地址转换<code>【简称 NAT】</code>: 主机网卡直接与虚拟<code>NAT</code>设备链接,并且通过虚拟<code>DHCP</code>服务器为其分配<code>IP</code>地址,这样多台虚拟机就形成一套完整的虚拟网络,也是推荐使用的网络配置</p></li><li><p>仅主机模式: 让虚拟机处于一个独立的网络环境下,无法直接进行互联网访问,但是可以通过操作系统提供的链接共享功能实现上网,相当于实现了一个私有局域网</p></li><li><p>不使用网络连接: 在虚拟机中不进行虚拟网卡的安装,无法实现网络访问</p><p><img src="https://img-blog.csdnimg.cn/b71289391a734f3985b0492b15c0b613.png" alt="NAT-模式"></p></li><li><p>下一步<code>【...】</code></p></li></ul></li></ul></li></ul><ul><li><p>开启<code>IPV6</code></p><ul><li><p>步骤一</p><p><img src="https://img-blog.csdnimg.cn/d12ccacb2de8414dab2e3b4f31d4f23e.png" alt="虚拟网络(①)"></p></li><li><p>步骤二</p><p><img src="https://img-blog.csdnimg.cn/0b811babe4ce40d4bc031b10c2224d0f.png" alt="NAT设置(②)"></p></li><li><p>步骤三</p><p><img src="https://img-blog.csdnimg.cn/baecf3d5bc4e411c92455bf3bbc27d8a.png" alt="开启(③)"></p></li></ul></li></ul><h4 id="启动-安装"><a href="#启动-安装" class="headerlink" title="启动-安装"></a>启动-安装</h4><ul><li><p>语言<code>【英语】</code></p><p><img src="https://img-blog.csdnimg.cn/d1b3d3cb0e674c89a80e23c3b927b9c1.png" alt="语言【英语】,之后回车"></p></li><li><p><code>Continue without updating</code></p></li><li><p>键盘布局选择默认<code>Done</code></p></li><li><p>选择<code>Ubuntu Server</code></p></li><li><p>网络环境选择默认<code>Done</code></p></li><li><p>代理选择默认<code>Done</code></p></li><li><p>仓库镜像源配置，此时选择<code>Done</code>,<code>【TODO: 后期修改】</code></p></li><li><p>配置当前要使用的磁盘,选择默认<code>Done</code></p></li><li><p>随后要询问采用的存储的配置,进行磁盘的挂载,而后进行一些基本的目录配置,选择默认<code>Done</code></p></li><li><p>配置管理员账户</p><p><img src="https://img-blog.csdnimg.cn/838ccaa197dd4d4c9799a5c9438a4470.png" alt="管理员账户"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">用户名</span>: <span class="string">coder-itl</span></span><br><span class="line"><span class="attr">服务名</span>: <span class="string">localhost</span></span><br><span class="line"><span class="attr">用户名</span>: <span class="string">coder-itl</span></span><br><span class="line"><span class="attr">密码</span>: <span class="string">coder-itl</span></span><br><span class="line"><span class="attr">确认密码</span>: <span class="string">coder-itl</span></span><br></pre></td></tr></table></figure></li><li><p>询问安装时是否要进行<code>OpenSSH</code>服务的安装,为了以后的远程管理方便,选择安装</p><p><img src="https://img-blog.csdnimg.cn/cef76a745b214573b9a7a2f47a642446.png" alt="空格键进行选择【】内出现 x 即为选择上"></p></li><li><p>一些额外服务配置,通过上下键之间选择<code>Done</code></p><p><img src="https://img-blog.csdnimg.cn/8457b650530c4222a6e8206147e1232e.png" alt="Done"></p></li><li><p>随后就进入到系统的安装环节,<code>慢慢等待....</code></p><p><img src="https://img-blog.csdnimg.cn/f1a9043f399d4f98995048fc12c31341.png" alt="安装中....."></p></li><li><p>安装结束后,选择重新启动当前系统</p><p><img src="https://img-blog.csdnimg.cn/7543e71511d14e3d8de9e749a7074533.png" alt="注意不是取消并重启,等待时间比较长,出现如下Reboot Now"></p><blockquote><p>如果重启过程中出现<code>Failed /cdrom</code>，回车一下</p></blockquote></li><li><p>出现登录字样,输入安装时配置的用户信息，密码输入时不会回显<code>不会显示</code></p><p><img src="https://img-blog.csdnimg.cn/dcae883f47f14efbab260664ec66b8e2.png" alt="成功登录"></p></li><li><p>启用<code>root</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 root 用户密码</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">passwd root</span></span><br><span class="line"><span class="comment"># 之后输入密码【自定义】</span></span><br><span class="line"><span class="attr">root</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d2ff0b0dcadd41f29cd8bd913e4f622d.png" alt="密码输入三次,第一次是普通管理员密码(当前登录用户密码),第二次是新密码,第三次确认密码"></p></li><li><p>注销当前登录账户<code>coder-itl</code>，切换<code>root</code>账户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注销</span></span><br><span class="line"><span class="attr">logout</span></span><br><span class="line"><span class="comment"># 使用 root 登录权限比较高,可以减少输入命令过程中加入 sudo </span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/69a8a6c8d06f4274b33bdd9012cbfc3a.png" alt="输入root登录"></p></li></ul><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><ul><li><p>查看<code>sshd</code>服务是否启动</p><p><img src="https://img-blog.csdnimg.cn/235e78ee9c7a4443ab3fbee38faff4f9.png" alt="systemctl status sshd"></p></li><li><p><code>root</code>连接被拒绝</p><p><img src="https://img-blog.csdnimg.cn/f6fa104056064aed9143bd390eeb9c5b.png" alt="此时root连接拒绝"></p><ul><li><p>解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改如下配置文件中的配置</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 允许 root 登录，修改后,保存退出</span></span><br><span class="line"><span class="attr">PermitRootLogin</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 重启 sshd 服务</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart sshd [新]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 旧</span></span><br><span class="line"><span class="attr">/etc/init.d/ssh</span> <span class="string">stop</span></span><br><span class="line"><span class="attr">/etc/init.d/ssh</span> <span class="string">start</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="配置静态-IP"><a href="#配置静态-IP" class="headerlink" title="配置静态 IP"></a>配置静态 IP</h4><ul><li><p>新版本发生变化</p></li><li><p>配置文件位置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/netplan/00-installer-config.yaml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ubuntu 可以使用文本编辑器 gedit 缺点: 中文无法输入</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">gedit /etc/netplan/00-installer-config.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络配置文件内容</span></span><br><span class="line"><span class="attr">network:</span> <span class="comment"># 网络的配置</span></span><br><span class="line">  <span class="attr">ethernets:</span> <span class="comment"># 以太网的配置</span></span><br><span class="line">    <span class="attr">ens33:</span> <span class="comment"># 网卡的编号</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span> <span class="comment"># 不使用 DHCP 进行 IPV4 的配置</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">false</span> <span class="comment"># 不使用 DHCP 进行 IPV46 的配置</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.247</span><span class="number">.130</span><span class="string">/24</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">fe80::20c:29ff:fed4:a289/64</span> <span class="comment"># ip addr 获取 ipv6</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.247</span><span class="number">.2</span> <span class="comment"># 网关地址</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>,<span class="number">180.76</span><span class="number">.76</span><span class="number">.76</span>,<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>] <span class="comment"># DNS</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/194cce1f50ce44adba87584774d6afa0.png" alt="IPV6"></p></li><li><p>重新启用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netplan</span> <span class="string">apply</span></span><br></pre></td></tr></table></figure></li><li><p>测试网络状态</p><p><img src="https://img-blog.csdnimg.cn/6d3fffcac823402f8f02033d91051654.png" alt="成功"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MinIO-高性能对象存储</title>
      <link href="/2023/06/23/713941a0/"/>
      <url>/2023/06/23/713941a0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><ul><li><p>安装</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码长度有限制 【版本比较旧】</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d \</span></span><br><span class="line"><span class="string">    -p 9000:9000 \</span></span><br><span class="line"><span class="string">    -p 50000:50000 \</span></span><br><span class="line"><span class="string">    --name minio \</span></span><br><span class="line"><span class="string">    --restart=always \</span></span><br><span class="line"><span class="string">    -e &quot;MINIO_ROOT_USER=admin&quot; \</span></span><br><span class="line"><span class="string">    -e &quot;MINIO_ROOT_PASSWORD=12345678&quot; \</span></span><br><span class="line"><span class="string">    -v /mnt/data:/data \</span></span><br><span class="line"><span class="string">    -v /mnt/config:/root/.mino \</span></span><br><span class="line"><span class="string">minio/minio server --console-address &quot;:50000&quot; /data</span></span><br></pre></td></tr></table></figure><ul><li><p>访问<code>minio</code>系统服务</p><blockquote><p>虚拟机IP:50000(port)</p><p><a href="http://192.168.32.128:50000/">http://192.168.32.128:50000/</a></p></blockquote><p><img src="https://i.imgloc.com/2023/06/26/VNXV9J.png" alt="MinIo-可视化界面"></p></li></ul></li></ul><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p><code>bucket</code>-类比于文件系统中的目录</p><p><img src="https://i.imgloc.com/2023/06/26/VNXWab.png" alt="创建bucket"></p></li><li><p><code>Object</code>-类比文件系统的文件</p></li><li><p><code>Keys</code>-类比文件名</p></li></ul><h4 id="MinIo-FileUpLoad"><a href="#MinIo-FileUpLoad" class="headerlink" title="MinIo-FileUpLoad"></a>MinIo-FileUpLoad</h4><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>常见的媒体格式类型如下</p><ul><li><code>text/html</code>： <code>HTML</code>格式</li><li><code>text/plain</code> ：纯文本格式</li><li><code>text/xml</code>：<code>XML</code>格式</li><li><code>image/gif</code> ：<code>gif</code>图片格式</li><li><code>image/jpeg</code> ：<code>jpg</code>图片格式</li><li><code>image/png</code>：<code>png</code>图片格式</li></ul></li><li><p>测试文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.minio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinioDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\Code\\minio-demo\\src\\main\\resources\\minio.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个 minio 的连接信息,创建一个 minio 的客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder().credentials(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345678&quot;</span>).endpoint(<span class="string">&quot;http://192.168.32.128:9000&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;minio.png&quot;</span>) <span class="comment">// 文件名字</span></span><br><span class="line">                    .contentType(<span class="string">&quot;image/png&quot;</span>) <span class="comment">// 文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;coderitl&quot;</span>) <span class="comment">// 在 minio 创建的 bucket 名称</span></span><br><span class="line">                    .stream(fis, fis.available(), -<span class="number">1</span>).build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取访问路径: http://192.168.32.128:9000/桶名称/文件名</span></span><br><span class="line">            System.out.println(<span class="string">&quot;http://192.168.32.128:9000/coderitl/minio.png&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgloc.com/2023/06/26/VNXCBz.png" alt=""></p></li><li><p>权限问题</p><p><img src="https://i.imgloc.com/2023/06/26/VNXlJw.png" alt="默认R/W(可读写)"></p></li></ul><h4 id="封装MinIo为Starter"><a href="#封装MinIo为Starter" class="headerlink" title="封装MinIo为Starter"></a>封装MinIo为Starter</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-常用实现总结</title>
      <link href="/2023/06/23/cf13485a/"/>
      <url>/2023/06/23/cf13485a/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="后端常用实现"><a href="#后端常用实现" class="headerlink" title="后端常用实现"></a>后端常用实现</h3><h4 id="数据库的逻辑删除"><a href="#数据库的逻辑删除" class="headerlink" title="数据库的逻辑删除"></a>数据库的逻辑删除</h4><ul><li><p><code>MybatisPlus</code></p><ul><li><p>数据表添加字段<code>is_deleted</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 0: 代表该数据未被删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [table_name] <span class="keyword">add</span> <span class="keyword">column</span> is_deleted tinyint <span class="keyword">default</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zhxy.entity.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 添加逻辑删除字段</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="comment">// 数据库字段映射</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以进行自定义值为删除的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一下内容已经为默认配置,可忽略</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure></li><li><p>底层<code>sql</code>的执行语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除:</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> deleted<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> deleted<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="日期自动填充"><a href="#日期自动填充" class="headerlink" title="日期自动填充"></a>日期自动填充</h4><ul><li><p>数据库中日期字段的选择【只适用与<code>MySQL</code>】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- datetime: 以&#x27;YYYY-MM-DD HH:MM:SS&#x27;的格式存储日期和时间</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [table_name] <span class="keyword">add</span> <span class="keyword">column</span> create_time datetime <span class="keyword">default</span> <span class="built_in">current_timestamp</span>;</span><br><span class="line"><span class="comment">-- current_timestamp: 这是设置新列的默认值为当前时间戳</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [table_name] <span class="keyword">add</span> <span class="keyword">column</span> update_time datetime <span class="keyword">default</span> <span class="built_in">current_timestamp</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgloc.com/2023/05/24/VAPpbv.png" alt="可以勾选更新字段使用自动获取时间戳"></p></li><li><p>实体类时期字段的数据类型选择【通用数据库实现】</p><ol><li><p>使用<code>@Tabfield</code>的填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 层面的实现</span></span><br><span class="line"><span class="keyword">package</span> com.example.zhxy.entity.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现元对象处理器接口<code>MetaObjectHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处需要灵活配置，只是存在优化的点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.zhxy.mybatis.meta;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> <span class="built_in">this</span>.getFieldValByName(<span class="string">&quot;age&quot;</span>, metaObject);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 优化</span></span><br><span class="line">        <span class="comment">// 1. 可以通过 metaObject.hasXxx 判断进行优化选择自动填充字段【如果是某一个表中的字段时,因为自动填充只要执行 Insert 语句就会执行,所以对字段筛选，如果某个实体类中没有该字段,则不执行自动填充】</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasAgeSetter</span> <span class="operator">=</span> metaObject.hasSetter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hasAgeSetter) &#123;</span><br><span class="line">            <span class="comment">// 有这个字段则执行自动填充</span></span><br><span class="line">            <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;age&quot;</span>, Integer.class, <span class="number">3</span>); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.说明业务层未实现数据填充,则进行自动填充</span></span><br><span class="line">        <span class="keyword">if</span> (age == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;age&quot;</span>, Integer.class, <span class="number">3</span>); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="Mybatis-Plus分页"><a href="#Mybatis-Plus分页" class="headerlink" title="Mybatis-Plus分页"></a>Mybatis-Plus分页</h4><ul><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zhxy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis-plus 分页配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL); <span class="comment">// 指定数据库类型</span></span><br><span class="line">        interceptor.addInnerInterceptor(paginationInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新版本</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigurationCustomizer <span class="title function_">configurationCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="前端解构"><a href="#前端解构" class="headerlink" title="前端解构"></a>前端解构</h4><ul><li><p>数组结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> [num1, num2, num3] = arr;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num2)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num3)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num4)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>对象结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> userInfo = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userName</span>: <span class="string">&quot;zs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">friend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;userName, friend&#125; = userInfo;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userName)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(friend)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结构数据重命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 data 重新命名为 res</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = &#123;&#125;</span><br><span class="line"><span class="comment">// 获取 data 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="前端统一数据模型"><a href="#前端统一数据模型" class="headerlink" title="前端统一数据模型"></a>前端统一数据模型</h4><ul><li><p>响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zhxy.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(HttpServletResponse response, ResultModel resultModel)</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 封装 response 的状态码和内容格式</span></span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        <span class="comment">// 内容：resultModel json</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用jackson，把json格式的resultModel写入到response的输出流中</span></span><br><span class="line">            objectMapper.writeValue(response.getOutputStream(), resultModel);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>统一数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zhxy.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultModel</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code; <span class="comment">// 1000表示成功 401表示认证失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ResultModel</span> <span class="variable">resultModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultModel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">success</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">1000</span>);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">success</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">200</span>);</span><br><span class="line">        resultModel.setMessage(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        resultModel.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">success</span><span class="params">(String message, Object data)</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">200</span>);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">success</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">200</span>);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">success</span><span class="params">(Integer code, String message, Object data)</span> &#123;</span><br><span class="line">        resultModel.setCode(code);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">500</span>);</span><br><span class="line">        resultModel.setMessage(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        resultModel.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        resultModel.setCode(<span class="number">500</span>);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">error</span><span class="params">(Integer code, String message, Object data)</span> &#123;</span><br><span class="line">        resultModel.setCode(code);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        resultModel.setCode(code);</span><br><span class="line">        resultModel.setMessage(message);</span><br><span class="line">        resultModel.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Vscode关于-提示插件"><a href="#Vscode关于-提示插件" class="headerlink" title="Vscode关于@提示插件"></a>Vscode关于<code>@</code>提示插件</h4><ul><li><p><code>Path Autocomplete</code></p></li><li><p>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;path-autocomplete.extensionOnImport&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 配置 @ 路径提示</span></span><br><span class="line"><span class="attr">&quot;path-autocomplete.pathMappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;folder&#125;/src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI-日期选择器-前后端交互</title>
      <link href="/2023/06/23/7da8fa3f/"/>
      <url>/2023/06/23/7da8fa3f/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h3><ul><li><p>页面效果</p><p><img src="https://img-blog.csdnimg.cn/30afe40249304ef880311229be00f646.png" alt="页面效果"></p></li><li><p>组件源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    daterange: 范围选择类型</span></span><br><span class="line"><span class="comment">    format: 绑定后表单中显示的格式</span></span><br><span class="line"><span class="comment">    value-format: 传递时显示的格式</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;rangeTime&quot;</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span> <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span> <span class="attr">format</span>=<span class="string">&quot;yyyy 年 MM 月 dd 日&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  v-model=&quot;rangeTime&quot; --&gt;</span> </span><br><span class="line">rangeTime: [], </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件表单对象</span></span><br><span class="line"><span class="attr">regionFormVO</span>: &#123;</span><br><span class="line">    <span class="attr">regionId</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">regionName</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">cityName</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">addressName</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">createTime</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">endTime</span>: <span class="literal">undefined</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数据重组 --&gt;</span><br><span class="line"><span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">regionFormVO</span></span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 将绑定后的值绑定</span></span><br><span class="line">        data.<span class="property">createTime</span> = <span class="variable language_">this</span>.<span class="property">rangeTime</span>[<span class="number">0</span>]</span><br><span class="line">        data.<span class="property">endTime</span> = <span class="variable language_">this</span>.<span class="property">rangeTime</span>[<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data: &quot;</span>, data);</span><br><span class="line">        <span class="comment">// 重新组装提交的数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">currentPage</span>, <span class="variable language_">this</span>.<span class="property">pageSize</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">currentPage</span>, <span class="variable language_">this</span>.<span class="property">pageSize</span>, <span class="variable language_">this</span>.<span class="property">regionFormVO</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步请求</span></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="params">currentPage, pageSize, regionFormVO</span>) &#123;</span><br><span class="line">    <span class="title function_">getListPage</span>(currentPage, pageSize, regionFormVO).<span class="title function_">then</span>(<span class="keyword">async</span> response =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> response</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentPage</span> = res.<span class="property">current</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pageSize</span> = res.<span class="property">size</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">records</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">total</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h3><ul><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.example.mapper.RegionMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.pojo.dto.RegionFormDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.pojo.vo.RegionFormVO;</span><br><span class="line"><span class="keyword">import</span> com.example.result.ResultModel;</span><br><span class="line"><span class="keyword">import</span> com.example.service.RegionService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.propertyeditors.CustomDateEditor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;区域信息&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/region&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegionController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RegionService regionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取分页列表&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;RegionFormDTO&gt; <span class="title function_">listPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(value = &quot;当前页码&quot;, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(&quot;currentPage&quot;)</span> Integer currentPage,</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(value = &quot;每页记录数&quot;, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(value = &quot;查询对象&quot;)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> RegionFormVO regionFormVO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;regionFormVO: &#123;&#125;&quot;</span>,regionFormVO.toString());</span><br><span class="line">        Page&lt;RegionFormDTO&gt; pageParam = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class="line">        IPage&lt;RegionFormDTO&gt; pageModel = regionService.selectListPage(pageParam, regionFormVO);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(pageModel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RegionMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Region&gt; &#123;</span><br><span class="line">    IPage&lt;RegionFormDTO&gt; <span class="title function_">selectPageVo</span><span class="params">(Page&lt;RegionFormDTO&gt; page, RegionFormVO regionFormVO)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.RegionMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- IPage&lt;RegionFormDTO&gt; selectPageVo(Page&lt;RegionFormDTO&gt; page, RegionFormVO regionFormVO);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;regionFormDTO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;regionFormVO&quot;</span>&gt;</span></span><br><span class="line">    SELECT r.regionId, r.regionName, c.cityName, a.addressName, createTime, endTime</span><br><span class="line">    FROM region r</span><br><span class="line">    JOIN city c ON r.regionId = c.regionId</span><br><span class="line">    JOIN address a ON c.cityId = a.cityId</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;regionFormVO.regionName != null and regionFormVO.regionName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or r.regionName LIKE #&#123;regionFormVO.regionName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;regionFormVO.cityName != null and  regionFormVO.cityName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or c.cityName LIKE #&#123;regionFormVO.cityName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;regionFormVO.addressName != null and regionFormVO.addressName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or a.addressName LIKE #&#123;regionFormVO.addressName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;regionFormVO.createTime != null and regionFormVO.createTime!=&#x27;&#x27; and  regionFormVO.endTime != null and regionFormVO.endTime !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or createTime BETWEEN #&#123;regionFormVO.createTime&#125; AND #&#123;regionFormVO.endTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RegionService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Region&gt; &#123;</span><br><span class="line">    IPage&lt;RegionFormDTO&gt; <span class="title function_">selectListPage</span><span class="params">(Page&lt;RegionFormDTO&gt; pageParam, RegionFormVO regionFormVO)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegionServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RegionMapper, Region&gt; <span class="keyword">implements</span> <span class="title class_">RegionService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;RegionFormDTO&gt; <span class="title function_">selectListPage</span><span class="params">(Page&lt;RegionFormDTO&gt; pageParam, RegionFormVO regionFormVO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectPageVo(pageParam, regionFormVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>请求日志</p><p><img src="https://img-blog.csdnimg.cn/06d82be7462b45299282197dc2a7e2bb.png" alt="请求日期范围"></p><p><img src="https://img-blog.csdnimg.cn/ecbafeb9c0c848c695897aa524b13fff.png" alt="日志解析"></p></li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p>数据库的日期类型是<code>datetime</code></p></li><li><p>在真正的实体类上对应的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;Region对象&quot;, description = &quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Region</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;regionId&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer regionId;</span><br><span class="line">    <span class="meta">@TableField(&quot;regionName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String regionName;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(&quot;endTime&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>vo</code>时使用<code>String</code>类型,在测试过程中<code>Date</code>反复报错</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 前后端交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-多版本无缝切换</title>
      <link href="/2023/06/23/9f9a8f86/"/>
      <url>/2023/06/23/9f9a8f86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="NVM-无缝切换Node版本"><a href="#NVM-无缝切换Node版本" class="headerlink" title="NVM-无缝切换Node版本"></a>NVM-无缝切换Node版本</h3><ul><li><p>如果未使用<code>nvm</code>之前已经下载了<code>node</code>，并且配置了环境变量,那么此时删除这些配置(<code>Node的环境以及Node软件</code>),使用<code>nvm</code>是为了在某些项目中使用低版本的<code>node</code></p></li><li><p><code>NVM</code>下载</p><blockquote><p>进入<code>github</code>的<code>nvm readme</code>： <a href="https://github.com/coreybutler/nvm-windows#readme">https://github.com/coreybutler/nvm-windows#readme</a>, 点击 <code>download</code> </p></blockquote><p><img src="https://img-blog.csdnimg.cn/17c2401158504751b79a7dd5edaee08c.png" alt="下载"></p><blockquote><p>点击下载： <a href="https://github.com/coreybutler/nvm-windows/releases/download/1.1.11/nvm-setup.exe">https://github.com/coreybutler/nvm-windows/releases/download/1.1.11/nvm-setup.exe</a></p></blockquote></li><li><p>下载完毕后点击使用右键以<code>管理员方式安装</code></p></li><li><p>终端中输入下列命令启用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nvm</span> <span class="string">on</span></span><br></pre></td></tr></table></figure></li><li><p>在终端获取安装路径</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前安装的 nvm 家目录</span></span><br><span class="line"><span class="attr">nvm</span> <span class="string">root </span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/70b009950d7e4486a98e966ebdb12e16.png" alt="获取安装的家目录"></p></li><li><p>进入<code>nvm</code>家目录,在显示的目录下新建<code>settings.txt</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除带有 # 以及后面的内容,因为文件格式为 txt 不支持注释</span></span><br><span class="line"><span class="attr">root</span>: <span class="string">C:\Users\33275\AppData\Roaming\nvm   # nvm 的家目录</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">C:\Users\33275\AppData\Roaming\nvm\nodejs # 软连接目录</span></span><br><span class="line"><span class="attr">arch</span>: <span class="string">64</span></span><br><span class="line"><span class="attr">proxy</span>: <span class="string">none</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/node/</span></span><br><span class="line"><span class="attr">npm_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/npm/</span></span><br></pre></td></tr></table></figure></li><li><p>配置环境变量,主要用于切换版本</p><ul><li><p><code>NVM_HOME</code>: 配置<code>nvm root</code>显示的路径到<code>系统环境变量</code></p></li><li><p><code>NVM_SYMLINK</code>:  <code>NVM</code>配置<code>Node.js</code>的软链接(<code>只是一个目录</code>)，该目录需指向并不存在的目录（<code>NVM使用时候会自动创建</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NVM_SYMLINK</span>: <span class="string">C:\Users\33275\AppData\Roaming\nvm\nodejs # nodejs 不需要手动创建</span></span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/05/12/iutkbN.png" alt="配置相关环境变量,没有出现nodejs是后续添加了"></p></li><li><p><code>PATH</code>中添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">%NVM_HOME%</span></span><br><span class="line"><span class="comment"># 这个路径如果安装 nvm 软件之后会自动在用户的 “环境变量中创建一份,如果需要自定义链接位置时，需要删除,否则会优先生效而导致自定义路径失效”</span></span><br><span class="line"><span class="attr">%NVM_SYMLINK%</span> <span class="string"></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试切换版本</p><ul><li><p>安装版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可以安装的版本</span></span><br><span class="line"><span class="attr">nvm</span> <span class="string">list available</span></span><br><span class="line"><span class="comment"># 安装,如果直接输入整数数值会自动选择一个这个版本内的版本,比如 16 =&gt; 自动选择 16.20.0</span></span><br><span class="line"><span class="attr">nvm</span> <span class="string">install 版本数字</span></span><br></pre></td></tr></table></figure></li><li><p>查看当前使用的版本</p><p><img src="https://img-blog.csdnimg.cn/0a2b38729df14c9a8e5adf9ec652f94b.png" alt="查看当前使用的版本"></p></li><li><p>切换版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行后需要重新启动终端</span></span><br><span class="line"><span class="attr">nvm</span> <span class="string">use 18</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4b266bd5df1c4d949b76e6cbaf3f8d81.png" alt="实现无缝切换"></p><ul><li><p>注意</p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>这个版本的切换会导致某些项目下载的包失效,这个失效原因就是切换了版本导致的。只需要切换回下载包的<code>node</code>版本即可。</p><p><img src="https://i.328888.xyz/2023/05/17/ViMqlo.png" alt="当前项目下切换版本导致的下载失效"></p></div></li></ul></li></ul></li><li><p>全局安装</p><ul><li><p><code>yarn</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g yarn</span></span><br></pre></td></tr></table></figure></li><li><p><code>vue-cli</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g @vue/cli</span></span><br></pre></td></tr></table></figure></li><li><p><code>webpack</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install -g webpack webpack-cli</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>测试安装版本</p><p><img src="https://i.328888.xyz/2023/05/12/iuthgP.png" alt="各个组件的版本信息以及安装位置"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT-Windows-多账号多平台配置</title>
      <link href="/2023/06/23/bbf8718d/"/>
      <url>/2023/06/23/bbf8718d/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="SSH-GIT多账户最佳实践配置"><a href="#SSH-GIT多账户最佳实践配置" class="headerlink" title="SSH-GIT多账户最佳实践配置"></a>SSH-GIT多账户最佳实践配置</h3><ol><li><p>为每个 <code>GitHub</code> 账户生成一对<code>SSH</code> 密钥，以及一个 <code>Gitee</code> 账户的 <code>SSH</code> 密钥</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ed25519 / rsa</span></span><br><span class="line"><span class="attr">ssh-keygen</span> <span class="string">-t ed25519 -C &quot;123456@qq.com&quot; -f ~/.ssh/coder_itl_github</span></span><br><span class="line"><span class="attr">ssh-keygen</span> <span class="string">-t ed25519 -C &quot;123456@gmail.com&quot; -f ~/.ssh/itl_coder</span></span><br><span class="line"><span class="attr">ssh-keygen</span> <span class="string">-t ed25519 -C &quot;123456@qq.com&quot; -f ~/.ssh/coder_itl_gitee</span></span><br></pre></td></tr></table></figure></li><li><p>将每个公钥添加到相应的 GitHub 或 Gitee 账户中。您可以通过以下方式复制公钥</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clip</span> <span class="string">&lt; ~/.ssh/coder_itl_github.pub</span></span><br><span class="line"><span class="attr">clip</span> <span class="string">&lt; ~/.ssh/itl_coder.pub</span></span><br><span class="line"><span class="attr">clip</span> <span class="string">&lt; ~/.ssh/coder_itl_gitee.pub</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来，打开每个账户的网站，并将公钥添加到相应的账户设置中。</p></blockquote></li><li><p>创建一个名为 <code>config</code> 的文件，并将其存储在 <code>.ssh</code> 文件夹中。该文件将包含每个账户的配置信息。以下是 <code>config</code> 文件的示例内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ITL-Coder account</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com-itl-coder</span></span><br><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">    <span class="attr">User</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/itl_coder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># CoderITL account</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com-coderitl</span></span><br><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">    <span class="attr">User</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/coder_itl_github</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Gitee account</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitee.com</span></span><br><span class="line">    <span class="attr">HostName</span> <span class="string">gitee.com</span></span><br><span class="line">    <span class="attr">User</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/coder_itl_gitee</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置用户名和密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">config  --global user.name &quot;username&quot;</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config  --global user.email &quot;xx@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>测试是否配置正确</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gmail</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">-T git@github.com-itl-coder </span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">-T git@github.com-coderitl </span></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">-T git@gitee.com</span></span><br></pre></td></tr></table></figure></li><li><p>如果您需要在同一会话中使用多个账户，则可以使用以下命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 ITL-Coder 的密钥到 ssh-agent</span></span><br><span class="line"><span class="attr">ssh-add</span> <span class="string">~/.ssh/itl_coder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加 CoderITL 的密钥到 ssh-agent</span></span><br><span class="line"><span class="attr">ssh-add</span> <span class="string">~/.ssh/coder_itl_github</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加 Gitee 的密钥到 ssh-agent</span></span><br><span class="line"><span class="attr">ssh-add</span> <span class="string">~/.ssh/coder_itl_gitee</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>如果<code>ssh-add</code>出现错误</p><ul><li><p><code>PowerShell</code>终端执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> `ssh-agent -s`</span><br><span class="line">ssh-add ~/.ssh/coder_itl_gitee</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>当在推送时需要,后续修改在网页中获取到的<code>ssh</code>地址,因为在本地的<code>config</code>文件中配置,需要使用这个<code>本地配置的域名进行区分推送到那个账户上</code></p><p><img src="https://img-blog.csdnimg.cn/28b0e48b7fd04017ae745a68c4a497bf.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>标签插件</title>
      <link href="/2023/06/23/59b60d90/"/>
      <url>/2023/06/23/59b60d90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><h4 id="行内文本样式"><a href="#行内文本样式" class="headerlink" title="行内文本样式"></a>行内文本样式</h4><ul><li><p><code>text</code></p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">语法</button></li><li class="tab"><button type="button" data-href="#-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;%</span> <span class="string">u 文本内容 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">emp 文本内容 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">wavy 文本内容 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">del 文本内容 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">kbd 文本内容 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">psw 文本内容 %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li>渲染<ul><li><u>文本内容</u></li><li><emp>文本内容</emp></li><li><wavy>文本内容</wavy></li><li><del>文本内容</del></li><li><kbd>文本内容</kbd></li><li><psw>文本内容</psw></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h4 id="行内文本"><a href="#行内文本" class="headerlink" title="行内文本"></a>行内文本</h4><ul><li><p><code>span</code></p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">语法</button></li><li class="tab"><button type="button" data-href="#-2">配置参数</button></li><li class="tab"><button type="button" data-href="#-3">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;%</span> <span class="string">span 样式参数(参数以空格划分), 文本内容 %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span red, 红色 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span yellow, 黄色 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span green, 绿色 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span cyan, 青色 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span blue, 蓝色 %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span gray, 灰色 %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span center logo large, Volantis %&#125;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">span center small, A Wonderful Theme for Hexo %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li>配置参数<ol><li>字体: <code>logo, code</code></li><li>颜色: <code>red,yellow,green,cyan,blue,gray</code></li><li>大小: <code>small, h4, h3, h2, h1, large, huge, ultra</code></li><li>对齐方向: <code>left, center, right</code></li></ol></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ul><li>渲染<ul><li><span class='p red'>红色</span></li><li><span class='p yellow'>黄色</span></li><li><span class='p green'>绿色</span></li><li><span class='p cyan'>青色</span></li><li><span class='p blue'>蓝色</span></li><li><span class='p gray'>灰色</span></li><li><span class='p left logo large'>Volantis</span></li><li><span class='p left small'>A Wonderful Theme for Hexo</span></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li><p><code>note</code></p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">语法</button></li><li class="tab"><button type="button" data-href="#note-2">渲染</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;%</span> <span class="string">note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><ul><li><p>渲染</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay </p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…. </p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h4 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h4><ul><li><p><code>timeline</code></p><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#timeline-1">语法</button></li><li class="tab"><button type="button" data-href="#timeline-2">参数</button></li><li class="tab"><button type="button" data-href="#timeline-3">渲染</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="timeline-1"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;%</span> <span class="string">timeline 时间线标题（可选）[,color] %&#125;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">timeline 时间节点（标题） --&gt;</span></span><br><span class="line"><span class="attr">正文内容</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">endtimeline --&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">timeline 时间节点（标题） --&gt;</span></span><br><span class="line"><span class="attr">正文内容</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">endtimeline --&gt;</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">endtimeline %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-2"><ul><li><p>参数</p><p><img src="https://i.imgloc.com/2023/06/23/VIw5Oo.png" alt=""></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><ul><li><p>渲染</p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h4 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h4><ul><li><p><code>folding</code></p><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#folding-1">语法</button></li><li class="tab"><button type="button" data-href="#folding-2">参数</button></li><li class="tab"><button type="button" data-href="#folding-3">渲染</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="folding-1"><ul><li><p>语法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;%</span> <span class="string">folding 参数（可选）, 标题 %&#125;</span></span><br><span class="line"><span class="comment">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span></span><br><span class="line"><span class="attr">&#123;%</span> <span class="string">endfolding %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ul><li>参数<ol><li>颜色：<code>blue, cyan, green, yellow, red</code></li><li>状态：状态填写 <code>open</code> 代表默认打开。</li></ol></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-3"><ul><li><p>渲染</p><details class="folding-tag" 参数（可选）><summary> 标题 </summary>          <div class='content'>          <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>          </div>        </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
